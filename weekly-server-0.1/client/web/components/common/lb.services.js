// CommonJS package manager support
if (typeof module !== 'undefined' && typeof exports !== 'undefined' &&
  module.exports === exports) {
  // Export the *name* of this Angular module
  // Sample usage:
  //
  //   import lbServices from './lb-services';
  //   angular.module('app', [lbServices]);
  //
  module.exports = "lbServices";
}

(function(window, angular, undefined) {
  'use strict';

  var urlBase = "/api";
  var authHeader = 'authorization';

  function getHost(url) {
    var m = url.match(/^(?:https?:)?\/\/([^\/]+)/);
    return m ? m[1] : null;
  }

  var urlBaseHost = getHost(urlBase) || location.host;

/**
 * @ngdoc overview
 * @name lbServices
 * @module
 * @description
 *
 * The `lbServices` module provides services for interacting with
 * the models exposed by the LoopBack server via the REST API.
 *
 */
  var module = angular.module("lbServices", ['ngResource']);

/**
 * @ngdoc object
 * @name lbServices.Email
 * @header lbServices.Email
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `Email` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "Email",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector', '$q',
      function(LoopBackResource, LoopBackAuth, $injector, $q) {
        var R = LoopBackResource(
        urlBase + "/Emails/:id",
          { 'id': '@id' },
          {
          }
        );




        /**
        * @ngdoc property
        * @name lbServices.Email#modelName
        * @propertyOf lbServices.Email
        * @description
        * The name of the model represented by this $resource,
        * i.e. `Email`.
        */
        R.modelName = "Email";



        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.RoleMapping
 * @header lbServices.RoleMapping
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `RoleMapping` model.
 *
 * **Details**
 *
 * Map principals to roles
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "RoleMapping",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector', '$q',
      function(LoopBackResource, LoopBackAuth, $injector, $q) {
        var R = LoopBackResource(
        urlBase + "/roleMappings/:id",
          { 'id': '@id' },
          {

            // INTERNAL. Use RoleMapping.role() instead.
            "prototype$__get__role": {
              url: urlBase + "/roleMappings/:id/role",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.RoleMapping#create
             * @methodOf lbServices.RoleMapping
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `RoleMapping` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/roleMappings",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.RoleMapping#createMany
             * @methodOf lbServices.RoleMapping
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `RoleMapping` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/roleMappings",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.RoleMapping#upsert
             * @methodOf lbServices.RoleMapping
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `RoleMapping` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/roleMappings",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.RoleMapping#replaceOrCreate
             * @methodOf lbServices.RoleMapping
             *
             * @description
             *
             * Replace an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `RoleMapping` object.)
             * </em>
             */
            "replaceOrCreate": {
              url: urlBase + "/roleMappings/replaceOrCreate",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.RoleMapping#upsertWithWhere
             * @methodOf lbServices.RoleMapping
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` â€“ `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `RoleMapping` object.)
             * </em>
             */
            "upsertWithWhere": {
              url: urlBase + "/roleMappings/upsertWithWhere",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.RoleMapping#exists
             * @methodOf lbServices.RoleMapping
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` â€“ `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/roleMappings/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.RoleMapping#findById
             * @methodOf lbServices.RoleMapping
             *
             * @description
             *
             * Find a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - Model id
             *
             *  - `filter` â€“ `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `RoleMapping` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/roleMappings/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.RoleMapping#replaceById
             * @methodOf lbServices.RoleMapping
             *
             * @description
             *
             * Replace attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - Model id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `RoleMapping` object.)
             * </em>
             */
            "replaceById": {
              url: urlBase + "/roleMappings/:id/replace",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.RoleMapping#find
             * @methodOf lbServices.RoleMapping
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` â€“ `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `RoleMapping` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/roleMappings",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.RoleMapping#findOne
             * @methodOf lbServices.RoleMapping
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` â€“ `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `RoleMapping` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/roleMappings/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.RoleMapping#updateAll
             * @methodOf lbServices.RoleMapping
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` â€“ `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
            "updateAll": {
              url: urlBase + "/roleMappings/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.RoleMapping#deleteById
             * @methodOf lbServices.RoleMapping
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `RoleMapping` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/roleMappings/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.RoleMapping#count
             * @methodOf lbServices.RoleMapping
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` â€“ `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` â€“ `{number=}` -
             */
            "count": {
              url: urlBase + "/roleMappings/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.RoleMapping#prototype$updateAttributes
             * @methodOf lbServices.RoleMapping
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - RoleMapping id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `RoleMapping` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/roleMappings/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.RoleMapping#createChangeStream
             * @methodOf lbServices.RoleMapping
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` â€“ `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` â€“ `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/roleMappings/change-stream",
              method: "POST",
            },

            // INTERNAL. Use Role.principals.findById() instead.
            "::findById::Role::principals": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/roles/:id/principals/:fk",
              method: "GET",
            },

            // INTERNAL. Use Role.principals.destroyById() instead.
            "::destroyById::Role::principals": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/roles/:id/principals/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Role.principals.updateById() instead.
            "::updateById::Role::principals": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/roles/:id/principals/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Role.principals() instead.
            "::get::Role::principals": {
              isArray: true,
              url: urlBase + "/roles/:id/principals",
              method: "GET",
            },

            // INTERNAL. Use Role.principals.create() instead.
            "::create::Role::principals": {
              url: urlBase + "/roles/:id/principals",
              method: "POST",
            },

            // INTERNAL. Use Role.principals.createMany() instead.
            "::createMany::Role::principals": {
              isArray: true,
              url: urlBase + "/roles/:id/principals",
              method: "POST",
            },

            // INTERNAL. Use Role.principals.destroyAll() instead.
            "::delete::Role::principals": {
              url: urlBase + "/roles/:id/principals",
              method: "DELETE",
            },

            // INTERNAL. Use Role.principals.count() instead.
            "::count::Role::principals": {
              url: urlBase + "/roles/:id/principals/count",
              method: "GET",
            },

            // INTERNAL. Use User.roleMapping.findById() instead.
            "::findById::User::roleMapping": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/users/:id/roleMapping/:fk",
              method: "GET",
            },

            // INTERNAL. Use User.roleMapping.destroyById() instead.
            "::destroyById::User::roleMapping": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/users/:id/roleMapping/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use User.roleMapping.updateById() instead.
            "::updateById::User::roleMapping": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/users/:id/roleMapping/:fk",
              method: "PUT",
            },

            // INTERNAL. Use User.roleMapping() instead.
            "::get::User::roleMapping": {
              isArray: true,
              url: urlBase + "/users/:id/roleMapping",
              method: "GET",
            },

            // INTERNAL. Use User.roleMapping.create() instead.
            "::create::User::roleMapping": {
              url: urlBase + "/users/:id/roleMapping",
              method: "POST",
            },

            // INTERNAL. Use User.roleMapping.createMany() instead.
            "::createMany::User::roleMapping": {
              isArray: true,
              url: urlBase + "/users/:id/roleMapping",
              method: "POST",
            },

            // INTERNAL. Use User.roleMapping.destroyAll() instead.
            "::delete::User::roleMapping": {
              url: urlBase + "/users/:id/roleMapping",
              method: "DELETE",
            },

            // INTERNAL. Use User.roleMapping.count() instead.
            "::count::User::roleMapping": {
              url: urlBase + "/users/:id/roleMapping/count",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.RoleMapping#patchOrCreate
             * @methodOf lbServices.RoleMapping
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `RoleMapping` object.)
             * </em>
             */
        R["patchOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.RoleMapping#updateOrCreate
             * @methodOf lbServices.RoleMapping
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `RoleMapping` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.RoleMapping#patchOrCreateWithWhere
             * @methodOf lbServices.RoleMapping
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` â€“ `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `RoleMapping` object.)
             * </em>
             */
        R["patchOrCreateWithWhere"] = R["upsertWithWhere"];

            /**
             * @ngdoc method
             * @name lbServices.RoleMapping#update
             * @methodOf lbServices.RoleMapping
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` â€“ `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.RoleMapping#destroyById
             * @methodOf lbServices.RoleMapping
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `RoleMapping` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.RoleMapping#removeById
             * @methodOf lbServices.RoleMapping
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `RoleMapping` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.RoleMapping#patchAttributes
             * @methodOf lbServices.RoleMapping
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - RoleMapping id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `RoleMapping` object.)
             * </em>
             */
        R["patchAttributes"] = R["prototype$updateAttributes"];


        /**
        * @ngdoc property
        * @name lbServices.RoleMapping#modelName
        * @propertyOf lbServices.RoleMapping
        * @description
        * The name of the model represented by this $resource,
        * i.e. `RoleMapping`.
        */
        R.modelName = "RoleMapping";


            /**
             * @ngdoc method
             * @name lbServices.RoleMapping#role
             * @methodOf lbServices.RoleMapping
             *
             * @description
             *
             * Fetches belongsTo relation role.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - RoleMapping id
             *
             *  - `refresh` â€“ `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Role` object.)
             * </em>
             */
        R.role = function() {
          var TargetResource = $injector.get("Role");
          var action = TargetResource["::get::RoleMapping::role"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.Role
 * @header lbServices.Role
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `Role` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "Role",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector', '$q',
      function(LoopBackResource, LoopBackAuth, $injector, $q) {
        var R = LoopBackResource(
        urlBase + "/roles/:id",
          { 'id': '@id' },
          {

            // INTERNAL. Use Role.principals.findById() instead.
            "prototype$__findById__principals": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/roles/:id/principals/:fk",
              method: "GET",
            },

            // INTERNAL. Use Role.principals.destroyById() instead.
            "prototype$__destroyById__principals": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/roles/:id/principals/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Role.principals.updateById() instead.
            "prototype$__updateById__principals": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/roles/:id/principals/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Role.principals() instead.
            "prototype$__get__principals": {
              isArray: true,
              url: urlBase + "/roles/:id/principals",
              method: "GET",
            },

            // INTERNAL. Use Role.principals.create() instead.
            "prototype$__create__principals": {
              url: urlBase + "/roles/:id/principals",
              method: "POST",
            },

            // INTERNAL. Use Role.principals.destroyAll() instead.
            "prototype$__delete__principals": {
              url: urlBase + "/roles/:id/principals",
              method: "DELETE",
            },

            // INTERNAL. Use Role.principals.count() instead.
            "prototype$__count__principals": {
              url: urlBase + "/roles/:id/principals/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Role#create
             * @methodOf lbServices.Role
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Role` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/roles",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Role#createMany
             * @methodOf lbServices.Role
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Role` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/roles",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Role#upsert
             * @methodOf lbServices.Role
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Role` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/roles",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.Role#replaceOrCreate
             * @methodOf lbServices.Role
             *
             * @description
             *
             * Replace an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Role` object.)
             * </em>
             */
            "replaceOrCreate": {
              url: urlBase + "/roles/replaceOrCreate",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Role#upsertWithWhere
             * @methodOf lbServices.Role
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` â€“ `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Role` object.)
             * </em>
             */
            "upsertWithWhere": {
              url: urlBase + "/roles/upsertWithWhere",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Role#exists
             * @methodOf lbServices.Role
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` â€“ `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/roles/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Role#findById
             * @methodOf lbServices.Role
             *
             * @description
             *
             * Find a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - Model id
             *
             *  - `filter` â€“ `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Role` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/roles/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Role#replaceById
             * @methodOf lbServices.Role
             *
             * @description
             *
             * Replace attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - Model id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Role` object.)
             * </em>
             */
            "replaceById": {
              url: urlBase + "/roles/:id/replace",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Role#find
             * @methodOf lbServices.Role
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` â€“ `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Role` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/roles",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Role#findOne
             * @methodOf lbServices.Role
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` â€“ `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Role` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/roles/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Role#updateAll
             * @methodOf lbServices.Role
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` â€“ `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
            "updateAll": {
              url: urlBase + "/roles/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Role#deleteById
             * @methodOf lbServices.Role
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Role` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/roles/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.Role#count
             * @methodOf lbServices.Role
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` â€“ `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` â€“ `{number=}` -
             */
            "count": {
              url: urlBase + "/roles/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Role#prototype$updateAttributes
             * @methodOf lbServices.Role
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - Role id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Role` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/roles/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.Role#createChangeStream
             * @methodOf lbServices.Role
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` â€“ `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` â€“ `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/roles/change-stream",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Role#grant
             * @methodOf lbServices.Role
             *
             * @description
             *
             * grant user role
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `credentials` â€“ `{object}` -
             *
             *  - `res` â€“ `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Role` object.)
             * </em>
             */
            "grant": {
              url: urlBase + "/roles/grant",
              method: "POST",
            },

            // INTERNAL. Use RoleMapping.role() instead.
            "::get::RoleMapping::role": {
              url: urlBase + "/roleMappings/:id/role",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.Role#patchOrCreate
             * @methodOf lbServices.Role
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Role` object.)
             * </em>
             */
        R["patchOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.Role#updateOrCreate
             * @methodOf lbServices.Role
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Role` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.Role#patchOrCreateWithWhere
             * @methodOf lbServices.Role
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` â€“ `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Role` object.)
             * </em>
             */
        R["patchOrCreateWithWhere"] = R["upsertWithWhere"];

            /**
             * @ngdoc method
             * @name lbServices.Role#update
             * @methodOf lbServices.Role
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` â€“ `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.Role#destroyById
             * @methodOf lbServices.Role
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Role` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.Role#removeById
             * @methodOf lbServices.Role
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Role` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.Role#patchAttributes
             * @methodOf lbServices.Role
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - Role id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Role` object.)
             * </em>
             */
        R["patchAttributes"] = R["prototype$updateAttributes"];


        /**
        * @ngdoc property
        * @name lbServices.Role#modelName
        * @propertyOf lbServices.Role
        * @description
        * The name of the model represented by this $resource,
        * i.e. `Role`.
        */
        R.modelName = "Role";

    /**
     * @ngdoc object
     * @name lbServices.Role.principals
     * @header lbServices.Role.principals
     * @object
     * @description
     *
     * The object `Role.principals` groups methods
     * manipulating `RoleMapping` instances related to `Role`.
     *
     * Call {@link lbServices.Role#principals Role.principals()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.Role#principals
             * @methodOf lbServices.Role
             *
             * @description
             *
             * Queries principals of role.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - Role id
             *
             *  - `filter` â€“ `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `RoleMapping` object.)
             * </em>
             */
        R.principals = function() {
          var TargetResource = $injector.get("RoleMapping");
          var action = TargetResource["::get::Role::principals"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Role.principals#count
             * @methodOf lbServices.Role.principals
             *
             * @description
             *
             * Counts principals of role.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - Role id
             *
             *  - `where` â€“ `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` â€“ `{number=}` -
             */
        R.principals.count = function() {
          var TargetResource = $injector.get("RoleMapping");
          var action = TargetResource["::count::Role::principals"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Role.principals#create
             * @methodOf lbServices.Role.principals
             *
             * @description
             *
             * Creates a new instance in principals of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - Role id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `RoleMapping` object.)
             * </em>
             */
        R.principals.create = function() {
          var TargetResource = $injector.get("RoleMapping");
          var action = TargetResource["::create::Role::principals"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Role.principals#createMany
             * @methodOf lbServices.Role.principals
             *
             * @description
             *
             * Creates a new instance in principals of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - Role id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `RoleMapping` object.)
             * </em>
             */
        R.principals.createMany = function() {
          var TargetResource = $injector.get("RoleMapping");
          var action = TargetResource["::createMany::Role::principals"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Role.principals#destroyAll
             * @methodOf lbServices.Role.principals
             *
             * @description
             *
             * Deletes all principals of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - Role id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.principals.destroyAll = function() {
          var TargetResource = $injector.get("RoleMapping");
          var action = TargetResource["::delete::Role::principals"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Role.principals#destroyById
             * @methodOf lbServices.Role.principals
             *
             * @description
             *
             * Delete a related item by id for principals.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - Role id
             *
             *  - `fk` â€“ `{*}` - Foreign key for principals
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.principals.destroyById = function() {
          var TargetResource = $injector.get("RoleMapping");
          var action = TargetResource["::destroyById::Role::principals"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Role.principals#findById
             * @methodOf lbServices.Role.principals
             *
             * @description
             *
             * Find a related item by id for principals.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - Role id
             *
             *  - `fk` â€“ `{*}` - Foreign key for principals
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `RoleMapping` object.)
             * </em>
             */
        R.principals.findById = function() {
          var TargetResource = $injector.get("RoleMapping");
          var action = TargetResource["::findById::Role::principals"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Role.principals#updateById
             * @methodOf lbServices.Role.principals
             *
             * @description
             *
             * Update a related item by id for principals.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - Role id
             *
             *  - `fk` â€“ `{*}` - Foreign key for principals
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `RoleMapping` object.)
             * </em>
             */
        R.principals.updateById = function() {
          var TargetResource = $injector.get("RoleMapping");
          var action = TargetResource["::updateById::Role::principals"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.Container
 * @header lbServices.Container
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `Container` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "Container",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector', '$q',
      function(LoopBackResource, LoopBackAuth, $injector, $q) {
        var R = LoopBackResource(
        urlBase + "/containers/:id",
          { 'id': '@id' },
          {

            /**
             * @ngdoc method
             * @name lbServices.Container#getContainers
             * @methodOf lbServices.Container
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Container` object.)
             * </em>
             */
            "getContainers": {
              isArray: true,
              url: urlBase + "/containers",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Container#createContainer
             * @methodOf lbServices.Container
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Container` object.)
             * </em>
             */
            "createContainer": {
              url: urlBase + "/containers",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Container#destroyContainer
             * @methodOf lbServices.Container
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `container` â€“ `{string=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `` â€“ `{undefined=}` -
             */
            "destroyContainer": {
              url: urlBase + "/containers/:container",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.Container#getContainer
             * @methodOf lbServices.Container
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `container` â€“ `{string=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Container` object.)
             * </em>
             */
            "getContainer": {
              url: urlBase + "/containers/:container",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Container#getFiles
             * @methodOf lbServices.Container
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `container` â€“ `{string=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Container` object.)
             * </em>
             */
            "getFiles": {
              isArray: true,
              url: urlBase + "/containers/:container/files",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Container#getFile
             * @methodOf lbServices.Container
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `container` â€“ `{string=}` -
             *
             *  - `file` â€“ `{string=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Container` object.)
             * </em>
             */
            "getFile": {
              url: urlBase + "/containers/:container/files/:file",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Container#removeFile
             * @methodOf lbServices.Container
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `container` â€“ `{string=}` -
             *
             *  - `file` â€“ `{string=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `` â€“ `{undefined=}` -
             */
            "removeFile": {
              url: urlBase + "/containers/:container/files/:file",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.Container#upload
             * @methodOf lbServices.Container
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `req` â€“ `{object=}` -
             *
             *  - `res` â€“ `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `result` â€“ `{object=}` -
             */
            "upload": {
              url: urlBase + "/containers/:container/upload",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Container#download
             * @methodOf lbServices.Container
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `container` â€“ `{string=}` -
             *
             *  - `file` â€“ `{string=}` -
             *
             *  - `req` â€“ `{object=}` -
             *
             *  - `res` â€“ `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
            "download": {
              url: urlBase + "/containers/:container/download/:file",
              method: "GET",
            },
          }
        );




        /**
        * @ngdoc property
        * @name lbServices.Container#modelName
        * @propertyOf lbServices.Container
        * @description
        * The name of the model represented by this $resource,
        * i.e. `Container`.
        */
        R.modelName = "Container";



        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.File
 * @header lbServices.File
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `File` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "File",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector', '$q',
      function(LoopBackResource, LoopBackAuth, $injector, $q) {
        var R = LoopBackResource(
        urlBase + "/files/:id",
          { 'id': '@id' },
          {

            // INTERNAL. Use File.person() instead.
            "prototype$__get__person": {
              url: urlBase + "/files/:id/person",
              method: "GET",
            },

            // INTERNAL. Use File.company() instead.
            "prototype$__get__company": {
              url: urlBase + "/files/:id/company",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.File#create
             * @methodOf lbServices.File
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `File` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/files",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.File#createMany
             * @methodOf lbServices.File
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `File` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/files",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.File#upsert
             * @methodOf lbServices.File
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `File` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/files",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.File#replaceOrCreate
             * @methodOf lbServices.File
             *
             * @description
             *
             * Replace an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `File` object.)
             * </em>
             */
            "replaceOrCreate": {
              url: urlBase + "/files/replaceOrCreate",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.File#upsertWithWhere
             * @methodOf lbServices.File
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` â€“ `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `File` object.)
             * </em>
             */
            "upsertWithWhere": {
              url: urlBase + "/files/upsertWithWhere",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.File#exists
             * @methodOf lbServices.File
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` â€“ `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/files/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.File#findById
             * @methodOf lbServices.File
             *
             * @description
             *
             * Find a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - Model id
             *
             *  - `filter` â€“ `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `File` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/files/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.File#replaceById
             * @methodOf lbServices.File
             *
             * @description
             *
             * Replace attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - Model id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `File` object.)
             * </em>
             */
            "replaceById": {
              url: urlBase + "/files/:id/replace",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.File#find
             * @methodOf lbServices.File
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` â€“ `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `File` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/files",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.File#findOne
             * @methodOf lbServices.File
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` â€“ `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `File` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/files/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.File#updateAll
             * @methodOf lbServices.File
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` â€“ `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
            "updateAll": {
              url: urlBase + "/files/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.File#deleteById
             * @methodOf lbServices.File
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `File` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/files/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.File#count
             * @methodOf lbServices.File
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` â€“ `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` â€“ `{number=}` -
             */
            "count": {
              url: urlBase + "/files/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.File#prototype$updateAttributes
             * @methodOf lbServices.File
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `File` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/files/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.File#createChangeStream
             * @methodOf lbServices.File
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` â€“ `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` â€“ `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/files/change-stream",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.File#upload
             * @methodOf lbServices.File
             *
             * @description
             *
             * Uploads a file
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `options` â€“ `{object=}` -
             *
             * @param {Object} postData Request data.
             *
             *  - `ctx` â€“ `{object=}` -
             *
             *  - `res` â€“ `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `File` object.)
             * </em>
             */
            "upload": {
              url: urlBase + "/files/upload",
              method: "POST",
            },

            // INTERNAL. Use Banner.file() instead.
            "::get::Banner::file": {
              url: urlBase + "/banners/:id/file",
              method: "GET",
            },

            // INTERNAL. Use Banner.file.create() instead.
            "::create::Banner::file": {
              url: urlBase + "/banners/:id/file",
              method: "POST",
            },

            // INTERNAL. Use Banner.file.createMany() instead.
            "::createMany::Banner::file": {
              isArray: true,
              url: urlBase + "/banners/:id/file",
              method: "POST",
            },

            // INTERNAL. Use Banner.file.update() instead.
            "::update::Banner::file": {
              url: urlBase + "/banners/:id/file",
              method: "PUT",
            },

            // INTERNAL. Use Banner.file.destroy() instead.
            "::destroy::Banner::file": {
              url: urlBase + "/banners/:id/file",
              method: "DELETE",
            },

            // INTERNAL. Use Person.file.findById() instead.
            "::findById::Person::file": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/people/:id/file/:fk",
              method: "GET",
            },

            // INTERNAL. Use Person.file.destroyById() instead.
            "::destroyById::Person::file": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/people/:id/file/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Person.file.updateById() instead.
            "::updateById::Person::file": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/people/:id/file/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Person.file() instead.
            "::get::Person::file": {
              isArray: true,
              url: urlBase + "/people/:id/file",
              method: "GET",
            },

            // INTERNAL. Use Person.file.create() instead.
            "::create::Person::file": {
              url: urlBase + "/people/:id/file",
              method: "POST",
            },

            // INTERNAL. Use Person.file.createMany() instead.
            "::createMany::Person::file": {
              isArray: true,
              url: urlBase + "/people/:id/file",
              method: "POST",
            },

            // INTERNAL. Use Person.file.destroyAll() instead.
            "::delete::Person::file": {
              url: urlBase + "/people/:id/file",
              method: "DELETE",
            },

            // INTERNAL. Use Person.file.count() instead.
            "::count::Person::file": {
              url: urlBase + "/people/:id/file/count",
              method: "GET",
            },

            // INTERNAL. Use Company.file.findById() instead.
            "::findById::Company::file": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/companies/:id/file/:fk",
              method: "GET",
            },

            // INTERNAL. Use Company.file.destroyById() instead.
            "::destroyById::Company::file": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/companies/:id/file/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Company.file.updateById() instead.
            "::updateById::Company::file": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/companies/:id/file/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Company.file() instead.
            "::get::Company::file": {
              isArray: true,
              url: urlBase + "/companies/:id/file",
              method: "GET",
            },

            // INTERNAL. Use Company.file.create() instead.
            "::create::Company::file": {
              url: urlBase + "/companies/:id/file",
              method: "POST",
            },

            // INTERNAL. Use Company.file.createMany() instead.
            "::createMany::Company::file": {
              isArray: true,
              url: urlBase + "/companies/:id/file",
              method: "POST",
            },

            // INTERNAL. Use Company.file.destroyAll() instead.
            "::delete::Company::file": {
              url: urlBase + "/companies/:id/file",
              method: "DELETE",
            },

            // INTERNAL. Use Company.file.count() instead.
            "::count::Company::file": {
              url: urlBase + "/companies/:id/file/count",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.File#patchOrCreate
             * @methodOf lbServices.File
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `File` object.)
             * </em>
             */
        R["patchOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.File#updateOrCreate
             * @methodOf lbServices.File
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `File` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.File#patchOrCreateWithWhere
             * @methodOf lbServices.File
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` â€“ `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `File` object.)
             * </em>
             */
        R["patchOrCreateWithWhere"] = R["upsertWithWhere"];

            /**
             * @ngdoc method
             * @name lbServices.File#update
             * @methodOf lbServices.File
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` â€“ `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.File#destroyById
             * @methodOf lbServices.File
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `File` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.File#removeById
             * @methodOf lbServices.File
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `File` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.File#patchAttributes
             * @methodOf lbServices.File
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `File` object.)
             * </em>
             */
        R["patchAttributes"] = R["prototype$updateAttributes"];


        /**
        * @ngdoc property
        * @name lbServices.File#modelName
        * @propertyOf lbServices.File
        * @description
        * The name of the model represented by this $resource,
        * i.e. `File`.
        */
        R.modelName = "File";


            /**
             * @ngdoc method
             * @name lbServices.File#person
             * @methodOf lbServices.File
             *
             * @description
             *
             * Fetches belongsTo relation person.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - PersistedModel id
             *
             *  - `refresh` â€“ `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Person` object.)
             * </em>
             */
        R.person = function() {
          var TargetResource = $injector.get("Person");
          var action = TargetResource["::get::File::person"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.File#company
             * @methodOf lbServices.File
             *
             * @description
             *
             * Fetches belongsTo relation company.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - PersistedModel id
             *
             *  - `refresh` â€“ `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Company` object.)
             * </em>
             */
        R.company = function() {
          var TargetResource = $injector.get("Company");
          var action = TargetResource["::get::File::company"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.User
 * @header lbServices.User
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `User` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "User",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector', '$q',
      function(LoopBackResource, LoopBackAuth, $injector, $q) {
        var R = LoopBackResource(
        urlBase + "/users/:id",
          { 'id': '@id' },
          {

            /**
             * @ngdoc method
             * @name lbServices.User#prototype$__findById__accessTokens
             * @methodOf lbServices.User
             *
             * @description
             *
             * Find a related item by id for accessTokens.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - User id
             *
             *  - `fk` â€“ `{*}` - Foreign key for accessTokens
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
            "prototype$__findById__accessTokens": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/users/:id/accessTokens/:fk",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.User#prototype$__destroyById__accessTokens
             * @methodOf lbServices.User
             *
             * @description
             *
             * Delete a related item by id for accessTokens.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - User id
             *
             *  - `fk` â€“ `{*}` - Foreign key for accessTokens
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
            "prototype$__destroyById__accessTokens": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/users/:id/accessTokens/:fk",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.User#prototype$__updateById__accessTokens
             * @methodOf lbServices.User
             *
             * @description
             *
             * Update a related item by id for accessTokens.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - User id
             *
             *  - `fk` â€“ `{*}` - Foreign key for accessTokens
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
            "prototype$__updateById__accessTokens": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/users/:id/accessTokens/:fk",
              method: "PUT",
            },

            // INTERNAL. Use User.roleMapping.findById() instead.
            "prototype$__findById__roleMapping": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/users/:id/roleMapping/:fk",
              method: "GET",
            },

            // INTERNAL. Use User.roleMapping.destroyById() instead.
            "prototype$__destroyById__roleMapping": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/users/:id/roleMapping/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use User.roleMapping.updateById() instead.
            "prototype$__updateById__roleMapping": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/users/:id/roleMapping/:fk",
              method: "PUT",
            },

            // INTERNAL. Use User.event.findById() instead.
            "prototype$__findById__event": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/users/:id/event/:fk",
              method: "GET",
            },

            // INTERNAL. Use User.event.destroyById() instead.
            "prototype$__destroyById__event": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/users/:id/event/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use User.event.updateById() instead.
            "prototype$__updateById__event": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/users/:id/event/:fk",
              method: "PUT",
            },

            // INTERNAL. Use User.business.findById() instead.
            "prototype$__findById__business": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/users/:id/business/:fk",
              method: "GET",
            },

            // INTERNAL. Use User.business.destroyById() instead.
            "prototype$__destroyById__business": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/users/:id/business/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use User.business.updateById() instead.
            "prototype$__updateById__business": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/users/:id/business/:fk",
              method: "PUT",
            },

            // INTERNAL. Use User.news.findById() instead.
            "prototype$__findById__news": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/users/:id/news/:fk",
              method: "GET",
            },

            // INTERNAL. Use User.news.destroyById() instead.
            "prototype$__destroyById__news": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/users/:id/news/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use User.news.updateById() instead.
            "prototype$__updateById__news": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/users/:id/news/:fk",
              method: "PUT",
            },

            // INTERNAL. Use User.group() instead.
            "prototype$__get__group": {
              url: urlBase + "/users/:id/group",
              method: "GET",
            },

            // INTERNAL. Use User.group.create() instead.
            "prototype$__create__group": {
              url: urlBase + "/users/:id/group",
              method: "POST",
            },

            // INTERNAL. Use User.group.update() instead.
            "prototype$__update__group": {
              url: urlBase + "/users/:id/group",
              method: "PUT",
            },

            // INTERNAL. Use User.group.destroy() instead.
            "prototype$__destroy__group": {
              url: urlBase + "/users/:id/group",
              method: "DELETE",
            },

            // INTERNAL. Use User.groupMapping() instead.
            "prototype$__get__groupMapping": {
              url: urlBase + "/users/:id/groupMapping",
              method: "GET",
            },

            // INTERNAL. Use User.groupMapping.create() instead.
            "prototype$__create__groupMapping": {
              url: urlBase + "/users/:id/groupMapping",
              method: "POST",
            },

            // INTERNAL. Use User.groupMapping.update() instead.
            "prototype$__update__groupMapping": {
              url: urlBase + "/users/:id/groupMapping",
              method: "PUT",
            },

            // INTERNAL. Use User.groupMapping.destroy() instead.
            "prototype$__destroy__groupMapping": {
              url: urlBase + "/users/:id/groupMapping",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.User#prototype$__get__accessTokens
             * @methodOf lbServices.User
             *
             * @description
             *
             * Queries accessTokens of user.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - User id
             *
             *  - `filter` â€“ `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
            "prototype$__get__accessTokens": {
              isArray: true,
              url: urlBase + "/users/:id/accessTokens",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.User#prototype$__create__accessTokens
             * @methodOf lbServices.User
             *
             * @description
             *
             * Creates a new instance in accessTokens of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - User id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
            "prototype$__create__accessTokens": {
              url: urlBase + "/users/:id/accessTokens",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.User#prototype$__delete__accessTokens
             * @methodOf lbServices.User
             *
             * @description
             *
             * Deletes all accessTokens of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - User id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
            "prototype$__delete__accessTokens": {
              url: urlBase + "/users/:id/accessTokens",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.User#prototype$__count__accessTokens
             * @methodOf lbServices.User
             *
             * @description
             *
             * Counts accessTokens of user.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - User id
             *
             *  - `where` â€“ `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` â€“ `{number=}` -
             */
            "prototype$__count__accessTokens": {
              url: urlBase + "/users/:id/accessTokens/count",
              method: "GET",
            },

            // INTERNAL. Use User.roleMapping() instead.
            "prototype$__get__roleMapping": {
              isArray: true,
              url: urlBase + "/users/:id/roleMapping",
              method: "GET",
            },

            // INTERNAL. Use User.roleMapping.create() instead.
            "prototype$__create__roleMapping": {
              url: urlBase + "/users/:id/roleMapping",
              method: "POST",
            },

            // INTERNAL. Use User.roleMapping.destroyAll() instead.
            "prototype$__delete__roleMapping": {
              url: urlBase + "/users/:id/roleMapping",
              method: "DELETE",
            },

            // INTERNAL. Use User.roleMapping.count() instead.
            "prototype$__count__roleMapping": {
              url: urlBase + "/users/:id/roleMapping/count",
              method: "GET",
            },

            // INTERNAL. Use User.event() instead.
            "prototype$__get__event": {
              isArray: true,
              url: urlBase + "/users/:id/event",
              method: "GET",
            },

            // INTERNAL. Use User.event.create() instead.
            "prototype$__create__event": {
              url: urlBase + "/users/:id/event",
              method: "POST",
            },

            // INTERNAL. Use User.event.destroyAll() instead.
            "prototype$__delete__event": {
              url: urlBase + "/users/:id/event",
              method: "DELETE",
            },

            // INTERNAL. Use User.event.count() instead.
            "prototype$__count__event": {
              url: urlBase + "/users/:id/event/count",
              method: "GET",
            },

            // INTERNAL. Use User.business() instead.
            "prototype$__get__business": {
              isArray: true,
              url: urlBase + "/users/:id/business",
              method: "GET",
            },

            // INTERNAL. Use User.business.create() instead.
            "prototype$__create__business": {
              url: urlBase + "/users/:id/business",
              method: "POST",
            },

            // INTERNAL. Use User.business.destroyAll() instead.
            "prototype$__delete__business": {
              url: urlBase + "/users/:id/business",
              method: "DELETE",
            },

            // INTERNAL. Use User.business.count() instead.
            "prototype$__count__business": {
              url: urlBase + "/users/:id/business/count",
              method: "GET",
            },

            // INTERNAL. Use User.news() instead.
            "prototype$__get__news": {
              isArray: true,
              url: urlBase + "/users/:id/news",
              method: "GET",
            },

            // INTERNAL. Use User.news.create() instead.
            "prototype$__create__news": {
              url: urlBase + "/users/:id/news",
              method: "POST",
            },

            // INTERNAL. Use User.news.destroyAll() instead.
            "prototype$__delete__news": {
              url: urlBase + "/users/:id/news",
              method: "DELETE",
            },

            // INTERNAL. Use User.news.count() instead.
            "prototype$__count__news": {
              url: urlBase + "/users/:id/news/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.User#create
             * @methodOf lbServices.User
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/users",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.User#createMany
             * @methodOf lbServices.User
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/users",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.User#upsert
             * @methodOf lbServices.User
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/users",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.User#replaceOrCreate
             * @methodOf lbServices.User
             *
             * @description
             *
             * Replace an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
            "replaceOrCreate": {
              url: urlBase + "/users/replaceOrCreate",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.User#upsertWithWhere
             * @methodOf lbServices.User
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` â€“ `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
            "upsertWithWhere": {
              url: urlBase + "/users/upsertWithWhere",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.User#exists
             * @methodOf lbServices.User
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` â€“ `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/users/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.User#findById
             * @methodOf lbServices.User
             *
             * @description
             *
             * Find a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - Model id
             *
             *  - `filter` â€“ `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/users/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.User#replaceById
             * @methodOf lbServices.User
             *
             * @description
             *
             * Replace attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - Model id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
            "replaceById": {
              url: urlBase + "/users/:id/replace",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.User#find
             * @methodOf lbServices.User
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` â€“ `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/users",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.User#findOne
             * @methodOf lbServices.User
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` â€“ `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/users/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.User#updateAll
             * @methodOf lbServices.User
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` â€“ `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
            "updateAll": {
              url: urlBase + "/users/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.User#deleteById
             * @methodOf lbServices.User
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/users/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.User#count
             * @methodOf lbServices.User
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` â€“ `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` â€“ `{number=}` -
             */
            "count": {
              url: urlBase + "/users/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.User#prototype$updateAttributes
             * @methodOf lbServices.User
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - User id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/users/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.User#createChangeStream
             * @methodOf lbServices.User
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` â€“ `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` â€“ `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/users/change-stream",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.User#login
             * @methodOf lbServices.User
             *
             * @description
             *
             * Login a user with username/email and password.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `include` â€“ `{string=}` - Related objects to include in the response. See the description of return value for more details.
             *   Default value: `user`.
             *
             *  - `rememberMe` - `boolean` - Whether the authentication credentials
             *     should be remembered in localStorage across app/browser restarts.
             *     Default: `true`.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The response body contains properties of the AccessToken created on login.
             * Depending on the value of `include` parameter, the body may contain additional properties:
             *   - `user` - `U+007BUserU+007D` - Data of the currently logged in user. (`include=user`)
             *
             */
            "login": {
              params: {
                include: 'user',
              },
              interceptor: {
                response: function(response) {
                  var accessToken = response.data;
                  LoopBackAuth.setUser(
                    accessToken.id, accessToken.userId, accessToken.user);
                  LoopBackAuth.rememberMe =
                    response.config.params.rememberMe !== false;
                  LoopBackAuth.save();
                  return response.resource;
                },
              },
              url: urlBase + "/users/login",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.User#logout
             * @methodOf lbServices.User
             *
             * @description
             *
             * Logout a user with access token.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `access_token` â€“ `{string}` - Do not supply this argument, it is automatically extracted from request headers.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
            "logout": {
              interceptor: {
                response: function(response) {
                  LoopBackAuth.clearUser();
                  LoopBackAuth.clearStorage();
                  return response.resource;
                },
                responseError: function(responseError) {
                  LoopBackAuth.clearUser();
                  LoopBackAuth.clearStorage();
                  return responseError.resource;
                },
              },
              url: urlBase + "/users/logout",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.User#confirm
             * @methodOf lbServices.User
             *
             * @description
             *
             * Confirm a user registration with email verification token.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `uid` â€“ `{string}` -
             *
             *  - `token` â€“ `{string}` -
             *
             *  - `redirect` â€“ `{string=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
            "confirm": {
              url: urlBase + "/users/confirm",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.User#resetPassword
             * @methodOf lbServices.User
             *
             * @description
             *
             * Reset password for a user with email.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
            "resetPassword": {
              url: urlBase + "/users/reset",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.User#singUp
             * @methodOf lbServices.User
             *
             * @description
             *
             * user sing up
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `credentials` â€“ `{object}` -
             *
             *  - `res` â€“ `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
            "singUp": {
              url: urlBase + "/users/singUp",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.User#login
             * @methodOf lbServices.User
             *
             * @description
             *
             * Custom Login a user with userId/email and password.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `include` â€“ `{string=}` - Related objects to include in the response. See the description of return value for more details.
             *   Default value: `user`.
             *
             *  - `rememberMe` - `boolean` - Whether the authentication credentials
             *     should be remembered in localStorage across app/browser restarts.
             *     Default: `true`.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The response body contains properties of the {{AccessToken}} created on login.
             * Depending on the value of `include` parameter, the body may contain additional properties:
             *   - `user` - `U+007BUserU+007D` - Data of the currently logged in user. {{(`include=user`)}}
             *
             */
            "login": {
              params: {
                include: 'user',
              },
              interceptor: {
                response: function(response) {
                  var accessToken = response.data;
                  LoopBackAuth.setUser(
                    accessToken.id, accessToken.userId, accessToken.user);
                  LoopBackAuth.rememberMe =
                    response.config.params.rememberMe !== false;
                  LoopBackAuth.save();
                  return response.resource;
                },
              },
              url: urlBase + "/users/login",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.User#roles
             * @methodOf lbServices.User
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{string}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `roles` â€“ `{Object=}` -
             */
            "roles": {
              url: urlBase + "/users/:id/roles",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.User#roleNames
             * @methodOf lbServices.User
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{string}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `roles` â€“ `{Object=}` -
             */
            "roleNames": {
              url: urlBase + "/users/:id/roleNames",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.User#email
             * @methodOf lbServices.User
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `type` â€“ `{string}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `res` â€“ `{Object=}` -
             */
            "email": {
              url: urlBase + "/users/email/:email/:type",
              method: "GET",
            },

            // INTERNAL. Use Event.user() instead.
            "::get::Event::user": {
              url: urlBase + "/events/:id/user",
              method: "GET",
            },

            // INTERNAL. Use Business.user() instead.
            "::get::Business::user": {
              url: urlBase + "/businesses/:id/user",
              method: "GET",
            },

            // INTERNAL. Use News.user() instead.
            "::get::News::user": {
              url: urlBase + "/news/:id/user",
              method: "GET",
            },

            // INTERNAL. Use Group.user() instead.
            "::get::Group::user": {
              url: urlBase + "/groups/:id/user",
              method: "GET",
            },

            // INTERNAL. Use GroupMapping.user() instead.
            "::get::GroupMapping::user": {
              url: urlBase + "/groupMappings/:id/user",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.User#getCurrent
             * @methodOf lbServices.User
             *
             * @description
             *
             * Get data of the currently logged user. Fail with HTTP result 401
             * when there is no user logged in.
             *
             * @param {function(Object,Object)=} successCb
             *    Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *    `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             */
            'getCurrent': {
              url: urlBase + "/users" + '/:id',
              method: 'GET',
              params: {
                id: function() {
                  var id = LoopBackAuth.currentUserId;
                  if (id == null) id = '__anonymous__';
                  return id;
                },
              },
              interceptor: {
                response: function(response) {
                  LoopBackAuth.currentUserData = response.data;
                  return response.resource;
                },
                responseError: function(responseError) {
                  LoopBackAuth.clearUser();
                  LoopBackAuth.clearStorage();
                  return $q.reject(responseError);
                },
              },
              __isGetCurrentUser__: true,
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.User#patchOrCreate
             * @methodOf lbServices.User
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
        R["patchOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.User#updateOrCreate
             * @methodOf lbServices.User
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.User#patchOrCreateWithWhere
             * @methodOf lbServices.User
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` â€“ `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
        R["patchOrCreateWithWhere"] = R["upsertWithWhere"];

            /**
             * @ngdoc method
             * @name lbServices.User#update
             * @methodOf lbServices.User
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` â€“ `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.User#destroyById
             * @methodOf lbServices.User
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.User#removeById
             * @methodOf lbServices.User
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.User#patchAttributes
             * @methodOf lbServices.User
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - User id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
        R["patchAttributes"] = R["prototype$updateAttributes"];

        /**
         * @ngdoc method
         * @name lbServices.User#getCachedCurrent
         * @methodOf lbServices.User
         *
         * @description
         *
         * Get data of the currently logged user that was returned by the last
         * call to {@link lbServices.User#login} or
         * {@link lbServices.User#getCurrent}. Return null when there
         * is no user logged in or the data of the current user were not fetched
         * yet.
         *
         * @returns {Object} A User instance.
         */
        R.getCachedCurrent = function() {
          var data = LoopBackAuth.currentUserData;
          return data ? new R(data) : null;
        };

        /**
         * @ngdoc method
         * @name lbServices.User#isAuthenticated
         * @methodOf lbServices.User
         *
         * @returns {boolean} True if the current user is authenticated (logged in).
         */
        R.isAuthenticated = function() {
          return this.getCurrentId() != null;
        };

        /**
         * @ngdoc method
         * @name lbServices.User#getCurrentId
         * @methodOf lbServices.User
         *
         * @returns {Object} Id of the currently logged-in user or null.
         */
        R.getCurrentId = function() {
          return LoopBackAuth.currentUserId;
        };

        /**
        * @ngdoc property
        * @name lbServices.User#modelName
        * @propertyOf lbServices.User
        * @description
        * The name of the model represented by this $resource,
        * i.e. `User`.
        */
        R.modelName = "User";

    /**
     * @ngdoc object
     * @name lbServices.User.roleMapping
     * @header lbServices.User.roleMapping
     * @object
     * @description
     *
     * The object `User.roleMapping` groups methods
     * manipulating `RoleMapping` instances related to `User`.
     *
     * Call {@link lbServices.User#roleMapping User.roleMapping()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.User#roleMapping
             * @methodOf lbServices.User
             *
             * @description
             *
             * Queries roleMapping of user.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - User id
             *
             *  - `filter` â€“ `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `RoleMapping` object.)
             * </em>
             */
        R.roleMapping = function() {
          var TargetResource = $injector.get("RoleMapping");
          var action = TargetResource["::get::User::roleMapping"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.User.roleMapping#count
             * @methodOf lbServices.User.roleMapping
             *
             * @description
             *
             * Counts roleMapping of user.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - User id
             *
             *  - `where` â€“ `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` â€“ `{number=}` -
             */
        R.roleMapping.count = function() {
          var TargetResource = $injector.get("RoleMapping");
          var action = TargetResource["::count::User::roleMapping"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.User.roleMapping#create
             * @methodOf lbServices.User.roleMapping
             *
             * @description
             *
             * Creates a new instance in roleMapping of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - User id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `RoleMapping` object.)
             * </em>
             */
        R.roleMapping.create = function() {
          var TargetResource = $injector.get("RoleMapping");
          var action = TargetResource["::create::User::roleMapping"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.User.roleMapping#createMany
             * @methodOf lbServices.User.roleMapping
             *
             * @description
             *
             * Creates a new instance in roleMapping of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - User id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `RoleMapping` object.)
             * </em>
             */
        R.roleMapping.createMany = function() {
          var TargetResource = $injector.get("RoleMapping");
          var action = TargetResource["::createMany::User::roleMapping"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.User.roleMapping#destroyAll
             * @methodOf lbServices.User.roleMapping
             *
             * @description
             *
             * Deletes all roleMapping of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - User id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.roleMapping.destroyAll = function() {
          var TargetResource = $injector.get("RoleMapping");
          var action = TargetResource["::delete::User::roleMapping"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.User.roleMapping#destroyById
             * @methodOf lbServices.User.roleMapping
             *
             * @description
             *
             * Delete a related item by id for roleMapping.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - User id
             *
             *  - `fk` â€“ `{*}` - Foreign key for roleMapping
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.roleMapping.destroyById = function() {
          var TargetResource = $injector.get("RoleMapping");
          var action = TargetResource["::destroyById::User::roleMapping"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.User.roleMapping#findById
             * @methodOf lbServices.User.roleMapping
             *
             * @description
             *
             * Find a related item by id for roleMapping.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - User id
             *
             *  - `fk` â€“ `{*}` - Foreign key for roleMapping
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `RoleMapping` object.)
             * </em>
             */
        R.roleMapping.findById = function() {
          var TargetResource = $injector.get("RoleMapping");
          var action = TargetResource["::findById::User::roleMapping"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.User.roleMapping#updateById
             * @methodOf lbServices.User.roleMapping
             *
             * @description
             *
             * Update a related item by id for roleMapping.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - User id
             *
             *  - `fk` â€“ `{*}` - Foreign key for roleMapping
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `RoleMapping` object.)
             * </em>
             */
        R.roleMapping.updateById = function() {
          var TargetResource = $injector.get("RoleMapping");
          var action = TargetResource["::updateById::User::roleMapping"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.User.event
     * @header lbServices.User.event
     * @object
     * @description
     *
     * The object `User.event` groups methods
     * manipulating `Event` instances related to `User`.
     *
     * Call {@link lbServices.User#event User.event()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.User#event
             * @methodOf lbServices.User
             *
             * @description
             *
             * Queries event of user.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - User id
             *
             *  - `filter` â€“ `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Event` object.)
             * </em>
             */
        R.event = function() {
          var TargetResource = $injector.get("Event");
          var action = TargetResource["::get::User::event"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.User.event#count
             * @methodOf lbServices.User.event
             *
             * @description
             *
             * Counts event of user.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - User id
             *
             *  - `where` â€“ `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` â€“ `{number=}` -
             */
        R.event.count = function() {
          var TargetResource = $injector.get("Event");
          var action = TargetResource["::count::User::event"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.User.event#create
             * @methodOf lbServices.User.event
             *
             * @description
             *
             * Creates a new instance in event of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - User id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Event` object.)
             * </em>
             */
        R.event.create = function() {
          var TargetResource = $injector.get("Event");
          var action = TargetResource["::create::User::event"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.User.event#createMany
             * @methodOf lbServices.User.event
             *
             * @description
             *
             * Creates a new instance in event of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - User id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Event` object.)
             * </em>
             */
        R.event.createMany = function() {
          var TargetResource = $injector.get("Event");
          var action = TargetResource["::createMany::User::event"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.User.event#destroyAll
             * @methodOf lbServices.User.event
             *
             * @description
             *
             * Deletes all event of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - User id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.event.destroyAll = function() {
          var TargetResource = $injector.get("Event");
          var action = TargetResource["::delete::User::event"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.User.event#destroyById
             * @methodOf lbServices.User.event
             *
             * @description
             *
             * Delete a related item by id for event.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - User id
             *
             *  - `fk` â€“ `{*}` - Foreign key for event
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.event.destroyById = function() {
          var TargetResource = $injector.get("Event");
          var action = TargetResource["::destroyById::User::event"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.User.event#findById
             * @methodOf lbServices.User.event
             *
             * @description
             *
             * Find a related item by id for event.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - User id
             *
             *  - `fk` â€“ `{*}` - Foreign key for event
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Event` object.)
             * </em>
             */
        R.event.findById = function() {
          var TargetResource = $injector.get("Event");
          var action = TargetResource["::findById::User::event"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.User.event#updateById
             * @methodOf lbServices.User.event
             *
             * @description
             *
             * Update a related item by id for event.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - User id
             *
             *  - `fk` â€“ `{*}` - Foreign key for event
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Event` object.)
             * </em>
             */
        R.event.updateById = function() {
          var TargetResource = $injector.get("Event");
          var action = TargetResource["::updateById::User::event"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.User.business
     * @header lbServices.User.business
     * @object
     * @description
     *
     * The object `User.business` groups methods
     * manipulating `Business` instances related to `User`.
     *
     * Call {@link lbServices.User#business User.business()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.User#business
             * @methodOf lbServices.User
             *
             * @description
             *
             * Queries business of user.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - User id
             *
             *  - `filter` â€“ `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Business` object.)
             * </em>
             */
        R.business = function() {
          var TargetResource = $injector.get("Business");
          var action = TargetResource["::get::User::business"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.User.business#count
             * @methodOf lbServices.User.business
             *
             * @description
             *
             * Counts business of user.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - User id
             *
             *  - `where` â€“ `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` â€“ `{number=}` -
             */
        R.business.count = function() {
          var TargetResource = $injector.get("Business");
          var action = TargetResource["::count::User::business"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.User.business#create
             * @methodOf lbServices.User.business
             *
             * @description
             *
             * Creates a new instance in business of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - User id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Business` object.)
             * </em>
             */
        R.business.create = function() {
          var TargetResource = $injector.get("Business");
          var action = TargetResource["::create::User::business"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.User.business#createMany
             * @methodOf lbServices.User.business
             *
             * @description
             *
             * Creates a new instance in business of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - User id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Business` object.)
             * </em>
             */
        R.business.createMany = function() {
          var TargetResource = $injector.get("Business");
          var action = TargetResource["::createMany::User::business"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.User.business#destroyAll
             * @methodOf lbServices.User.business
             *
             * @description
             *
             * Deletes all business of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - User id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.business.destroyAll = function() {
          var TargetResource = $injector.get("Business");
          var action = TargetResource["::delete::User::business"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.User.business#destroyById
             * @methodOf lbServices.User.business
             *
             * @description
             *
             * Delete a related item by id for business.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - User id
             *
             *  - `fk` â€“ `{*}` - Foreign key for business
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.business.destroyById = function() {
          var TargetResource = $injector.get("Business");
          var action = TargetResource["::destroyById::User::business"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.User.business#findById
             * @methodOf lbServices.User.business
             *
             * @description
             *
             * Find a related item by id for business.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - User id
             *
             *  - `fk` â€“ `{*}` - Foreign key for business
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Business` object.)
             * </em>
             */
        R.business.findById = function() {
          var TargetResource = $injector.get("Business");
          var action = TargetResource["::findById::User::business"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.User.business#updateById
             * @methodOf lbServices.User.business
             *
             * @description
             *
             * Update a related item by id for business.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - User id
             *
             *  - `fk` â€“ `{*}` - Foreign key for business
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Business` object.)
             * </em>
             */
        R.business.updateById = function() {
          var TargetResource = $injector.get("Business");
          var action = TargetResource["::updateById::User::business"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.User.news
     * @header lbServices.User.news
     * @object
     * @description
     *
     * The object `User.news` groups methods
     * manipulating `News` instances related to `User`.
     *
     * Call {@link lbServices.User#news User.news()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.User#news
             * @methodOf lbServices.User
             *
             * @description
             *
             * Queries news of user.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - User id
             *
             *  - `filter` â€“ `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `News` object.)
             * </em>
             */
        R.news = function() {
          var TargetResource = $injector.get("News");
          var action = TargetResource["::get::User::news"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.User.news#count
             * @methodOf lbServices.User.news
             *
             * @description
             *
             * Counts news of user.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - User id
             *
             *  - `where` â€“ `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` â€“ `{number=}` -
             */
        R.news.count = function() {
          var TargetResource = $injector.get("News");
          var action = TargetResource["::count::User::news"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.User.news#create
             * @methodOf lbServices.User.news
             *
             * @description
             *
             * Creates a new instance in news of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - User id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `News` object.)
             * </em>
             */
        R.news.create = function() {
          var TargetResource = $injector.get("News");
          var action = TargetResource["::create::User::news"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.User.news#createMany
             * @methodOf lbServices.User.news
             *
             * @description
             *
             * Creates a new instance in news of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - User id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `News` object.)
             * </em>
             */
        R.news.createMany = function() {
          var TargetResource = $injector.get("News");
          var action = TargetResource["::createMany::User::news"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.User.news#destroyAll
             * @methodOf lbServices.User.news
             *
             * @description
             *
             * Deletes all news of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - User id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.news.destroyAll = function() {
          var TargetResource = $injector.get("News");
          var action = TargetResource["::delete::User::news"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.User.news#destroyById
             * @methodOf lbServices.User.news
             *
             * @description
             *
             * Delete a related item by id for news.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - User id
             *
             *  - `fk` â€“ `{*}` - Foreign key for news
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.news.destroyById = function() {
          var TargetResource = $injector.get("News");
          var action = TargetResource["::destroyById::User::news"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.User.news#findById
             * @methodOf lbServices.User.news
             *
             * @description
             *
             * Find a related item by id for news.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - User id
             *
             *  - `fk` â€“ `{*}` - Foreign key for news
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `News` object.)
             * </em>
             */
        R.news.findById = function() {
          var TargetResource = $injector.get("News");
          var action = TargetResource["::findById::User::news"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.User.news#updateById
             * @methodOf lbServices.User.news
             *
             * @description
             *
             * Update a related item by id for news.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - User id
             *
             *  - `fk` â€“ `{*}` - Foreign key for news
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `News` object.)
             * </em>
             */
        R.news.updateById = function() {
          var TargetResource = $injector.get("News");
          var action = TargetResource["::updateById::User::news"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.User.group
     * @header lbServices.User.group
     * @object
     * @description
     *
     * The object `User.group` groups methods
     * manipulating `Group` instances related to `User`.
     *
     * Call {@link lbServices.User#group User.group()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.User#group
             * @methodOf lbServices.User
             *
             * @description
             *
             * Fetches hasOne relation group.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - User id
             *
             *  - `refresh` â€“ `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Group` object.)
             * </em>
             */
        R.group = function() {
          var TargetResource = $injector.get("Group");
          var action = TargetResource["::get::User::group"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.User.group#create
             * @methodOf lbServices.User.group
             *
             * @description
             *
             * Creates a new instance in group of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - User id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Group` object.)
             * </em>
             */
        R.group.create = function() {
          var TargetResource = $injector.get("Group");
          var action = TargetResource["::create::User::group"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.User.group#createMany
             * @methodOf lbServices.User.group
             *
             * @description
             *
             * Creates a new instance in group of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - User id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Group` object.)
             * </em>
             */
        R.group.createMany = function() {
          var TargetResource = $injector.get("Group");
          var action = TargetResource["::createMany::User::group"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.User.group#destroy
             * @methodOf lbServices.User.group
             *
             * @description
             *
             * Deletes group of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - User id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.group.destroy = function() {
          var TargetResource = $injector.get("Group");
          var action = TargetResource["::destroy::User::group"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.User.group#update
             * @methodOf lbServices.User.group
             *
             * @description
             *
             * Update group of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - User id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Group` object.)
             * </em>
             */
        R.group.update = function() {
          var TargetResource = $injector.get("Group");
          var action = TargetResource["::update::User::group"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.User.groupMapping
     * @header lbServices.User.groupMapping
     * @object
     * @description
     *
     * The object `User.groupMapping` groups methods
     * manipulating `GroupMapping` instances related to `User`.
     *
     * Call {@link lbServices.User#groupMapping User.groupMapping()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.User#groupMapping
             * @methodOf lbServices.User
             *
             * @description
             *
             * Fetches hasOne relation groupMapping.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - User id
             *
             *  - `refresh` â€“ `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `GroupMapping` object.)
             * </em>
             */
        R.groupMapping = function() {
          var TargetResource = $injector.get("GroupMapping");
          var action = TargetResource["::get::User::groupMapping"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.User.groupMapping#create
             * @methodOf lbServices.User.groupMapping
             *
             * @description
             *
             * Creates a new instance in groupMapping of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - User id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `GroupMapping` object.)
             * </em>
             */
        R.groupMapping.create = function() {
          var TargetResource = $injector.get("GroupMapping");
          var action = TargetResource["::create::User::groupMapping"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.User.groupMapping#createMany
             * @methodOf lbServices.User.groupMapping
             *
             * @description
             *
             * Creates a new instance in groupMapping of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - User id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `GroupMapping` object.)
             * </em>
             */
        R.groupMapping.createMany = function() {
          var TargetResource = $injector.get("GroupMapping");
          var action = TargetResource["::createMany::User::groupMapping"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.User.groupMapping#destroy
             * @methodOf lbServices.User.groupMapping
             *
             * @description
             *
             * Deletes groupMapping of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - User id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.groupMapping.destroy = function() {
          var TargetResource = $injector.get("GroupMapping");
          var action = TargetResource["::destroy::User::groupMapping"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.User.groupMapping#update
             * @methodOf lbServices.User.groupMapping
             *
             * @description
             *
             * Update groupMapping of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - User id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `GroupMapping` object.)
             * </em>
             */
        R.groupMapping.update = function() {
          var TargetResource = $injector.get("GroupMapping");
          var action = TargetResource["::update::User::groupMapping"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.Event
 * @header lbServices.Event
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `Event` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "Event",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector', '$q',
      function(LoopBackResource, LoopBackAuth, $injector, $q) {
        var R = LoopBackResource(
        urlBase + "/events/:id",
          { 'id': '@id' },
          {

            // INTERNAL. Use Event.user() instead.
            "prototype$__get__user": {
              url: urlBase + "/events/:id/user",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Event#create
             * @methodOf lbServices.Event
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Event` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/events",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Event#createMany
             * @methodOf lbServices.Event
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Event` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/events",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Event#upsert
             * @methodOf lbServices.Event
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Event` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/events",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.Event#replaceOrCreate
             * @methodOf lbServices.Event
             *
             * @description
             *
             * Replace an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Event` object.)
             * </em>
             */
            "replaceOrCreate": {
              url: urlBase + "/events/replaceOrCreate",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Event#upsertWithWhere
             * @methodOf lbServices.Event
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` â€“ `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Event` object.)
             * </em>
             */
            "upsertWithWhere": {
              url: urlBase + "/events/upsertWithWhere",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Event#exists
             * @methodOf lbServices.Event
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` â€“ `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/events/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Event#findById
             * @methodOf lbServices.Event
             *
             * @description
             *
             * Find a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - Model id
             *
             *  - `filter` â€“ `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Event` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/events/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Event#replaceById
             * @methodOf lbServices.Event
             *
             * @description
             *
             * Replace attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - Model id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Event` object.)
             * </em>
             */
            "replaceById": {
              url: urlBase + "/events/:id/replace",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Event#find
             * @methodOf lbServices.Event
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` â€“ `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Event` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/events",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Event#findOne
             * @methodOf lbServices.Event
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` â€“ `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Event` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/events/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Event#updateAll
             * @methodOf lbServices.Event
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` â€“ `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
            "updateAll": {
              url: urlBase + "/events/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Event#deleteById
             * @methodOf lbServices.Event
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Event` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/events/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.Event#count
             * @methodOf lbServices.Event
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` â€“ `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` â€“ `{number=}` -
             */
            "count": {
              url: urlBase + "/events/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Event#prototype$updateAttributes
             * @methodOf lbServices.Event
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Event` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/events/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.Event#createChangeStream
             * @methodOf lbServices.Event
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` â€“ `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` â€“ `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/events/change-stream",
              method: "POST",
            },

            // INTERNAL. Use User.event.findById() instead.
            "::findById::User::event": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/users/:id/event/:fk",
              method: "GET",
            },

            // INTERNAL. Use User.event.destroyById() instead.
            "::destroyById::User::event": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/users/:id/event/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use User.event.updateById() instead.
            "::updateById::User::event": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/users/:id/event/:fk",
              method: "PUT",
            },

            // INTERNAL. Use User.event() instead.
            "::get::User::event": {
              isArray: true,
              url: urlBase + "/users/:id/event",
              method: "GET",
            },

            // INTERNAL. Use User.event.create() instead.
            "::create::User::event": {
              url: urlBase + "/users/:id/event",
              method: "POST",
            },

            // INTERNAL. Use User.event.createMany() instead.
            "::createMany::User::event": {
              isArray: true,
              url: urlBase + "/users/:id/event",
              method: "POST",
            },

            // INTERNAL. Use User.event.destroyAll() instead.
            "::delete::User::event": {
              url: urlBase + "/users/:id/event",
              method: "DELETE",
            },

            // INTERNAL. Use User.event.count() instead.
            "::count::User::event": {
              url: urlBase + "/users/:id/event/count",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.Event#patchOrCreate
             * @methodOf lbServices.Event
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Event` object.)
             * </em>
             */
        R["patchOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.Event#updateOrCreate
             * @methodOf lbServices.Event
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Event` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.Event#patchOrCreateWithWhere
             * @methodOf lbServices.Event
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` â€“ `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Event` object.)
             * </em>
             */
        R["patchOrCreateWithWhere"] = R["upsertWithWhere"];

            /**
             * @ngdoc method
             * @name lbServices.Event#update
             * @methodOf lbServices.Event
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` â€“ `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.Event#destroyById
             * @methodOf lbServices.Event
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Event` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.Event#removeById
             * @methodOf lbServices.Event
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Event` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.Event#patchAttributes
             * @methodOf lbServices.Event
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Event` object.)
             * </em>
             */
        R["patchAttributes"] = R["prototype$updateAttributes"];


        /**
        * @ngdoc property
        * @name lbServices.Event#modelName
        * @propertyOf lbServices.Event
        * @description
        * The name of the model represented by this $resource,
        * i.e. `Event`.
        */
        R.modelName = "Event";


            /**
             * @ngdoc method
             * @name lbServices.Event#user
             * @methodOf lbServices.Event
             *
             * @description
             *
             * Fetches belongsTo relation user.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - PersistedModel id
             *
             *  - `refresh` â€“ `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
        R.user = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::get::Event::user"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.Business
 * @header lbServices.Business
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `Business` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "Business",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector', '$q',
      function(LoopBackResource, LoopBackAuth, $injector, $q) {
        var R = LoopBackResource(
        urlBase + "/businesses/:id",
          { 'id': '@id' },
          {

            // INTERNAL. Use Business.user() instead.
            "prototype$__get__user": {
              url: urlBase + "/businesses/:id/user",
              method: "GET",
            },

            // INTERNAL. Use Business.organizations.findById() instead.
            "prototype$__findById__organizations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/businesses/:id/organizations/:fk",
              method: "GET",
            },

            // INTERNAL. Use Business.organizations.destroyById() instead.
            "prototype$__destroyById__organizations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/businesses/:id/organizations/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Business.organizations.updateById() instead.
            "prototype$__updateById__organizations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/businesses/:id/organizations/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Business.organizations.link() instead.
            "prototype$__link__organizations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/businesses/:id/organizations/rel/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Business.organizations.unlink() instead.
            "prototype$__unlink__organizations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/businesses/:id/organizations/rel/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Business.organizations.exists() instead.
            "prototype$__exists__organizations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/businesses/:id/organizations/rel/:fk",
              method: "HEAD",
            },

            // INTERNAL. Use Business.organizations() instead.
            "prototype$__get__organizations": {
              isArray: true,
              url: urlBase + "/businesses/:id/organizations",
              method: "GET",
            },

            // INTERNAL. Use Business.organizations.create() instead.
            "prototype$__create__organizations": {
              url: urlBase + "/businesses/:id/organizations",
              method: "POST",
            },

            // INTERNAL. Use Business.organizations.destroyAll() instead.
            "prototype$__delete__organizations": {
              url: urlBase + "/businesses/:id/organizations",
              method: "DELETE",
            },

            // INTERNAL. Use Business.organizations.count() instead.
            "prototype$__count__organizations": {
              url: urlBase + "/businesses/:id/organizations/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Business#create
             * @methodOf lbServices.Business
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Business` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/businesses",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Business#createMany
             * @methodOf lbServices.Business
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Business` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/businesses",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Business#upsert
             * @methodOf lbServices.Business
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Business` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/businesses",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.Business#replaceOrCreate
             * @methodOf lbServices.Business
             *
             * @description
             *
             * Replace an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Business` object.)
             * </em>
             */
            "replaceOrCreate": {
              url: urlBase + "/businesses/replaceOrCreate",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Business#upsertWithWhere
             * @methodOf lbServices.Business
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` â€“ `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Business` object.)
             * </em>
             */
            "upsertWithWhere": {
              url: urlBase + "/businesses/upsertWithWhere",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Business#exists
             * @methodOf lbServices.Business
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` â€“ `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/businesses/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Business#findById
             * @methodOf lbServices.Business
             *
             * @description
             *
             * Find a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - Model id
             *
             *  - `filter` â€“ `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Business` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/businesses/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Business#replaceById
             * @methodOf lbServices.Business
             *
             * @description
             *
             * Replace attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - Model id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Business` object.)
             * </em>
             */
            "replaceById": {
              url: urlBase + "/businesses/:id/replace",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Business#find
             * @methodOf lbServices.Business
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` â€“ `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Business` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/businesses",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Business#findOne
             * @methodOf lbServices.Business
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` â€“ `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Business` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/businesses/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Business#updateAll
             * @methodOf lbServices.Business
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` â€“ `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
            "updateAll": {
              url: urlBase + "/businesses/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Business#deleteById
             * @methodOf lbServices.Business
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Business` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/businesses/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.Business#count
             * @methodOf lbServices.Business
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` â€“ `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` â€“ `{number=}` -
             */
            "count": {
              url: urlBase + "/businesses/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Business#prototype$updateAttributes
             * @methodOf lbServices.Business
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Business` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/businesses/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.Business#createChangeStream
             * @methodOf lbServices.Business
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` â€“ `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` â€“ `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/businesses/change-stream",
              method: "POST",
            },

            // INTERNAL. Use User.business.findById() instead.
            "::findById::User::business": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/users/:id/business/:fk",
              method: "GET",
            },

            // INTERNAL. Use User.business.destroyById() instead.
            "::destroyById::User::business": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/users/:id/business/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use User.business.updateById() instead.
            "::updateById::User::business": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/users/:id/business/:fk",
              method: "PUT",
            },

            // INTERNAL. Use User.business() instead.
            "::get::User::business": {
              isArray: true,
              url: urlBase + "/users/:id/business",
              method: "GET",
            },

            // INTERNAL. Use User.business.create() instead.
            "::create::User::business": {
              url: urlBase + "/users/:id/business",
              method: "POST",
            },

            // INTERNAL. Use User.business.createMany() instead.
            "::createMany::User::business": {
              isArray: true,
              url: urlBase + "/users/:id/business",
              method: "POST",
            },

            // INTERNAL. Use User.business.destroyAll() instead.
            "::delete::User::business": {
              url: urlBase + "/users/:id/business",
              method: "DELETE",
            },

            // INTERNAL. Use User.business.count() instead.
            "::count::User::business": {
              url: urlBase + "/users/:id/business/count",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.Business#patchOrCreate
             * @methodOf lbServices.Business
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Business` object.)
             * </em>
             */
        R["patchOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.Business#updateOrCreate
             * @methodOf lbServices.Business
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Business` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.Business#patchOrCreateWithWhere
             * @methodOf lbServices.Business
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` â€“ `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Business` object.)
             * </em>
             */
        R["patchOrCreateWithWhere"] = R["upsertWithWhere"];

            /**
             * @ngdoc method
             * @name lbServices.Business#update
             * @methodOf lbServices.Business
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` â€“ `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.Business#destroyById
             * @methodOf lbServices.Business
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Business` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.Business#removeById
             * @methodOf lbServices.Business
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Business` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.Business#patchAttributes
             * @methodOf lbServices.Business
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Business` object.)
             * </em>
             */
        R["patchAttributes"] = R["prototype$updateAttributes"];


        /**
        * @ngdoc property
        * @name lbServices.Business#modelName
        * @propertyOf lbServices.Business
        * @description
        * The name of the model represented by this $resource,
        * i.e. `Business`.
        */
        R.modelName = "Business";


            /**
             * @ngdoc method
             * @name lbServices.Business#user
             * @methodOf lbServices.Business
             *
             * @description
             *
             * Fetches belongsTo relation user.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - PersistedModel id
             *
             *  - `refresh` â€“ `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
        R.user = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::get::Business::user"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.Business.organizations
     * @header lbServices.Business.organizations
     * @object
     * @description
     *
     * The object `Business.organizations` groups methods
     * manipulating `Company` instances related to `Business`.
     *
     * Call {@link lbServices.Business#organizations Business.organizations()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.Business#organizations
             * @methodOf lbServices.Business
             *
             * @description
             *
             * Queries organizations of business.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - PersistedModel id
             *
             *  - `filter` â€“ `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Company` object.)
             * </em>
             */
        R.organizations = function() {
          var TargetResource = $injector.get("Company");
          var action = TargetResource["::get::Business::organizations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Business.organizations#count
             * @methodOf lbServices.Business.organizations
             *
             * @description
             *
             * Counts organizations of business.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - PersistedModel id
             *
             *  - `where` â€“ `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` â€“ `{number=}` -
             */
        R.organizations.count = function() {
          var TargetResource = $injector.get("Company");
          var action = TargetResource["::count::Business::organizations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Business.organizations#create
             * @methodOf lbServices.Business.organizations
             *
             * @description
             *
             * Creates a new instance in organizations of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Company` object.)
             * </em>
             */
        R.organizations.create = function() {
          var TargetResource = $injector.get("Company");
          var action = TargetResource["::create::Business::organizations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Business.organizations#createMany
             * @methodOf lbServices.Business.organizations
             *
             * @description
             *
             * Creates a new instance in organizations of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Company` object.)
             * </em>
             */
        R.organizations.createMany = function() {
          var TargetResource = $injector.get("Company");
          var action = TargetResource["::createMany::Business::organizations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Business.organizations#destroyAll
             * @methodOf lbServices.Business.organizations
             *
             * @description
             *
             * Deletes all organizations of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - PersistedModel id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.organizations.destroyAll = function() {
          var TargetResource = $injector.get("Company");
          var action = TargetResource["::delete::Business::organizations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Business.organizations#destroyById
             * @methodOf lbServices.Business.organizations
             *
             * @description
             *
             * Delete a related item by id for organizations.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - PersistedModel id
             *
             *  - `fk` â€“ `{*}` - Foreign key for organizations
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.organizations.destroyById = function() {
          var TargetResource = $injector.get("Company");
          var action = TargetResource["::destroyById::Business::organizations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Business.organizations#exists
             * @methodOf lbServices.Business.organizations
             *
             * @description
             *
             * Check the existence of organizations relation to an item by id.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - PersistedModel id
             *
             *  - `fk` â€“ `{*}` - Foreign key for organizations
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Company` object.)
             * </em>
             */
        R.organizations.exists = function() {
          var TargetResource = $injector.get("Company");
          var action = TargetResource["::exists::Business::organizations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Business.organizations#findById
             * @methodOf lbServices.Business.organizations
             *
             * @description
             *
             * Find a related item by id for organizations.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - PersistedModel id
             *
             *  - `fk` â€“ `{*}` - Foreign key for organizations
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Company` object.)
             * </em>
             */
        R.organizations.findById = function() {
          var TargetResource = $injector.get("Company");
          var action = TargetResource["::findById::Business::organizations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Business.organizations#link
             * @methodOf lbServices.Business.organizations
             *
             * @description
             *
             * Add a related item by id for organizations.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - PersistedModel id
             *
             *  - `fk` â€“ `{*}` - Foreign key for organizations
             *
             * @param {Object} postData Request data.
             *
             * This method does not accept any data. Supply an empty object.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Company` object.)
             * </em>
             */
        R.organizations.link = function() {
          var TargetResource = $injector.get("Company");
          var action = TargetResource["::link::Business::organizations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Business.organizations#unlink
             * @methodOf lbServices.Business.organizations
             *
             * @description
             *
             * Remove the organizations relation to an item by id.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - PersistedModel id
             *
             *  - `fk` â€“ `{*}` - Foreign key for organizations
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.organizations.unlink = function() {
          var TargetResource = $injector.get("Company");
          var action = TargetResource["::unlink::Business::organizations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Business.organizations#updateById
             * @methodOf lbServices.Business.organizations
             *
             * @description
             *
             * Update a related item by id for organizations.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - PersistedModel id
             *
             *  - `fk` â€“ `{*}` - Foreign key for organizations
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Company` object.)
             * </em>
             */
        R.organizations.updateById = function() {
          var TargetResource = $injector.get("Company");
          var action = TargetResource["::updateById::Business::organizations"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.News
 * @header lbServices.News
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `News` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "News",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector', '$q',
      function(LoopBackResource, LoopBackAuth, $injector, $q) {
        var R = LoopBackResource(
        urlBase + "/news/:id",
          { 'id': '@id' },
          {

            // INTERNAL. Use News.user() instead.
            "prototype$__get__user": {
              url: urlBase + "/news/:id/user",
              method: "GET",
            },

            // INTERNAL. Use News.ipo() instead.
            "prototype$__get__ipo": {
              url: urlBase + "/news/:id/ipo",
              method: "GET",
            },

            // INTERNAL. Use News.ipo.create() instead.
            "prototype$__create__ipo": {
              url: urlBase + "/news/:id/ipo",
              method: "POST",
            },

            // INTERNAL. Use News.ipo.update() instead.
            "prototype$__update__ipo": {
              url: urlBase + "/news/:id/ipo",
              method: "PUT",
            },

            // INTERNAL. Use News.ipo.destroy() instead.
            "prototype$__destroy__ipo": {
              url: urlBase + "/news/:id/ipo",
              method: "DELETE",
            },

            // INTERNAL. Use News.mna() instead.
            "prototype$__get__mna": {
              url: urlBase + "/news/:id/mna",
              method: "GET",
            },

            // INTERNAL. Use News.mna.create() instead.
            "prototype$__create__mna": {
              url: urlBase + "/news/:id/mna",
              method: "POST",
            },

            // INTERNAL. Use News.mna.update() instead.
            "prototype$__update__mna": {
              url: urlBase + "/news/:id/mna",
              method: "PUT",
            },

            // INTERNAL. Use News.mna.destroy() instead.
            "prototype$__destroy__mna": {
              url: urlBase + "/news/:id/mna",
              method: "DELETE",
            },

            // INTERNAL. Use News.investment() instead.
            "prototype$__get__investment": {
              url: urlBase + "/news/:id/investment",
              method: "GET",
            },

            // INTERNAL. Use News.investment.create() instead.
            "prototype$__create__investment": {
              url: urlBase + "/news/:id/investment",
              method: "POST",
            },

            // INTERNAL. Use News.investment.update() instead.
            "prototype$__update__investment": {
              url: urlBase + "/news/:id/investment",
              method: "PUT",
            },

            // INTERNAL. Use News.investment.destroy() instead.
            "prototype$__destroy__investment": {
              url: urlBase + "/news/:id/investment",
              method: "DELETE",
            },

            // INTERNAL. Use News.product.findById() instead.
            "prototype$__findById__product": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/news/:id/product/:fk",
              method: "GET",
            },

            // INTERNAL. Use News.product.destroyById() instead.
            "prototype$__destroyById__product": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/news/:id/product/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use News.product.updateById() instead.
            "prototype$__updateById__product": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/news/:id/product/:fk",
              method: "PUT",
            },

            // INTERNAL. Use News.product.link() instead.
            "prototype$__link__product": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/news/:id/product/rel/:fk",
              method: "PUT",
            },

            // INTERNAL. Use News.product.unlink() instead.
            "prototype$__unlink__product": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/news/:id/product/rel/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use News.product.exists() instead.
            "prototype$__exists__product": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/news/:id/product/rel/:fk",
              method: "HEAD",
            },

            // INTERNAL. Use News.person.findById() instead.
            "prototype$__findById__person": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/news/:id/person/:fk",
              method: "GET",
            },

            // INTERNAL. Use News.person.destroyById() instead.
            "prototype$__destroyById__person": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/news/:id/person/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use News.person.updateById() instead.
            "prototype$__updateById__person": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/news/:id/person/:fk",
              method: "PUT",
            },

            // INTERNAL. Use News.person.link() instead.
            "prototype$__link__person": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/news/:id/person/rel/:fk",
              method: "PUT",
            },

            // INTERNAL. Use News.person.unlink() instead.
            "prototype$__unlink__person": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/news/:id/person/rel/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use News.person.exists() instead.
            "prototype$__exists__person": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/news/:id/person/rel/:fk",
              method: "HEAD",
            },

            // INTERNAL. Use News.company.findById() instead.
            "prototype$__findById__company": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/news/:id/company/:fk",
              method: "GET",
            },

            // INTERNAL. Use News.company.destroyById() instead.
            "prototype$__destroyById__company": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/news/:id/company/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use News.company.updateById() instead.
            "prototype$__updateById__company": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/news/:id/company/:fk",
              method: "PUT",
            },

            // INTERNAL. Use News.company.link() instead.
            "prototype$__link__company": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/news/:id/company/rel/:fk",
              method: "PUT",
            },

            // INTERNAL. Use News.company.unlink() instead.
            "prototype$__unlink__company": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/news/:id/company/rel/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use News.company.exists() instead.
            "prototype$__exists__company": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/news/:id/company/rel/:fk",
              method: "HEAD",
            },

            // INTERNAL. Use News.newsCompany.findById() instead.
            "prototype$__findById__newsCompany": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/news/:id/newsCompany/:fk",
              method: "GET",
            },

            // INTERNAL. Use News.newsCompany.destroyById() instead.
            "prototype$__destroyById__newsCompany": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/news/:id/newsCompany/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use News.newsCompany.updateById() instead.
            "prototype$__updateById__newsCompany": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/news/:id/newsCompany/:fk",
              method: "PUT",
            },

            // INTERNAL. Use News.newsPerson.findById() instead.
            "prototype$__findById__newsPerson": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/news/:id/newsPerson/:fk",
              method: "GET",
            },

            // INTERNAL. Use News.newsPerson.destroyById() instead.
            "prototype$__destroyById__newsPerson": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/news/:id/newsPerson/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use News.newsPerson.updateById() instead.
            "prototype$__updateById__newsPerson": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/news/:id/newsPerson/:fk",
              method: "PUT",
            },

            // INTERNAL. Use News.product() instead.
            "prototype$__get__product": {
              isArray: true,
              url: urlBase + "/news/:id/product",
              method: "GET",
            },

            // INTERNAL. Use News.product.create() instead.
            "prototype$__create__product": {
              url: urlBase + "/news/:id/product",
              method: "POST",
            },

            // INTERNAL. Use News.product.destroyAll() instead.
            "prototype$__delete__product": {
              url: urlBase + "/news/:id/product",
              method: "DELETE",
            },

            // INTERNAL. Use News.product.count() instead.
            "prototype$__count__product": {
              url: urlBase + "/news/:id/product/count",
              method: "GET",
            },

            // INTERNAL. Use News.person() instead.
            "prototype$__get__person": {
              isArray: true,
              url: urlBase + "/news/:id/person",
              method: "GET",
            },

            // INTERNAL. Use News.person.create() instead.
            "prototype$__create__person": {
              url: urlBase + "/news/:id/person",
              method: "POST",
            },

            // INTERNAL. Use News.person.destroyAll() instead.
            "prototype$__delete__person": {
              url: urlBase + "/news/:id/person",
              method: "DELETE",
            },

            // INTERNAL. Use News.person.count() instead.
            "prototype$__count__person": {
              url: urlBase + "/news/:id/person/count",
              method: "GET",
            },

            // INTERNAL. Use News.company() instead.
            "prototype$__get__company": {
              isArray: true,
              url: urlBase + "/news/:id/company",
              method: "GET",
            },

            // INTERNAL. Use News.company.create() instead.
            "prototype$__create__company": {
              url: urlBase + "/news/:id/company",
              method: "POST",
            },

            // INTERNAL. Use News.company.destroyAll() instead.
            "prototype$__delete__company": {
              url: urlBase + "/news/:id/company",
              method: "DELETE",
            },

            // INTERNAL. Use News.company.count() instead.
            "prototype$__count__company": {
              url: urlBase + "/news/:id/company/count",
              method: "GET",
            },

            // INTERNAL. Use News.newsCompany() instead.
            "prototype$__get__newsCompany": {
              isArray: true,
              url: urlBase + "/news/:id/newsCompany",
              method: "GET",
            },

            // INTERNAL. Use News.newsCompany.create() instead.
            "prototype$__create__newsCompany": {
              url: urlBase + "/news/:id/newsCompany",
              method: "POST",
            },

            // INTERNAL. Use News.newsCompany.destroyAll() instead.
            "prototype$__delete__newsCompany": {
              url: urlBase + "/news/:id/newsCompany",
              method: "DELETE",
            },

            // INTERNAL. Use News.newsCompany.count() instead.
            "prototype$__count__newsCompany": {
              url: urlBase + "/news/:id/newsCompany/count",
              method: "GET",
            },

            // INTERNAL. Use News.newsPerson() instead.
            "prototype$__get__newsPerson": {
              isArray: true,
              url: urlBase + "/news/:id/newsPerson",
              method: "GET",
            },

            // INTERNAL. Use News.newsPerson.create() instead.
            "prototype$__create__newsPerson": {
              url: urlBase + "/news/:id/newsPerson",
              method: "POST",
            },

            // INTERNAL. Use News.newsPerson.destroyAll() instead.
            "prototype$__delete__newsPerson": {
              url: urlBase + "/news/:id/newsPerson",
              method: "DELETE",
            },

            // INTERNAL. Use News.newsPerson.count() instead.
            "prototype$__count__newsPerson": {
              url: urlBase + "/news/:id/newsPerson/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.News#create
             * @methodOf lbServices.News
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `News` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/news",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.News#createMany
             * @methodOf lbServices.News
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `News` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/news",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.News#upsert
             * @methodOf lbServices.News
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `News` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/news",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.News#replaceOrCreate
             * @methodOf lbServices.News
             *
             * @description
             *
             * Replace an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `News` object.)
             * </em>
             */
            "replaceOrCreate": {
              url: urlBase + "/news/replaceOrCreate",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.News#upsertWithWhere
             * @methodOf lbServices.News
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` â€“ `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `News` object.)
             * </em>
             */
            "upsertWithWhere": {
              url: urlBase + "/news/upsertWithWhere",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.News#exists
             * @methodOf lbServices.News
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` â€“ `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/news/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.News#findById
             * @methodOf lbServices.News
             *
             * @description
             *
             * Find a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - Model id
             *
             *  - `filter` â€“ `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `News` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/news/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.News#replaceById
             * @methodOf lbServices.News
             *
             * @description
             *
             * Replace attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - Model id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `News` object.)
             * </em>
             */
            "replaceById": {
              url: urlBase + "/news/:id/replace",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.News#find
             * @methodOf lbServices.News
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` â€“ `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `News` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/news",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.News#findOne
             * @methodOf lbServices.News
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` â€“ `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `News` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/news/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.News#updateAll
             * @methodOf lbServices.News
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` â€“ `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
            "updateAll": {
              url: urlBase + "/news/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.News#deleteById
             * @methodOf lbServices.News
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `News` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/news/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.News#count
             * @methodOf lbServices.News
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` â€“ `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` â€“ `{number=}` -
             */
            "count": {
              url: urlBase + "/news/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.News#prototype$updateAttributes
             * @methodOf lbServices.News
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `News` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/news/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.News#createChangeStream
             * @methodOf lbServices.News
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` â€“ `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` â€“ `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/news/change-stream",
              method: "POST",
            },

            // INTERNAL. Use User.news.findById() instead.
            "::findById::User::news": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/users/:id/news/:fk",
              method: "GET",
            },

            // INTERNAL. Use User.news.destroyById() instead.
            "::destroyById::User::news": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/users/:id/news/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use User.news.updateById() instead.
            "::updateById::User::news": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/users/:id/news/:fk",
              method: "PUT",
            },

            // INTERNAL. Use User.news() instead.
            "::get::User::news": {
              isArray: true,
              url: urlBase + "/users/:id/news",
              method: "GET",
            },

            // INTERNAL. Use User.news.create() instead.
            "::create::User::news": {
              url: urlBase + "/users/:id/news",
              method: "POST",
            },

            // INTERNAL. Use User.news.createMany() instead.
            "::createMany::User::news": {
              isArray: true,
              url: urlBase + "/users/:id/news",
              method: "POST",
            },

            // INTERNAL. Use User.news.destroyAll() instead.
            "::delete::User::news": {
              url: urlBase + "/users/:id/news",
              method: "DELETE",
            },

            // INTERNAL. Use User.news.count() instead.
            "::count::User::news": {
              url: urlBase + "/users/:id/news/count",
              method: "GET",
            },

            // INTERNAL. Use Ipo.news() instead.
            "::get::Ipo::news": {
              url: urlBase + "/ipos/:id/news",
              method: "GET",
            },

            // INTERNAL. Use Mna.news() instead.
            "::get::Mna::news": {
              url: urlBase + "/mnas/:id/news",
              method: "GET",
            },

            // INTERNAL. Use Investment.news() instead.
            "::get::Investment::news": {
              url: urlBase + "/investments/:id/news",
              method: "GET",
            },

            // INTERNAL. Use NewsCompany.news() instead.
            "::get::NewsCompany::news": {
              url: urlBase + "/newsCompanies/:id/news",
              method: "GET",
            },

            // INTERNAL. Use NewsPerson.news() instead.
            "::get::NewsPerson::news": {
              url: urlBase + "/newsPeople/:id/news",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.News#patchOrCreate
             * @methodOf lbServices.News
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `News` object.)
             * </em>
             */
        R["patchOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.News#updateOrCreate
             * @methodOf lbServices.News
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `News` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.News#patchOrCreateWithWhere
             * @methodOf lbServices.News
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` â€“ `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `News` object.)
             * </em>
             */
        R["patchOrCreateWithWhere"] = R["upsertWithWhere"];

            /**
             * @ngdoc method
             * @name lbServices.News#update
             * @methodOf lbServices.News
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` â€“ `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.News#destroyById
             * @methodOf lbServices.News
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `News` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.News#removeById
             * @methodOf lbServices.News
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `News` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.News#patchAttributes
             * @methodOf lbServices.News
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `News` object.)
             * </em>
             */
        R["patchAttributes"] = R["prototype$updateAttributes"];


        /**
        * @ngdoc property
        * @name lbServices.News#modelName
        * @propertyOf lbServices.News
        * @description
        * The name of the model represented by this $resource,
        * i.e. `News`.
        */
        R.modelName = "News";


            /**
             * @ngdoc method
             * @name lbServices.News#user
             * @methodOf lbServices.News
             *
             * @description
             *
             * Fetches belongsTo relation user.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - PersistedModel id
             *
             *  - `refresh` â€“ `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
        R.user = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::get::News::user"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.News.ipo
     * @header lbServices.News.ipo
     * @object
     * @description
     *
     * The object `News.ipo` groups methods
     * manipulating `Ipo` instances related to `News`.
     *
     * Call {@link lbServices.News#ipo News.ipo()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.News#ipo
             * @methodOf lbServices.News
             *
             * @description
             *
             * Fetches hasOne relation ipo.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - PersistedModel id
             *
             *  - `refresh` â€“ `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Ipo` object.)
             * </em>
             */
        R.ipo = function() {
          var TargetResource = $injector.get("Ipo");
          var action = TargetResource["::get::News::ipo"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.News.ipo#create
             * @methodOf lbServices.News.ipo
             *
             * @description
             *
             * Creates a new instance in ipo of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Ipo` object.)
             * </em>
             */
        R.ipo.create = function() {
          var TargetResource = $injector.get("Ipo");
          var action = TargetResource["::create::News::ipo"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.News.ipo#createMany
             * @methodOf lbServices.News.ipo
             *
             * @description
             *
             * Creates a new instance in ipo of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Ipo` object.)
             * </em>
             */
        R.ipo.createMany = function() {
          var TargetResource = $injector.get("Ipo");
          var action = TargetResource["::createMany::News::ipo"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.News.ipo#destroy
             * @methodOf lbServices.News.ipo
             *
             * @description
             *
             * Deletes ipo of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - PersistedModel id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.ipo.destroy = function() {
          var TargetResource = $injector.get("Ipo");
          var action = TargetResource["::destroy::News::ipo"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.News.ipo#update
             * @methodOf lbServices.News.ipo
             *
             * @description
             *
             * Update ipo of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Ipo` object.)
             * </em>
             */
        R.ipo.update = function() {
          var TargetResource = $injector.get("Ipo");
          var action = TargetResource["::update::News::ipo"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.News.mna
     * @header lbServices.News.mna
     * @object
     * @description
     *
     * The object `News.mna` groups methods
     * manipulating `Mna` instances related to `News`.
     *
     * Call {@link lbServices.News#mna News.mna()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.News#mna
             * @methodOf lbServices.News
             *
             * @description
             *
             * Fetches hasOne relation mna.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - PersistedModel id
             *
             *  - `refresh` â€“ `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Mna` object.)
             * </em>
             */
        R.mna = function() {
          var TargetResource = $injector.get("Mna");
          var action = TargetResource["::get::News::mna"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.News.mna#create
             * @methodOf lbServices.News.mna
             *
             * @description
             *
             * Creates a new instance in mna of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Mna` object.)
             * </em>
             */
        R.mna.create = function() {
          var TargetResource = $injector.get("Mna");
          var action = TargetResource["::create::News::mna"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.News.mna#createMany
             * @methodOf lbServices.News.mna
             *
             * @description
             *
             * Creates a new instance in mna of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Mna` object.)
             * </em>
             */
        R.mna.createMany = function() {
          var TargetResource = $injector.get("Mna");
          var action = TargetResource["::createMany::News::mna"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.News.mna#destroy
             * @methodOf lbServices.News.mna
             *
             * @description
             *
             * Deletes mna of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - PersistedModel id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.mna.destroy = function() {
          var TargetResource = $injector.get("Mna");
          var action = TargetResource["::destroy::News::mna"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.News.mna#update
             * @methodOf lbServices.News.mna
             *
             * @description
             *
             * Update mna of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Mna` object.)
             * </em>
             */
        R.mna.update = function() {
          var TargetResource = $injector.get("Mna");
          var action = TargetResource["::update::News::mna"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.News.investment
     * @header lbServices.News.investment
     * @object
     * @description
     *
     * The object `News.investment` groups methods
     * manipulating `Investment` instances related to `News`.
     *
     * Call {@link lbServices.News#investment News.investment()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.News#investment
             * @methodOf lbServices.News
             *
             * @description
             *
             * Fetches hasOne relation investment.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - PersistedModel id
             *
             *  - `refresh` â€“ `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Investment` object.)
             * </em>
             */
        R.investment = function() {
          var TargetResource = $injector.get("Investment");
          var action = TargetResource["::get::News::investment"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.News.investment#create
             * @methodOf lbServices.News.investment
             *
             * @description
             *
             * Creates a new instance in investment of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Investment` object.)
             * </em>
             */
        R.investment.create = function() {
          var TargetResource = $injector.get("Investment");
          var action = TargetResource["::create::News::investment"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.News.investment#createMany
             * @methodOf lbServices.News.investment
             *
             * @description
             *
             * Creates a new instance in investment of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Investment` object.)
             * </em>
             */
        R.investment.createMany = function() {
          var TargetResource = $injector.get("Investment");
          var action = TargetResource["::createMany::News::investment"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.News.investment#destroy
             * @methodOf lbServices.News.investment
             *
             * @description
             *
             * Deletes investment of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - PersistedModel id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.investment.destroy = function() {
          var TargetResource = $injector.get("Investment");
          var action = TargetResource["::destroy::News::investment"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.News.investment#update
             * @methodOf lbServices.News.investment
             *
             * @description
             *
             * Update investment of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Investment` object.)
             * </em>
             */
        R.investment.update = function() {
          var TargetResource = $injector.get("Investment");
          var action = TargetResource["::update::News::investment"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.News.product
     * @header lbServices.News.product
     * @object
     * @description
     *
     * The object `News.product` groups methods
     * manipulating `Product` instances related to `News`.
     *
     * Call {@link lbServices.News#product News.product()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.News#product
             * @methodOf lbServices.News
             *
             * @description
             *
             * Queries product of news.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - PersistedModel id
             *
             *  - `filter` â€“ `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Product` object.)
             * </em>
             */
        R.product = function() {
          var TargetResource = $injector.get("Product");
          var action = TargetResource["::get::News::product"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.News.product#count
             * @methodOf lbServices.News.product
             *
             * @description
             *
             * Counts product of news.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - PersistedModel id
             *
             *  - `where` â€“ `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` â€“ `{number=}` -
             */
        R.product.count = function() {
          var TargetResource = $injector.get("Product");
          var action = TargetResource["::count::News::product"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.News.product#create
             * @methodOf lbServices.News.product
             *
             * @description
             *
             * Creates a new instance in product of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Product` object.)
             * </em>
             */
        R.product.create = function() {
          var TargetResource = $injector.get("Product");
          var action = TargetResource["::create::News::product"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.News.product#createMany
             * @methodOf lbServices.News.product
             *
             * @description
             *
             * Creates a new instance in product of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Product` object.)
             * </em>
             */
        R.product.createMany = function() {
          var TargetResource = $injector.get("Product");
          var action = TargetResource["::createMany::News::product"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.News.product#destroyAll
             * @methodOf lbServices.News.product
             *
             * @description
             *
             * Deletes all product of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - PersistedModel id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.product.destroyAll = function() {
          var TargetResource = $injector.get("Product");
          var action = TargetResource["::delete::News::product"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.News.product#destroyById
             * @methodOf lbServices.News.product
             *
             * @description
             *
             * Delete a related item by id for product.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - PersistedModel id
             *
             *  - `fk` â€“ `{*}` - Foreign key for product
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.product.destroyById = function() {
          var TargetResource = $injector.get("Product");
          var action = TargetResource["::destroyById::News::product"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.News.product#exists
             * @methodOf lbServices.News.product
             *
             * @description
             *
             * Check the existence of product relation to an item by id.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - PersistedModel id
             *
             *  - `fk` â€“ `{*}` - Foreign key for product
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Product` object.)
             * </em>
             */
        R.product.exists = function() {
          var TargetResource = $injector.get("Product");
          var action = TargetResource["::exists::News::product"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.News.product#findById
             * @methodOf lbServices.News.product
             *
             * @description
             *
             * Find a related item by id for product.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - PersistedModel id
             *
             *  - `fk` â€“ `{*}` - Foreign key for product
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Product` object.)
             * </em>
             */
        R.product.findById = function() {
          var TargetResource = $injector.get("Product");
          var action = TargetResource["::findById::News::product"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.News.product#link
             * @methodOf lbServices.News.product
             *
             * @description
             *
             * Add a related item by id for product.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - PersistedModel id
             *
             *  - `fk` â€“ `{*}` - Foreign key for product
             *
             * @param {Object} postData Request data.
             *
             * This method does not accept any data. Supply an empty object.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Product` object.)
             * </em>
             */
        R.product.link = function() {
          var TargetResource = $injector.get("Product");
          var action = TargetResource["::link::News::product"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.News.product#unlink
             * @methodOf lbServices.News.product
             *
             * @description
             *
             * Remove the product relation to an item by id.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - PersistedModel id
             *
             *  - `fk` â€“ `{*}` - Foreign key for product
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.product.unlink = function() {
          var TargetResource = $injector.get("Product");
          var action = TargetResource["::unlink::News::product"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.News.product#updateById
             * @methodOf lbServices.News.product
             *
             * @description
             *
             * Update a related item by id for product.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - PersistedModel id
             *
             *  - `fk` â€“ `{*}` - Foreign key for product
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Product` object.)
             * </em>
             */
        R.product.updateById = function() {
          var TargetResource = $injector.get("Product");
          var action = TargetResource["::updateById::News::product"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.News.person
     * @header lbServices.News.person
     * @object
     * @description
     *
     * The object `News.person` groups methods
     * manipulating `Person` instances related to `News`.
     *
     * Call {@link lbServices.News#person News.person()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.News#person
             * @methodOf lbServices.News
             *
             * @description
             *
             * Queries person of news.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - PersistedModel id
             *
             *  - `filter` â€“ `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Person` object.)
             * </em>
             */
        R.person = function() {
          var TargetResource = $injector.get("Person");
          var action = TargetResource["::get::News::person"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.News.person#count
             * @methodOf lbServices.News.person
             *
             * @description
             *
             * Counts person of news.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - PersistedModel id
             *
             *  - `where` â€“ `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` â€“ `{number=}` -
             */
        R.person.count = function() {
          var TargetResource = $injector.get("Person");
          var action = TargetResource["::count::News::person"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.News.person#create
             * @methodOf lbServices.News.person
             *
             * @description
             *
             * Creates a new instance in person of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Person` object.)
             * </em>
             */
        R.person.create = function() {
          var TargetResource = $injector.get("Person");
          var action = TargetResource["::create::News::person"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.News.person#createMany
             * @methodOf lbServices.News.person
             *
             * @description
             *
             * Creates a new instance in person of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Person` object.)
             * </em>
             */
        R.person.createMany = function() {
          var TargetResource = $injector.get("Person");
          var action = TargetResource["::createMany::News::person"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.News.person#destroyAll
             * @methodOf lbServices.News.person
             *
             * @description
             *
             * Deletes all person of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - PersistedModel id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.person.destroyAll = function() {
          var TargetResource = $injector.get("Person");
          var action = TargetResource["::delete::News::person"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.News.person#destroyById
             * @methodOf lbServices.News.person
             *
             * @description
             *
             * Delete a related item by id for person.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - PersistedModel id
             *
             *  - `fk` â€“ `{*}` - Foreign key for person
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.person.destroyById = function() {
          var TargetResource = $injector.get("Person");
          var action = TargetResource["::destroyById::News::person"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.News.person#exists
             * @methodOf lbServices.News.person
             *
             * @description
             *
             * Check the existence of person relation to an item by id.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - PersistedModel id
             *
             *  - `fk` â€“ `{*}` - Foreign key for person
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Person` object.)
             * </em>
             */
        R.person.exists = function() {
          var TargetResource = $injector.get("Person");
          var action = TargetResource["::exists::News::person"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.News.person#findById
             * @methodOf lbServices.News.person
             *
             * @description
             *
             * Find a related item by id for person.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - PersistedModel id
             *
             *  - `fk` â€“ `{*}` - Foreign key for person
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Person` object.)
             * </em>
             */
        R.person.findById = function() {
          var TargetResource = $injector.get("Person");
          var action = TargetResource["::findById::News::person"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.News.person#link
             * @methodOf lbServices.News.person
             *
             * @description
             *
             * Add a related item by id for person.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - PersistedModel id
             *
             *  - `fk` â€“ `{*}` - Foreign key for person
             *
             * @param {Object} postData Request data.
             *
             * This method does not accept any data. Supply an empty object.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Person` object.)
             * </em>
             */
        R.person.link = function() {
          var TargetResource = $injector.get("Person");
          var action = TargetResource["::link::News::person"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.News.person#unlink
             * @methodOf lbServices.News.person
             *
             * @description
             *
             * Remove the person relation to an item by id.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - PersistedModel id
             *
             *  - `fk` â€“ `{*}` - Foreign key for person
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.person.unlink = function() {
          var TargetResource = $injector.get("Person");
          var action = TargetResource["::unlink::News::person"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.News.person#updateById
             * @methodOf lbServices.News.person
             *
             * @description
             *
             * Update a related item by id for person.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - PersistedModel id
             *
             *  - `fk` â€“ `{*}` - Foreign key for person
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Person` object.)
             * </em>
             */
        R.person.updateById = function() {
          var TargetResource = $injector.get("Person");
          var action = TargetResource["::updateById::News::person"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.News.company
     * @header lbServices.News.company
     * @object
     * @description
     *
     * The object `News.company` groups methods
     * manipulating `Company` instances related to `News`.
     *
     * Call {@link lbServices.News#company News.company()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.News#company
             * @methodOf lbServices.News
             *
             * @description
             *
             * Queries company of news.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - PersistedModel id
             *
             *  - `filter` â€“ `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Company` object.)
             * </em>
             */
        R.company = function() {
          var TargetResource = $injector.get("Company");
          var action = TargetResource["::get::News::company"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.News.company#count
             * @methodOf lbServices.News.company
             *
             * @description
             *
             * Counts company of news.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - PersistedModel id
             *
             *  - `where` â€“ `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` â€“ `{number=}` -
             */
        R.company.count = function() {
          var TargetResource = $injector.get("Company");
          var action = TargetResource["::count::News::company"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.News.company#create
             * @methodOf lbServices.News.company
             *
             * @description
             *
             * Creates a new instance in company of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Company` object.)
             * </em>
             */
        R.company.create = function() {
          var TargetResource = $injector.get("Company");
          var action = TargetResource["::create::News::company"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.News.company#createMany
             * @methodOf lbServices.News.company
             *
             * @description
             *
             * Creates a new instance in company of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Company` object.)
             * </em>
             */
        R.company.createMany = function() {
          var TargetResource = $injector.get("Company");
          var action = TargetResource["::createMany::News::company"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.News.company#destroyAll
             * @methodOf lbServices.News.company
             *
             * @description
             *
             * Deletes all company of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - PersistedModel id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.company.destroyAll = function() {
          var TargetResource = $injector.get("Company");
          var action = TargetResource["::delete::News::company"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.News.company#destroyById
             * @methodOf lbServices.News.company
             *
             * @description
             *
             * Delete a related item by id for company.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - PersistedModel id
             *
             *  - `fk` â€“ `{*}` - Foreign key for company
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.company.destroyById = function() {
          var TargetResource = $injector.get("Company");
          var action = TargetResource["::destroyById::News::company"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.News.company#exists
             * @methodOf lbServices.News.company
             *
             * @description
             *
             * Check the existence of company relation to an item by id.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - PersistedModel id
             *
             *  - `fk` â€“ `{*}` - Foreign key for company
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Company` object.)
             * </em>
             */
        R.company.exists = function() {
          var TargetResource = $injector.get("Company");
          var action = TargetResource["::exists::News::company"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.News.company#findById
             * @methodOf lbServices.News.company
             *
             * @description
             *
             * Find a related item by id for company.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - PersistedModel id
             *
             *  - `fk` â€“ `{*}` - Foreign key for company
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Company` object.)
             * </em>
             */
        R.company.findById = function() {
          var TargetResource = $injector.get("Company");
          var action = TargetResource["::findById::News::company"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.News.company#link
             * @methodOf lbServices.News.company
             *
             * @description
             *
             * Add a related item by id for company.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - PersistedModel id
             *
             *  - `fk` â€“ `{*}` - Foreign key for company
             *
             * @param {Object} postData Request data.
             *
             * This method does not accept any data. Supply an empty object.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Company` object.)
             * </em>
             */
        R.company.link = function() {
          var TargetResource = $injector.get("Company");
          var action = TargetResource["::link::News::company"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.News.company#unlink
             * @methodOf lbServices.News.company
             *
             * @description
             *
             * Remove the company relation to an item by id.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - PersistedModel id
             *
             *  - `fk` â€“ `{*}` - Foreign key for company
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.company.unlink = function() {
          var TargetResource = $injector.get("Company");
          var action = TargetResource["::unlink::News::company"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.News.company#updateById
             * @methodOf lbServices.News.company
             *
             * @description
             *
             * Update a related item by id for company.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - PersistedModel id
             *
             *  - `fk` â€“ `{*}` - Foreign key for company
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Company` object.)
             * </em>
             */
        R.company.updateById = function() {
          var TargetResource = $injector.get("Company");
          var action = TargetResource["::updateById::News::company"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.News.newsCompany
     * @header lbServices.News.newsCompany
     * @object
     * @description
     *
     * The object `News.newsCompany` groups methods
     * manipulating `NewsCompany` instances related to `News`.
     *
     * Call {@link lbServices.News#newsCompany News.newsCompany()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.News#newsCompany
             * @methodOf lbServices.News
             *
             * @description
             *
             * Queries newsCompany of news.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - PersistedModel id
             *
             *  - `filter` â€“ `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `NewsCompany` object.)
             * </em>
             */
        R.newsCompany = function() {
          var TargetResource = $injector.get("NewsCompany");
          var action = TargetResource["::get::News::newsCompany"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.News.newsCompany#count
             * @methodOf lbServices.News.newsCompany
             *
             * @description
             *
             * Counts newsCompany of news.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - PersistedModel id
             *
             *  - `where` â€“ `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` â€“ `{number=}` -
             */
        R.newsCompany.count = function() {
          var TargetResource = $injector.get("NewsCompany");
          var action = TargetResource["::count::News::newsCompany"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.News.newsCompany#create
             * @methodOf lbServices.News.newsCompany
             *
             * @description
             *
             * Creates a new instance in newsCompany of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `NewsCompany` object.)
             * </em>
             */
        R.newsCompany.create = function() {
          var TargetResource = $injector.get("NewsCompany");
          var action = TargetResource["::create::News::newsCompany"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.News.newsCompany#createMany
             * @methodOf lbServices.News.newsCompany
             *
             * @description
             *
             * Creates a new instance in newsCompany of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `NewsCompany` object.)
             * </em>
             */
        R.newsCompany.createMany = function() {
          var TargetResource = $injector.get("NewsCompany");
          var action = TargetResource["::createMany::News::newsCompany"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.News.newsCompany#destroyAll
             * @methodOf lbServices.News.newsCompany
             *
             * @description
             *
             * Deletes all newsCompany of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - PersistedModel id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.newsCompany.destroyAll = function() {
          var TargetResource = $injector.get("NewsCompany");
          var action = TargetResource["::delete::News::newsCompany"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.News.newsCompany#destroyById
             * @methodOf lbServices.News.newsCompany
             *
             * @description
             *
             * Delete a related item by id for newsCompany.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - PersistedModel id
             *
             *  - `fk` â€“ `{*}` - Foreign key for newsCompany
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.newsCompany.destroyById = function() {
          var TargetResource = $injector.get("NewsCompany");
          var action = TargetResource["::destroyById::News::newsCompany"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.News.newsCompany#findById
             * @methodOf lbServices.News.newsCompany
             *
             * @description
             *
             * Find a related item by id for newsCompany.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - PersistedModel id
             *
             *  - `fk` â€“ `{*}` - Foreign key for newsCompany
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `NewsCompany` object.)
             * </em>
             */
        R.newsCompany.findById = function() {
          var TargetResource = $injector.get("NewsCompany");
          var action = TargetResource["::findById::News::newsCompany"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.News.newsCompany#updateById
             * @methodOf lbServices.News.newsCompany
             *
             * @description
             *
             * Update a related item by id for newsCompany.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - PersistedModel id
             *
             *  - `fk` â€“ `{*}` - Foreign key for newsCompany
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `NewsCompany` object.)
             * </em>
             */
        R.newsCompany.updateById = function() {
          var TargetResource = $injector.get("NewsCompany");
          var action = TargetResource["::updateById::News::newsCompany"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.News.newsPerson
     * @header lbServices.News.newsPerson
     * @object
     * @description
     *
     * The object `News.newsPerson` groups methods
     * manipulating `NewsPerson` instances related to `News`.
     *
     * Call {@link lbServices.News#newsPerson News.newsPerson()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.News#newsPerson
             * @methodOf lbServices.News
             *
             * @description
             *
             * Queries newsPerson of news.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - PersistedModel id
             *
             *  - `filter` â€“ `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `NewsPerson` object.)
             * </em>
             */
        R.newsPerson = function() {
          var TargetResource = $injector.get("NewsPerson");
          var action = TargetResource["::get::News::newsPerson"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.News.newsPerson#count
             * @methodOf lbServices.News.newsPerson
             *
             * @description
             *
             * Counts newsPerson of news.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - PersistedModel id
             *
             *  - `where` â€“ `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` â€“ `{number=}` -
             */
        R.newsPerson.count = function() {
          var TargetResource = $injector.get("NewsPerson");
          var action = TargetResource["::count::News::newsPerson"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.News.newsPerson#create
             * @methodOf lbServices.News.newsPerson
             *
             * @description
             *
             * Creates a new instance in newsPerson of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `NewsPerson` object.)
             * </em>
             */
        R.newsPerson.create = function() {
          var TargetResource = $injector.get("NewsPerson");
          var action = TargetResource["::create::News::newsPerson"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.News.newsPerson#createMany
             * @methodOf lbServices.News.newsPerson
             *
             * @description
             *
             * Creates a new instance in newsPerson of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `NewsPerson` object.)
             * </em>
             */
        R.newsPerson.createMany = function() {
          var TargetResource = $injector.get("NewsPerson");
          var action = TargetResource["::createMany::News::newsPerson"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.News.newsPerson#destroyAll
             * @methodOf lbServices.News.newsPerson
             *
             * @description
             *
             * Deletes all newsPerson of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - PersistedModel id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.newsPerson.destroyAll = function() {
          var TargetResource = $injector.get("NewsPerson");
          var action = TargetResource["::delete::News::newsPerson"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.News.newsPerson#destroyById
             * @methodOf lbServices.News.newsPerson
             *
             * @description
             *
             * Delete a related item by id for newsPerson.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - PersistedModel id
             *
             *  - `fk` â€“ `{*}` - Foreign key for newsPerson
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.newsPerson.destroyById = function() {
          var TargetResource = $injector.get("NewsPerson");
          var action = TargetResource["::destroyById::News::newsPerson"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.News.newsPerson#findById
             * @methodOf lbServices.News.newsPerson
             *
             * @description
             *
             * Find a related item by id for newsPerson.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - PersistedModel id
             *
             *  - `fk` â€“ `{*}` - Foreign key for newsPerson
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `NewsPerson` object.)
             * </em>
             */
        R.newsPerson.findById = function() {
          var TargetResource = $injector.get("NewsPerson");
          var action = TargetResource["::findById::News::newsPerson"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.News.newsPerson#updateById
             * @methodOf lbServices.News.newsPerson
             *
             * @description
             *
             * Update a related item by id for newsPerson.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - PersistedModel id
             *
             *  - `fk` â€“ `{*}` - Foreign key for newsPerson
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `NewsPerson` object.)
             * </em>
             */
        R.newsPerson.updateById = function() {
          var TargetResource = $injector.get("NewsPerson");
          var action = TargetResource["::updateById::News::newsPerson"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.Ipo
 * @header lbServices.Ipo
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `Ipo` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "Ipo",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector', '$q',
      function(LoopBackResource, LoopBackAuth, $injector, $q) {
        var R = LoopBackResource(
        urlBase + "/ipos/:id",
          { 'id': '@id' },
          {

            // INTERNAL. Use Ipo.news() instead.
            "prototype$__get__news": {
              url: urlBase + "/ipos/:id/news",
              method: "GET",
            },

            // INTERNAL. Use Ipo.company() instead.
            "prototype$__get__company": {
              url: urlBase + "/ipos/:id/company",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Ipo#create
             * @methodOf lbServices.Ipo
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Ipo` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/ipos",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Ipo#createMany
             * @methodOf lbServices.Ipo
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Ipo` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/ipos",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Ipo#upsert
             * @methodOf lbServices.Ipo
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Ipo` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/ipos",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.Ipo#replaceOrCreate
             * @methodOf lbServices.Ipo
             *
             * @description
             *
             * Replace an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Ipo` object.)
             * </em>
             */
            "replaceOrCreate": {
              url: urlBase + "/ipos/replaceOrCreate",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Ipo#upsertWithWhere
             * @methodOf lbServices.Ipo
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` â€“ `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Ipo` object.)
             * </em>
             */
            "upsertWithWhere": {
              url: urlBase + "/ipos/upsertWithWhere",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Ipo#exists
             * @methodOf lbServices.Ipo
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` â€“ `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/ipos/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Ipo#findById
             * @methodOf lbServices.Ipo
             *
             * @description
             *
             * Find a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - Model id
             *
             *  - `filter` â€“ `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Ipo` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/ipos/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Ipo#replaceById
             * @methodOf lbServices.Ipo
             *
             * @description
             *
             * Replace attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - Model id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Ipo` object.)
             * </em>
             */
            "replaceById": {
              url: urlBase + "/ipos/:id/replace",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Ipo#find
             * @methodOf lbServices.Ipo
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` â€“ `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Ipo` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/ipos",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Ipo#findOne
             * @methodOf lbServices.Ipo
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` â€“ `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Ipo` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/ipos/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Ipo#updateAll
             * @methodOf lbServices.Ipo
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` â€“ `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
            "updateAll": {
              url: urlBase + "/ipos/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Ipo#deleteById
             * @methodOf lbServices.Ipo
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Ipo` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/ipos/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.Ipo#count
             * @methodOf lbServices.Ipo
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` â€“ `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` â€“ `{number=}` -
             */
            "count": {
              url: urlBase + "/ipos/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Ipo#prototype$updateAttributes
             * @methodOf lbServices.Ipo
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Ipo` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/ipos/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.Ipo#createChangeStream
             * @methodOf lbServices.Ipo
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` â€“ `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` â€“ `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/ipos/change-stream",
              method: "POST",
            },

            // INTERNAL. Use News.ipo() instead.
            "::get::News::ipo": {
              url: urlBase + "/news/:id/ipo",
              method: "GET",
            },

            // INTERNAL. Use News.ipo.create() instead.
            "::create::News::ipo": {
              url: urlBase + "/news/:id/ipo",
              method: "POST",
            },

            // INTERNAL. Use News.ipo.createMany() instead.
            "::createMany::News::ipo": {
              isArray: true,
              url: urlBase + "/news/:id/ipo",
              method: "POST",
            },

            // INTERNAL. Use News.ipo.update() instead.
            "::update::News::ipo": {
              url: urlBase + "/news/:id/ipo",
              method: "PUT",
            },

            // INTERNAL. Use News.ipo.destroy() instead.
            "::destroy::News::ipo": {
              url: urlBase + "/news/:id/ipo",
              method: "DELETE",
            },

            // INTERNAL. Use Company.ipos.findById() instead.
            "::findById::Company::ipos": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/companies/:id/ipos/:fk",
              method: "GET",
            },

            // INTERNAL. Use Company.ipos.destroyById() instead.
            "::destroyById::Company::ipos": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/companies/:id/ipos/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Company.ipos.updateById() instead.
            "::updateById::Company::ipos": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/companies/:id/ipos/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Company.ipos() instead.
            "::get::Company::ipos": {
              isArray: true,
              url: urlBase + "/companies/:id/ipos",
              method: "GET",
            },

            // INTERNAL. Use Company.ipos.create() instead.
            "::create::Company::ipos": {
              url: urlBase + "/companies/:id/ipos",
              method: "POST",
            },

            // INTERNAL. Use Company.ipos.createMany() instead.
            "::createMany::Company::ipos": {
              isArray: true,
              url: urlBase + "/companies/:id/ipos",
              method: "POST",
            },

            // INTERNAL. Use Company.ipos.destroyAll() instead.
            "::delete::Company::ipos": {
              url: urlBase + "/companies/:id/ipos",
              method: "DELETE",
            },

            // INTERNAL. Use Company.ipos.count() instead.
            "::count::Company::ipos": {
              url: urlBase + "/companies/:id/ipos/count",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.Ipo#patchOrCreate
             * @methodOf lbServices.Ipo
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Ipo` object.)
             * </em>
             */
        R["patchOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.Ipo#updateOrCreate
             * @methodOf lbServices.Ipo
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Ipo` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.Ipo#patchOrCreateWithWhere
             * @methodOf lbServices.Ipo
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` â€“ `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Ipo` object.)
             * </em>
             */
        R["patchOrCreateWithWhere"] = R["upsertWithWhere"];

            /**
             * @ngdoc method
             * @name lbServices.Ipo#update
             * @methodOf lbServices.Ipo
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` â€“ `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.Ipo#destroyById
             * @methodOf lbServices.Ipo
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Ipo` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.Ipo#removeById
             * @methodOf lbServices.Ipo
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Ipo` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.Ipo#patchAttributes
             * @methodOf lbServices.Ipo
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Ipo` object.)
             * </em>
             */
        R["patchAttributes"] = R["prototype$updateAttributes"];


        /**
        * @ngdoc property
        * @name lbServices.Ipo#modelName
        * @propertyOf lbServices.Ipo
        * @description
        * The name of the model represented by this $resource,
        * i.e. `Ipo`.
        */
        R.modelName = "Ipo";


            /**
             * @ngdoc method
             * @name lbServices.Ipo#news
             * @methodOf lbServices.Ipo
             *
             * @description
             *
             * Fetches belongsTo relation news.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - PersistedModel id
             *
             *  - `refresh` â€“ `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `News` object.)
             * </em>
             */
        R.news = function() {
          var TargetResource = $injector.get("News");
          var action = TargetResource["::get::Ipo::news"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Ipo#company
             * @methodOf lbServices.Ipo
             *
             * @description
             *
             * Fetches belongsTo relation company.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - PersistedModel id
             *
             *  - `refresh` â€“ `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Company` object.)
             * </em>
             */
        R.company = function() {
          var TargetResource = $injector.get("Company");
          var action = TargetResource["::get::Ipo::company"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.Mna
 * @header lbServices.Mna
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `Mna` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "Mna",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector', '$q',
      function(LoopBackResource, LoopBackAuth, $injector, $q) {
        var R = LoopBackResource(
        urlBase + "/mnas/:id",
          { 'id': '@id' },
          {

            // INTERNAL. Use Mna.news() instead.
            "prototype$__get__news": {
              url: urlBase + "/mnas/:id/news",
              method: "GET",
            },

            // INTERNAL. Use Mna.takeover() instead.
            "prototype$__get__takeover": {
              url: urlBase + "/mnas/:id/takeover",
              method: "GET",
            },

            // INTERNAL. Use Mna.handover() instead.
            "prototype$__get__handover": {
              url: urlBase + "/mnas/:id/handover",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Mna#create
             * @methodOf lbServices.Mna
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Mna` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/mnas",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Mna#createMany
             * @methodOf lbServices.Mna
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Mna` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/mnas",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Mna#upsert
             * @methodOf lbServices.Mna
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Mna` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/mnas",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.Mna#replaceOrCreate
             * @methodOf lbServices.Mna
             *
             * @description
             *
             * Replace an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Mna` object.)
             * </em>
             */
            "replaceOrCreate": {
              url: urlBase + "/mnas/replaceOrCreate",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Mna#upsertWithWhere
             * @methodOf lbServices.Mna
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` â€“ `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Mna` object.)
             * </em>
             */
            "upsertWithWhere": {
              url: urlBase + "/mnas/upsertWithWhere",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Mna#exists
             * @methodOf lbServices.Mna
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` â€“ `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/mnas/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Mna#findById
             * @methodOf lbServices.Mna
             *
             * @description
             *
             * Find a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - Model id
             *
             *  - `filter` â€“ `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Mna` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/mnas/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Mna#replaceById
             * @methodOf lbServices.Mna
             *
             * @description
             *
             * Replace attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - Model id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Mna` object.)
             * </em>
             */
            "replaceById": {
              url: urlBase + "/mnas/:id/replace",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Mna#find
             * @methodOf lbServices.Mna
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` â€“ `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Mna` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/mnas",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Mna#findOne
             * @methodOf lbServices.Mna
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` â€“ `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Mna` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/mnas/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Mna#updateAll
             * @methodOf lbServices.Mna
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` â€“ `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
            "updateAll": {
              url: urlBase + "/mnas/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Mna#deleteById
             * @methodOf lbServices.Mna
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Mna` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/mnas/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.Mna#count
             * @methodOf lbServices.Mna
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` â€“ `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` â€“ `{number=}` -
             */
            "count": {
              url: urlBase + "/mnas/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Mna#prototype$updateAttributes
             * @methodOf lbServices.Mna
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Mna` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/mnas/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.Mna#createChangeStream
             * @methodOf lbServices.Mna
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` â€“ `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` â€“ `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/mnas/change-stream",
              method: "POST",
            },

            // INTERNAL. Use News.mna() instead.
            "::get::News::mna": {
              url: urlBase + "/news/:id/mna",
              method: "GET",
            },

            // INTERNAL. Use News.mna.create() instead.
            "::create::News::mna": {
              url: urlBase + "/news/:id/mna",
              method: "POST",
            },

            // INTERNAL. Use News.mna.createMany() instead.
            "::createMany::News::mna": {
              isArray: true,
              url: urlBase + "/news/:id/mna",
              method: "POST",
            },

            // INTERNAL. Use News.mna.update() instead.
            "::update::News::mna": {
              url: urlBase + "/news/:id/mna",
              method: "PUT",
            },

            // INTERNAL. Use News.mna.destroy() instead.
            "::destroy::News::mna": {
              url: urlBase + "/news/:id/mna",
              method: "DELETE",
            },

            // INTERNAL. Use Company.handover.findById() instead.
            "::findById::Company::handover": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/companies/:id/handover/:fk",
              method: "GET",
            },

            // INTERNAL. Use Company.handover.destroyById() instead.
            "::destroyById::Company::handover": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/companies/:id/handover/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Company.handover.updateById() instead.
            "::updateById::Company::handover": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/companies/:id/handover/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Company.takeover.findById() instead.
            "::findById::Company::takeover": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/companies/:id/takeover/:fk",
              method: "GET",
            },

            // INTERNAL. Use Company.takeover.destroyById() instead.
            "::destroyById::Company::takeover": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/companies/:id/takeover/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Company.takeover.updateById() instead.
            "::updateById::Company::takeover": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/companies/:id/takeover/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Company.handover() instead.
            "::get::Company::handover": {
              isArray: true,
              url: urlBase + "/companies/:id/handover",
              method: "GET",
            },

            // INTERNAL. Use Company.handover.create() instead.
            "::create::Company::handover": {
              url: urlBase + "/companies/:id/handover",
              method: "POST",
            },

            // INTERNAL. Use Company.handover.createMany() instead.
            "::createMany::Company::handover": {
              isArray: true,
              url: urlBase + "/companies/:id/handover",
              method: "POST",
            },

            // INTERNAL. Use Company.handover.destroyAll() instead.
            "::delete::Company::handover": {
              url: urlBase + "/companies/:id/handover",
              method: "DELETE",
            },

            // INTERNAL. Use Company.handover.count() instead.
            "::count::Company::handover": {
              url: urlBase + "/companies/:id/handover/count",
              method: "GET",
            },

            // INTERNAL. Use Company.takeover() instead.
            "::get::Company::takeover": {
              isArray: true,
              url: urlBase + "/companies/:id/takeover",
              method: "GET",
            },

            // INTERNAL. Use Company.takeover.create() instead.
            "::create::Company::takeover": {
              url: urlBase + "/companies/:id/takeover",
              method: "POST",
            },

            // INTERNAL. Use Company.takeover.createMany() instead.
            "::createMany::Company::takeover": {
              isArray: true,
              url: urlBase + "/companies/:id/takeover",
              method: "POST",
            },

            // INTERNAL. Use Company.takeover.destroyAll() instead.
            "::delete::Company::takeover": {
              url: urlBase + "/companies/:id/takeover",
              method: "DELETE",
            },

            // INTERNAL. Use Company.takeover.count() instead.
            "::count::Company::takeover": {
              url: urlBase + "/companies/:id/takeover/count",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.Mna#patchOrCreate
             * @methodOf lbServices.Mna
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Mna` object.)
             * </em>
             */
        R["patchOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.Mna#updateOrCreate
             * @methodOf lbServices.Mna
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Mna` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.Mna#patchOrCreateWithWhere
             * @methodOf lbServices.Mna
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` â€“ `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Mna` object.)
             * </em>
             */
        R["patchOrCreateWithWhere"] = R["upsertWithWhere"];

            /**
             * @ngdoc method
             * @name lbServices.Mna#update
             * @methodOf lbServices.Mna
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` â€“ `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.Mna#destroyById
             * @methodOf lbServices.Mna
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Mna` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.Mna#removeById
             * @methodOf lbServices.Mna
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Mna` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.Mna#patchAttributes
             * @methodOf lbServices.Mna
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Mna` object.)
             * </em>
             */
        R["patchAttributes"] = R["prototype$updateAttributes"];


        /**
        * @ngdoc property
        * @name lbServices.Mna#modelName
        * @propertyOf lbServices.Mna
        * @description
        * The name of the model represented by this $resource,
        * i.e. `Mna`.
        */
        R.modelName = "Mna";


            /**
             * @ngdoc method
             * @name lbServices.Mna#news
             * @methodOf lbServices.Mna
             *
             * @description
             *
             * Fetches belongsTo relation news.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - PersistedModel id
             *
             *  - `refresh` â€“ `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `News` object.)
             * </em>
             */
        R.news = function() {
          var TargetResource = $injector.get("News");
          var action = TargetResource["::get::Mna::news"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Mna#takeover
             * @methodOf lbServices.Mna
             *
             * @description
             *
             * Fetches belongsTo relation takeover.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - PersistedModel id
             *
             *  - `refresh` â€“ `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Company` object.)
             * </em>
             */
        R.takeover = function() {
          var TargetResource = $injector.get("Company");
          var action = TargetResource["::get::Mna::takeover"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Mna#handover
             * @methodOf lbServices.Mna
             *
             * @description
             *
             * Fetches belongsTo relation handover.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - PersistedModel id
             *
             *  - `refresh` â€“ `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Company` object.)
             * </em>
             */
        R.handover = function() {
          var TargetResource = $injector.get("Company");
          var action = TargetResource["::get::Mna::handover"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.Investment
 * @header lbServices.Investment
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `Investment` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "Investment",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector', '$q',
      function(LoopBackResource, LoopBackAuth, $injector, $q) {
        var R = LoopBackResource(
        urlBase + "/investments/:id",
          { 'id': '@id' },
          {

            // INTERNAL. Use Investment.news() instead.
            "prototype$__get__news": {
              url: urlBase + "/investments/:id/news",
              method: "GET",
            },

            // INTERNAL. Use Investment.investorPerson.findById() instead.
            "prototype$__findById__investorPerson": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/investments/:id/investorPerson/:fk",
              method: "GET",
            },

            // INTERNAL. Use Investment.investorPerson.destroyById() instead.
            "prototype$__destroyById__investorPerson": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/investments/:id/investorPerson/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Investment.investorPerson.updateById() instead.
            "prototype$__updateById__investorPerson": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/investments/:id/investorPerson/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Investment.investorPerson.link() instead.
            "prototype$__link__investorPerson": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/investments/:id/investorPerson/rel/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Investment.investorPerson.unlink() instead.
            "prototype$__unlink__investorPerson": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/investments/:id/investorPerson/rel/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Investment.investorPerson.exists() instead.
            "prototype$__exists__investorPerson": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/investments/:id/investorPerson/rel/:fk",
              method: "HEAD",
            },

            // INTERNAL. Use Investment.investee() instead.
            "prototype$__get__investee": {
              url: urlBase + "/investments/:id/investee",
              method: "GET",
            },

            // INTERNAL. Use Investment.investorCompany.findById() instead.
            "prototype$__findById__investorCompany": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/investments/:id/investorCompany/:fk",
              method: "GET",
            },

            // INTERNAL. Use Investment.investorCompany.destroyById() instead.
            "prototype$__destroyById__investorCompany": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/investments/:id/investorCompany/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Investment.investorCompany.updateById() instead.
            "prototype$__updateById__investorCompany": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/investments/:id/investorCompany/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Investment.investorCompany.link() instead.
            "prototype$__link__investorCompany": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/investments/:id/investorCompany/rel/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Investment.investorCompany.unlink() instead.
            "prototype$__unlink__investorCompany": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/investments/:id/investorCompany/rel/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Investment.investorCompany.exists() instead.
            "prototype$__exists__investorCompany": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/investments/:id/investorCompany/rel/:fk",
              method: "HEAD",
            },

            // INTERNAL. Use Investment.investorPerson() instead.
            "prototype$__get__investorPerson": {
              isArray: true,
              url: urlBase + "/investments/:id/investorPerson",
              method: "GET",
            },

            // INTERNAL. Use Investment.investorPerson.create() instead.
            "prototype$__create__investorPerson": {
              url: urlBase + "/investments/:id/investorPerson",
              method: "POST",
            },

            // INTERNAL. Use Investment.investorPerson.destroyAll() instead.
            "prototype$__delete__investorPerson": {
              url: urlBase + "/investments/:id/investorPerson",
              method: "DELETE",
            },

            // INTERNAL. Use Investment.investorPerson.count() instead.
            "prototype$__count__investorPerson": {
              url: urlBase + "/investments/:id/investorPerson/count",
              method: "GET",
            },

            // INTERNAL. Use Investment.investorCompany() instead.
            "prototype$__get__investorCompany": {
              isArray: true,
              url: urlBase + "/investments/:id/investorCompany",
              method: "GET",
            },

            // INTERNAL. Use Investment.investorCompany.create() instead.
            "prototype$__create__investorCompany": {
              url: urlBase + "/investments/:id/investorCompany",
              method: "POST",
            },

            // INTERNAL. Use Investment.investorCompany.destroyAll() instead.
            "prototype$__delete__investorCompany": {
              url: urlBase + "/investments/:id/investorCompany",
              method: "DELETE",
            },

            // INTERNAL. Use Investment.investorCompany.count() instead.
            "prototype$__count__investorCompany": {
              url: urlBase + "/investments/:id/investorCompany/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Investment#create
             * @methodOf lbServices.Investment
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Investment` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/investments",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Investment#createMany
             * @methodOf lbServices.Investment
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Investment` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/investments",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Investment#upsert
             * @methodOf lbServices.Investment
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Investment` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/investments",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.Investment#replaceOrCreate
             * @methodOf lbServices.Investment
             *
             * @description
             *
             * Replace an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Investment` object.)
             * </em>
             */
            "replaceOrCreate": {
              url: urlBase + "/investments/replaceOrCreate",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Investment#upsertWithWhere
             * @methodOf lbServices.Investment
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` â€“ `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Investment` object.)
             * </em>
             */
            "upsertWithWhere": {
              url: urlBase + "/investments/upsertWithWhere",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Investment#exists
             * @methodOf lbServices.Investment
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` â€“ `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/investments/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Investment#findById
             * @methodOf lbServices.Investment
             *
             * @description
             *
             * Find a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - Model id
             *
             *  - `filter` â€“ `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Investment` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/investments/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Investment#replaceById
             * @methodOf lbServices.Investment
             *
             * @description
             *
             * Replace attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - Model id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Investment` object.)
             * </em>
             */
            "replaceById": {
              url: urlBase + "/investments/:id/replace",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Investment#find
             * @methodOf lbServices.Investment
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` â€“ `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Investment` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/investments",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Investment#findOne
             * @methodOf lbServices.Investment
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` â€“ `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Investment` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/investments/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Investment#updateAll
             * @methodOf lbServices.Investment
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` â€“ `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
            "updateAll": {
              url: urlBase + "/investments/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Investment#deleteById
             * @methodOf lbServices.Investment
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Investment` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/investments/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.Investment#count
             * @methodOf lbServices.Investment
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` â€“ `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` â€“ `{number=}` -
             */
            "count": {
              url: urlBase + "/investments/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Investment#prototype$updateAttributes
             * @methodOf lbServices.Investment
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Investment` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/investments/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.Investment#createChangeStream
             * @methodOf lbServices.Investment
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` â€“ `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` â€“ `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/investments/change-stream",
              method: "POST",
            },

            // INTERNAL. Use News.investment() instead.
            "::get::News::investment": {
              url: urlBase + "/news/:id/investment",
              method: "GET",
            },

            // INTERNAL. Use News.investment.create() instead.
            "::create::News::investment": {
              url: urlBase + "/news/:id/investment",
              method: "POST",
            },

            // INTERNAL. Use News.investment.createMany() instead.
            "::createMany::News::investment": {
              isArray: true,
              url: urlBase + "/news/:id/investment",
              method: "POST",
            },

            // INTERNAL. Use News.investment.update() instead.
            "::update::News::investment": {
              url: urlBase + "/news/:id/investment",
              method: "PUT",
            },

            // INTERNAL. Use News.investment.destroy() instead.
            "::destroy::News::investment": {
              url: urlBase + "/news/:id/investment",
              method: "DELETE",
            },

            // INTERNAL. Use Person.investorPerson.findById() instead.
            "::findById::Person::investorPerson": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/people/:id/investorPerson/:fk",
              method: "GET",
            },

            // INTERNAL. Use Person.investorPerson.destroyById() instead.
            "::destroyById::Person::investorPerson": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/people/:id/investorPerson/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Person.investorPerson.updateById() instead.
            "::updateById::Person::investorPerson": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/people/:id/investorPerson/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Person.investorPerson() instead.
            "::get::Person::investorPerson": {
              isArray: true,
              url: urlBase + "/people/:id/investorPerson",
              method: "GET",
            },

            // INTERNAL. Use Person.investorPerson.create() instead.
            "::create::Person::investorPerson": {
              url: urlBase + "/people/:id/investorPerson",
              method: "POST",
            },

            // INTERNAL. Use Person.investorPerson.createMany() instead.
            "::createMany::Person::investorPerson": {
              isArray: true,
              url: urlBase + "/people/:id/investorPerson",
              method: "POST",
            },

            // INTERNAL. Use Person.investorPerson.destroyAll() instead.
            "::delete::Person::investorPerson": {
              url: urlBase + "/people/:id/investorPerson",
              method: "DELETE",
            },

            // INTERNAL. Use Person.investorPerson.count() instead.
            "::count::Person::investorPerson": {
              url: urlBase + "/people/:id/investorPerson/count",
              method: "GET",
            },

            // INTERNAL. Use Company.investee.findById() instead.
            "::findById::Company::investee": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/companies/:id/investee/:fk",
              method: "GET",
            },

            // INTERNAL. Use Company.investee.destroyById() instead.
            "::destroyById::Company::investee": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/companies/:id/investee/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Company.investee.updateById() instead.
            "::updateById::Company::investee": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/companies/:id/investee/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Company.investee() instead.
            "::get::Company::investee": {
              isArray: true,
              url: urlBase + "/companies/:id/investee",
              method: "GET",
            },

            // INTERNAL. Use Company.investee.create() instead.
            "::create::Company::investee": {
              url: urlBase + "/companies/:id/investee",
              method: "POST",
            },

            // INTERNAL. Use Company.investee.createMany() instead.
            "::createMany::Company::investee": {
              isArray: true,
              url: urlBase + "/companies/:id/investee",
              method: "POST",
            },

            // INTERNAL. Use Company.investee.destroyAll() instead.
            "::delete::Company::investee": {
              url: urlBase + "/companies/:id/investee",
              method: "DELETE",
            },

            // INTERNAL. Use Company.investee.count() instead.
            "::count::Company::investee": {
              url: urlBase + "/companies/:id/investee/count",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.Investment#patchOrCreate
             * @methodOf lbServices.Investment
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Investment` object.)
             * </em>
             */
        R["patchOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.Investment#updateOrCreate
             * @methodOf lbServices.Investment
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Investment` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.Investment#patchOrCreateWithWhere
             * @methodOf lbServices.Investment
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` â€“ `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Investment` object.)
             * </em>
             */
        R["patchOrCreateWithWhere"] = R["upsertWithWhere"];

            /**
             * @ngdoc method
             * @name lbServices.Investment#update
             * @methodOf lbServices.Investment
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` â€“ `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.Investment#destroyById
             * @methodOf lbServices.Investment
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Investment` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.Investment#removeById
             * @methodOf lbServices.Investment
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Investment` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.Investment#patchAttributes
             * @methodOf lbServices.Investment
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Investment` object.)
             * </em>
             */
        R["patchAttributes"] = R["prototype$updateAttributes"];


        /**
        * @ngdoc property
        * @name lbServices.Investment#modelName
        * @propertyOf lbServices.Investment
        * @description
        * The name of the model represented by this $resource,
        * i.e. `Investment`.
        */
        R.modelName = "Investment";


            /**
             * @ngdoc method
             * @name lbServices.Investment#news
             * @methodOf lbServices.Investment
             *
             * @description
             *
             * Fetches belongsTo relation news.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - PersistedModel id
             *
             *  - `refresh` â€“ `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `News` object.)
             * </em>
             */
        R.news = function() {
          var TargetResource = $injector.get("News");
          var action = TargetResource["::get::Investment::news"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.Investment.investorPerson
     * @header lbServices.Investment.investorPerson
     * @object
     * @description
     *
     * The object `Investment.investorPerson` groups methods
     * manipulating `Person` instances related to `Investment`.
     *
     * Call {@link lbServices.Investment#investorPerson Investment.investorPerson()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.Investment#investorPerson
             * @methodOf lbServices.Investment
             *
             * @description
             *
             * Queries investorPerson of investment.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - PersistedModel id
             *
             *  - `filter` â€“ `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Person` object.)
             * </em>
             */
        R.investorPerson = function() {
          var TargetResource = $injector.get("Person");
          var action = TargetResource["::get::Investment::investorPerson"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Investment.investorPerson#count
             * @methodOf lbServices.Investment.investorPerson
             *
             * @description
             *
             * Counts investorPerson of investment.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - PersistedModel id
             *
             *  - `where` â€“ `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` â€“ `{number=}` -
             */
        R.investorPerson.count = function() {
          var TargetResource = $injector.get("Person");
          var action = TargetResource["::count::Investment::investorPerson"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Investment.investorPerson#create
             * @methodOf lbServices.Investment.investorPerson
             *
             * @description
             *
             * Creates a new instance in investorPerson of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Person` object.)
             * </em>
             */
        R.investorPerson.create = function() {
          var TargetResource = $injector.get("Person");
          var action = TargetResource["::create::Investment::investorPerson"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Investment.investorPerson#createMany
             * @methodOf lbServices.Investment.investorPerson
             *
             * @description
             *
             * Creates a new instance in investorPerson of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Person` object.)
             * </em>
             */
        R.investorPerson.createMany = function() {
          var TargetResource = $injector.get("Person");
          var action = TargetResource["::createMany::Investment::investorPerson"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Investment.investorPerson#destroyAll
             * @methodOf lbServices.Investment.investorPerson
             *
             * @description
             *
             * Deletes all investorPerson of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - PersistedModel id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.investorPerson.destroyAll = function() {
          var TargetResource = $injector.get("Person");
          var action = TargetResource["::delete::Investment::investorPerson"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Investment.investorPerson#destroyById
             * @methodOf lbServices.Investment.investorPerson
             *
             * @description
             *
             * Delete a related item by id for investorPerson.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - PersistedModel id
             *
             *  - `fk` â€“ `{*}` - Foreign key for investorPerson
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.investorPerson.destroyById = function() {
          var TargetResource = $injector.get("Person");
          var action = TargetResource["::destroyById::Investment::investorPerson"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Investment.investorPerson#exists
             * @methodOf lbServices.Investment.investorPerson
             *
             * @description
             *
             * Check the existence of investorPerson relation to an item by id.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - PersistedModel id
             *
             *  - `fk` â€“ `{*}` - Foreign key for investorPerson
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Person` object.)
             * </em>
             */
        R.investorPerson.exists = function() {
          var TargetResource = $injector.get("Person");
          var action = TargetResource["::exists::Investment::investorPerson"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Investment.investorPerson#findById
             * @methodOf lbServices.Investment.investorPerson
             *
             * @description
             *
             * Find a related item by id for investorPerson.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - PersistedModel id
             *
             *  - `fk` â€“ `{*}` - Foreign key for investorPerson
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Person` object.)
             * </em>
             */
        R.investorPerson.findById = function() {
          var TargetResource = $injector.get("Person");
          var action = TargetResource["::findById::Investment::investorPerson"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Investment.investorPerson#link
             * @methodOf lbServices.Investment.investorPerson
             *
             * @description
             *
             * Add a related item by id for investorPerson.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - PersistedModel id
             *
             *  - `fk` â€“ `{*}` - Foreign key for investorPerson
             *
             * @param {Object} postData Request data.
             *
             * This method does not accept any data. Supply an empty object.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Person` object.)
             * </em>
             */
        R.investorPerson.link = function() {
          var TargetResource = $injector.get("Person");
          var action = TargetResource["::link::Investment::investorPerson"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Investment.investorPerson#unlink
             * @methodOf lbServices.Investment.investorPerson
             *
             * @description
             *
             * Remove the investorPerson relation to an item by id.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - PersistedModel id
             *
             *  - `fk` â€“ `{*}` - Foreign key for investorPerson
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.investorPerson.unlink = function() {
          var TargetResource = $injector.get("Person");
          var action = TargetResource["::unlink::Investment::investorPerson"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Investment.investorPerson#updateById
             * @methodOf lbServices.Investment.investorPerson
             *
             * @description
             *
             * Update a related item by id for investorPerson.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - PersistedModel id
             *
             *  - `fk` â€“ `{*}` - Foreign key for investorPerson
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Person` object.)
             * </em>
             */
        R.investorPerson.updateById = function() {
          var TargetResource = $injector.get("Person");
          var action = TargetResource["::updateById::Investment::investorPerson"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Investment#investee
             * @methodOf lbServices.Investment
             *
             * @description
             *
             * Fetches belongsTo relation investee.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - PersistedModel id
             *
             *  - `refresh` â€“ `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Company` object.)
             * </em>
             */
        R.investee = function() {
          var TargetResource = $injector.get("Company");
          var action = TargetResource["::get::Investment::investee"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.Investment.investorCompany
     * @header lbServices.Investment.investorCompany
     * @object
     * @description
     *
     * The object `Investment.investorCompany` groups methods
     * manipulating `Company` instances related to `Investment`.
     *
     * Call {@link lbServices.Investment#investorCompany Investment.investorCompany()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.Investment#investorCompany
             * @methodOf lbServices.Investment
             *
             * @description
             *
             * Queries investorCompany of investment.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - PersistedModel id
             *
             *  - `filter` â€“ `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Company` object.)
             * </em>
             */
        R.investorCompany = function() {
          var TargetResource = $injector.get("Company");
          var action = TargetResource["::get::Investment::investorCompany"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Investment.investorCompany#count
             * @methodOf lbServices.Investment.investorCompany
             *
             * @description
             *
             * Counts investorCompany of investment.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - PersistedModel id
             *
             *  - `where` â€“ `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` â€“ `{number=}` -
             */
        R.investorCompany.count = function() {
          var TargetResource = $injector.get("Company");
          var action = TargetResource["::count::Investment::investorCompany"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Investment.investorCompany#create
             * @methodOf lbServices.Investment.investorCompany
             *
             * @description
             *
             * Creates a new instance in investorCompany of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Company` object.)
             * </em>
             */
        R.investorCompany.create = function() {
          var TargetResource = $injector.get("Company");
          var action = TargetResource["::create::Investment::investorCompany"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Investment.investorCompany#createMany
             * @methodOf lbServices.Investment.investorCompany
             *
             * @description
             *
             * Creates a new instance in investorCompany of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Company` object.)
             * </em>
             */
        R.investorCompany.createMany = function() {
          var TargetResource = $injector.get("Company");
          var action = TargetResource["::createMany::Investment::investorCompany"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Investment.investorCompany#destroyAll
             * @methodOf lbServices.Investment.investorCompany
             *
             * @description
             *
             * Deletes all investorCompany of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - PersistedModel id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.investorCompany.destroyAll = function() {
          var TargetResource = $injector.get("Company");
          var action = TargetResource["::delete::Investment::investorCompany"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Investment.investorCompany#destroyById
             * @methodOf lbServices.Investment.investorCompany
             *
             * @description
             *
             * Delete a related item by id for investorCompany.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - PersistedModel id
             *
             *  - `fk` â€“ `{*}` - Foreign key for investorCompany
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.investorCompany.destroyById = function() {
          var TargetResource = $injector.get("Company");
          var action = TargetResource["::destroyById::Investment::investorCompany"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Investment.investorCompany#exists
             * @methodOf lbServices.Investment.investorCompany
             *
             * @description
             *
             * Check the existence of investorCompany relation to an item by id.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - PersistedModel id
             *
             *  - `fk` â€“ `{*}` - Foreign key for investorCompany
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Company` object.)
             * </em>
             */
        R.investorCompany.exists = function() {
          var TargetResource = $injector.get("Company");
          var action = TargetResource["::exists::Investment::investorCompany"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Investment.investorCompany#findById
             * @methodOf lbServices.Investment.investorCompany
             *
             * @description
             *
             * Find a related item by id for investorCompany.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - PersistedModel id
             *
             *  - `fk` â€“ `{*}` - Foreign key for investorCompany
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Company` object.)
             * </em>
             */
        R.investorCompany.findById = function() {
          var TargetResource = $injector.get("Company");
          var action = TargetResource["::findById::Investment::investorCompany"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Investment.investorCompany#link
             * @methodOf lbServices.Investment.investorCompany
             *
             * @description
             *
             * Add a related item by id for investorCompany.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - PersistedModel id
             *
             *  - `fk` â€“ `{*}` - Foreign key for investorCompany
             *
             * @param {Object} postData Request data.
             *
             * This method does not accept any data. Supply an empty object.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Company` object.)
             * </em>
             */
        R.investorCompany.link = function() {
          var TargetResource = $injector.get("Company");
          var action = TargetResource["::link::Investment::investorCompany"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Investment.investorCompany#unlink
             * @methodOf lbServices.Investment.investorCompany
             *
             * @description
             *
             * Remove the investorCompany relation to an item by id.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - PersistedModel id
             *
             *  - `fk` â€“ `{*}` - Foreign key for investorCompany
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.investorCompany.unlink = function() {
          var TargetResource = $injector.get("Company");
          var action = TargetResource["::unlink::Investment::investorCompany"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Investment.investorCompany#updateById
             * @methodOf lbServices.Investment.investorCompany
             *
             * @description
             *
             * Update a related item by id for investorCompany.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - PersistedModel id
             *
             *  - `fk` â€“ `{*}` - Foreign key for investorCompany
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Company` object.)
             * </em>
             */
        R.investorCompany.updateById = function() {
          var TargetResource = $injector.get("Company");
          var action = TargetResource["::updateById::Investment::investorCompany"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.Category
 * @header lbServices.Category
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `Category` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "Category",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector', '$q',
      function(LoopBackResource, LoopBackAuth, $injector, $q) {
        var R = LoopBackResource(
        urlBase + "/categories/:id",
          { 'id': '@id' },
          {

            // INTERNAL. Use Category.categoryChild.findById() instead.
            "prototype$__findById__categoryChild": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/categories/:id/categoryChild/:fk",
              method: "GET",
            },

            // INTERNAL. Use Category.categoryChild.destroyById() instead.
            "prototype$__destroyById__categoryChild": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/categories/:id/categoryChild/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Category.categoryChild.updateById() instead.
            "prototype$__updateById__categoryChild": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/categories/:id/categoryChild/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Category.categoryChild() instead.
            "prototype$__get__categoryChild": {
              isArray: true,
              url: urlBase + "/categories/:id/categoryChild",
              method: "GET",
            },

            // INTERNAL. Use Category.categoryChild.create() instead.
            "prototype$__create__categoryChild": {
              url: urlBase + "/categories/:id/categoryChild",
              method: "POST",
            },

            // INTERNAL. Use Category.categoryChild.destroyAll() instead.
            "prototype$__delete__categoryChild": {
              url: urlBase + "/categories/:id/categoryChild",
              method: "DELETE",
            },

            // INTERNAL. Use Category.categoryChild.count() instead.
            "prototype$__count__categoryChild": {
              url: urlBase + "/categories/:id/categoryChild/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Category#create
             * @methodOf lbServices.Category
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Category` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/categories",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Category#createMany
             * @methodOf lbServices.Category
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Category` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/categories",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Category#upsert
             * @methodOf lbServices.Category
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Category` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/categories",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.Category#replaceOrCreate
             * @methodOf lbServices.Category
             *
             * @description
             *
             * Replace an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Category` object.)
             * </em>
             */
            "replaceOrCreate": {
              url: urlBase + "/categories/replaceOrCreate",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Category#upsertWithWhere
             * @methodOf lbServices.Category
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` â€“ `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Category` object.)
             * </em>
             */
            "upsertWithWhere": {
              url: urlBase + "/categories/upsertWithWhere",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Category#exists
             * @methodOf lbServices.Category
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` â€“ `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/categories/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Category#findById
             * @methodOf lbServices.Category
             *
             * @description
             *
             * Find a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - Model id
             *
             *  - `filter` â€“ `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Category` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/categories/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Category#replaceById
             * @methodOf lbServices.Category
             *
             * @description
             *
             * Replace attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - Model id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Category` object.)
             * </em>
             */
            "replaceById": {
              url: urlBase + "/categories/:id/replace",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Category#find
             * @methodOf lbServices.Category
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` â€“ `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Category` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/categories",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Category#findOne
             * @methodOf lbServices.Category
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` â€“ `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Category` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/categories/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Category#updateAll
             * @methodOf lbServices.Category
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` â€“ `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
            "updateAll": {
              url: urlBase + "/categories/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Category#deleteById
             * @methodOf lbServices.Category
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Category` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/categories/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.Category#count
             * @methodOf lbServices.Category
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` â€“ `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` â€“ `{number=}` -
             */
            "count": {
              url: urlBase + "/categories/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Category#prototype$updateAttributes
             * @methodOf lbServices.Category
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Category` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/categories/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.Category#createChangeStream
             * @methodOf lbServices.Category
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` â€“ `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` â€“ `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/categories/change-stream",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Category#search
             * @methodOf lbServices.Category
             *
             * @description
             *
             * search a person
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `ctx` â€“ `{object=}` -
             *
             *  - `id` â€“ `{string=}` -
             *
             *  - `filter` â€“ `{object=}` -
             *
             *  - `res` â€“ `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Category` object.)
             * </em>
             */
            "search": {
              isArray: true,
              url: urlBase + "/categories/search",
              method: "GET",
            },

            // INTERNAL. Use CategoryChild.category() instead.
            "::get::CategoryChild::category": {
              url: urlBase + "/categoryChildren/:id/category",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.Category#patchOrCreate
             * @methodOf lbServices.Category
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Category` object.)
             * </em>
             */
        R["patchOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.Category#updateOrCreate
             * @methodOf lbServices.Category
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Category` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.Category#patchOrCreateWithWhere
             * @methodOf lbServices.Category
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` â€“ `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Category` object.)
             * </em>
             */
        R["patchOrCreateWithWhere"] = R["upsertWithWhere"];

            /**
             * @ngdoc method
             * @name lbServices.Category#update
             * @methodOf lbServices.Category
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` â€“ `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.Category#destroyById
             * @methodOf lbServices.Category
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Category` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.Category#removeById
             * @methodOf lbServices.Category
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Category` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.Category#patchAttributes
             * @methodOf lbServices.Category
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Category` object.)
             * </em>
             */
        R["patchAttributes"] = R["prototype$updateAttributes"];


        /**
        * @ngdoc property
        * @name lbServices.Category#modelName
        * @propertyOf lbServices.Category
        * @description
        * The name of the model represented by this $resource,
        * i.e. `Category`.
        */
        R.modelName = "Category";

    /**
     * @ngdoc object
     * @name lbServices.Category.categoryChild
     * @header lbServices.Category.categoryChild
     * @object
     * @description
     *
     * The object `Category.categoryChild` groups methods
     * manipulating `CategoryChild` instances related to `Category`.
     *
     * Call {@link lbServices.Category#categoryChild Category.categoryChild()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.Category#categoryChild
             * @methodOf lbServices.Category
             *
             * @description
             *
             * Queries categoryChild of category.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - PersistedModel id
             *
             *  - `filter` â€“ `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `CategoryChild` object.)
             * </em>
             */
        R.categoryChild = function() {
          var TargetResource = $injector.get("CategoryChild");
          var action = TargetResource["::get::Category::categoryChild"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Category.categoryChild#count
             * @methodOf lbServices.Category.categoryChild
             *
             * @description
             *
             * Counts categoryChild of category.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - PersistedModel id
             *
             *  - `where` â€“ `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` â€“ `{number=}` -
             */
        R.categoryChild.count = function() {
          var TargetResource = $injector.get("CategoryChild");
          var action = TargetResource["::count::Category::categoryChild"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Category.categoryChild#create
             * @methodOf lbServices.Category.categoryChild
             *
             * @description
             *
             * Creates a new instance in categoryChild of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `CategoryChild` object.)
             * </em>
             */
        R.categoryChild.create = function() {
          var TargetResource = $injector.get("CategoryChild");
          var action = TargetResource["::create::Category::categoryChild"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Category.categoryChild#createMany
             * @methodOf lbServices.Category.categoryChild
             *
             * @description
             *
             * Creates a new instance in categoryChild of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `CategoryChild` object.)
             * </em>
             */
        R.categoryChild.createMany = function() {
          var TargetResource = $injector.get("CategoryChild");
          var action = TargetResource["::createMany::Category::categoryChild"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Category.categoryChild#destroyAll
             * @methodOf lbServices.Category.categoryChild
             *
             * @description
             *
             * Deletes all categoryChild of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - PersistedModel id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.categoryChild.destroyAll = function() {
          var TargetResource = $injector.get("CategoryChild");
          var action = TargetResource["::delete::Category::categoryChild"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Category.categoryChild#destroyById
             * @methodOf lbServices.Category.categoryChild
             *
             * @description
             *
             * Delete a related item by id for categoryChild.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - PersistedModel id
             *
             *  - `fk` â€“ `{*}` - Foreign key for categoryChild
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.categoryChild.destroyById = function() {
          var TargetResource = $injector.get("CategoryChild");
          var action = TargetResource["::destroyById::Category::categoryChild"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Category.categoryChild#findById
             * @methodOf lbServices.Category.categoryChild
             *
             * @description
             *
             * Find a related item by id for categoryChild.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - PersistedModel id
             *
             *  - `fk` â€“ `{*}` - Foreign key for categoryChild
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `CategoryChild` object.)
             * </em>
             */
        R.categoryChild.findById = function() {
          var TargetResource = $injector.get("CategoryChild");
          var action = TargetResource["::findById::Category::categoryChild"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Category.categoryChild#updateById
             * @methodOf lbServices.Category.categoryChild
             *
             * @description
             *
             * Update a related item by id for categoryChild.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - PersistedModel id
             *
             *  - `fk` â€“ `{*}` - Foreign key for categoryChild
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `CategoryChild` object.)
             * </em>
             */
        R.categoryChild.updateById = function() {
          var TargetResource = $injector.get("CategoryChild");
          var action = TargetResource["::updateById::Category::categoryChild"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.CategoryChild
 * @header lbServices.CategoryChild
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `CategoryChild` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "CategoryChild",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector', '$q',
      function(LoopBackResource, LoopBackAuth, $injector, $q) {
        var R = LoopBackResource(
        urlBase + "/categoryChildren/:id",
          { 'id': '@id' },
          {

            // INTERNAL. Use CategoryChild.category() instead.
            "prototype$__get__category": {
              url: urlBase + "/categoryChildren/:id/category",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.CategoryChild#create
             * @methodOf lbServices.CategoryChild
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `CategoryChild` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/categoryChildren",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.CategoryChild#createMany
             * @methodOf lbServices.CategoryChild
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `CategoryChild` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/categoryChildren",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.CategoryChild#upsert
             * @methodOf lbServices.CategoryChild
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `CategoryChild` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/categoryChildren",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.CategoryChild#replaceOrCreate
             * @methodOf lbServices.CategoryChild
             *
             * @description
             *
             * Replace an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `CategoryChild` object.)
             * </em>
             */
            "replaceOrCreate": {
              url: urlBase + "/categoryChildren/replaceOrCreate",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.CategoryChild#upsertWithWhere
             * @methodOf lbServices.CategoryChild
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` â€“ `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `CategoryChild` object.)
             * </em>
             */
            "upsertWithWhere": {
              url: urlBase + "/categoryChildren/upsertWithWhere",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.CategoryChild#exists
             * @methodOf lbServices.CategoryChild
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` â€“ `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/categoryChildren/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.CategoryChild#findById
             * @methodOf lbServices.CategoryChild
             *
             * @description
             *
             * Find a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - Model id
             *
             *  - `filter` â€“ `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `CategoryChild` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/categoryChildren/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.CategoryChild#replaceById
             * @methodOf lbServices.CategoryChild
             *
             * @description
             *
             * Replace attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - Model id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `CategoryChild` object.)
             * </em>
             */
            "replaceById": {
              url: urlBase + "/categoryChildren/:id/replace",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.CategoryChild#find
             * @methodOf lbServices.CategoryChild
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` â€“ `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `CategoryChild` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/categoryChildren",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.CategoryChild#findOne
             * @methodOf lbServices.CategoryChild
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` â€“ `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `CategoryChild` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/categoryChildren/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.CategoryChild#updateAll
             * @methodOf lbServices.CategoryChild
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` â€“ `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
            "updateAll": {
              url: urlBase + "/categoryChildren/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.CategoryChild#deleteById
             * @methodOf lbServices.CategoryChild
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `CategoryChild` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/categoryChildren/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.CategoryChild#count
             * @methodOf lbServices.CategoryChild
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` â€“ `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` â€“ `{number=}` -
             */
            "count": {
              url: urlBase + "/categoryChildren/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.CategoryChild#prototype$updateAttributes
             * @methodOf lbServices.CategoryChild
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `CategoryChild` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/categoryChildren/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.CategoryChild#createChangeStream
             * @methodOf lbServices.CategoryChild
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` â€“ `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` â€“ `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/categoryChildren/change-stream",
              method: "POST",
            },

            // INTERNAL. Use Category.categoryChild.findById() instead.
            "::findById::Category::categoryChild": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/categories/:id/categoryChild/:fk",
              method: "GET",
            },

            // INTERNAL. Use Category.categoryChild.destroyById() instead.
            "::destroyById::Category::categoryChild": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/categories/:id/categoryChild/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Category.categoryChild.updateById() instead.
            "::updateById::Category::categoryChild": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/categories/:id/categoryChild/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Category.categoryChild() instead.
            "::get::Category::categoryChild": {
              isArray: true,
              url: urlBase + "/categories/:id/categoryChild",
              method: "GET",
            },

            // INTERNAL. Use Category.categoryChild.create() instead.
            "::create::Category::categoryChild": {
              url: urlBase + "/categories/:id/categoryChild",
              method: "POST",
            },

            // INTERNAL. Use Category.categoryChild.createMany() instead.
            "::createMany::Category::categoryChild": {
              isArray: true,
              url: urlBase + "/categories/:id/categoryChild",
              method: "POST",
            },

            // INTERNAL. Use Category.categoryChild.destroyAll() instead.
            "::delete::Category::categoryChild": {
              url: urlBase + "/categories/:id/categoryChild",
              method: "DELETE",
            },

            // INTERNAL. Use Category.categoryChild.count() instead.
            "::count::Category::categoryChild": {
              url: urlBase + "/categories/:id/categoryChild/count",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.CategoryChild#patchOrCreate
             * @methodOf lbServices.CategoryChild
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `CategoryChild` object.)
             * </em>
             */
        R["patchOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.CategoryChild#updateOrCreate
             * @methodOf lbServices.CategoryChild
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `CategoryChild` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.CategoryChild#patchOrCreateWithWhere
             * @methodOf lbServices.CategoryChild
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` â€“ `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `CategoryChild` object.)
             * </em>
             */
        R["patchOrCreateWithWhere"] = R["upsertWithWhere"];

            /**
             * @ngdoc method
             * @name lbServices.CategoryChild#update
             * @methodOf lbServices.CategoryChild
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` â€“ `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.CategoryChild#destroyById
             * @methodOf lbServices.CategoryChild
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `CategoryChild` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.CategoryChild#removeById
             * @methodOf lbServices.CategoryChild
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `CategoryChild` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.CategoryChild#patchAttributes
             * @methodOf lbServices.CategoryChild
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `CategoryChild` object.)
             * </em>
             */
        R["patchAttributes"] = R["prototype$updateAttributes"];


        /**
        * @ngdoc property
        * @name lbServices.CategoryChild#modelName
        * @propertyOf lbServices.CategoryChild
        * @description
        * The name of the model represented by this $resource,
        * i.e. `CategoryChild`.
        */
        R.modelName = "CategoryChild";


            /**
             * @ngdoc method
             * @name lbServices.CategoryChild#category
             * @methodOf lbServices.CategoryChild
             *
             * @description
             *
             * Fetches belongsTo relation category.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - PersistedModel id
             *
             *  - `refresh` â€“ `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Category` object.)
             * </em>
             */
        R.category = function() {
          var TargetResource = $injector.get("Category");
          var action = TargetResource["::get::CategoryChild::category"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.Banner
 * @header lbServices.Banner
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `Banner` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "Banner",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector', '$q',
      function(LoopBackResource, LoopBackAuth, $injector, $q) {
        var R = LoopBackResource(
        urlBase + "/banners/:id",
          { 'id': '@id' },
          {

            // INTERNAL. Use Banner.file() instead.
            "prototype$__get__file": {
              url: urlBase + "/banners/:id/file",
              method: "GET",
            },

            // INTERNAL. Use Banner.file.create() instead.
            "prototype$__create__file": {
              url: urlBase + "/banners/:id/file",
              method: "POST",
            },

            // INTERNAL. Use Banner.file.update() instead.
            "prototype$__update__file": {
              url: urlBase + "/banners/:id/file",
              method: "PUT",
            },

            // INTERNAL. Use Banner.file.destroy() instead.
            "prototype$__destroy__file": {
              url: urlBase + "/banners/:id/file",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.Banner#create
             * @methodOf lbServices.Banner
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Banner` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/banners",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Banner#createMany
             * @methodOf lbServices.Banner
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Banner` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/banners",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Banner#upsert
             * @methodOf lbServices.Banner
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Banner` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/banners",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.Banner#replaceOrCreate
             * @methodOf lbServices.Banner
             *
             * @description
             *
             * Replace an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Banner` object.)
             * </em>
             */
            "replaceOrCreate": {
              url: urlBase + "/banners/replaceOrCreate",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Banner#upsertWithWhere
             * @methodOf lbServices.Banner
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` â€“ `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Banner` object.)
             * </em>
             */
            "upsertWithWhere": {
              url: urlBase + "/banners/upsertWithWhere",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Banner#exists
             * @methodOf lbServices.Banner
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` â€“ `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/banners/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Banner#findById
             * @methodOf lbServices.Banner
             *
             * @description
             *
             * Find a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - Model id
             *
             *  - `filter` â€“ `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Banner` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/banners/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Banner#replaceById
             * @methodOf lbServices.Banner
             *
             * @description
             *
             * Replace attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - Model id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Banner` object.)
             * </em>
             */
            "replaceById": {
              url: urlBase + "/banners/:id/replace",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Banner#find
             * @methodOf lbServices.Banner
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` â€“ `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Banner` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/banners",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Banner#findOne
             * @methodOf lbServices.Banner
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` â€“ `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Banner` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/banners/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Banner#updateAll
             * @methodOf lbServices.Banner
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` â€“ `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
            "updateAll": {
              url: urlBase + "/banners/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Banner#deleteById
             * @methodOf lbServices.Banner
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Banner` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/banners/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.Banner#count
             * @methodOf lbServices.Banner
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` â€“ `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` â€“ `{number=}` -
             */
            "count": {
              url: urlBase + "/banners/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Banner#prototype$updateAttributes
             * @methodOf lbServices.Banner
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Banner` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/banners/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.Banner#createChangeStream
             * @methodOf lbServices.Banner
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` â€“ `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` â€“ `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/banners/change-stream",
              method: "POST",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.Banner#patchOrCreate
             * @methodOf lbServices.Banner
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Banner` object.)
             * </em>
             */
        R["patchOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.Banner#updateOrCreate
             * @methodOf lbServices.Banner
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Banner` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.Banner#patchOrCreateWithWhere
             * @methodOf lbServices.Banner
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` â€“ `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Banner` object.)
             * </em>
             */
        R["patchOrCreateWithWhere"] = R["upsertWithWhere"];

            /**
             * @ngdoc method
             * @name lbServices.Banner#update
             * @methodOf lbServices.Banner
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` â€“ `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.Banner#destroyById
             * @methodOf lbServices.Banner
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Banner` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.Banner#removeById
             * @methodOf lbServices.Banner
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Banner` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.Banner#patchAttributes
             * @methodOf lbServices.Banner
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Banner` object.)
             * </em>
             */
        R["patchAttributes"] = R["prototype$updateAttributes"];


        /**
        * @ngdoc property
        * @name lbServices.Banner#modelName
        * @propertyOf lbServices.Banner
        * @description
        * The name of the model represented by this $resource,
        * i.e. `Banner`.
        */
        R.modelName = "Banner";

    /**
     * @ngdoc object
     * @name lbServices.Banner.file
     * @header lbServices.Banner.file
     * @object
     * @description
     *
     * The object `Banner.file` groups methods
     * manipulating `File` instances related to `Banner`.
     *
     * Call {@link lbServices.Banner#file Banner.file()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.Banner#file
             * @methodOf lbServices.Banner
             *
             * @description
             *
             * Fetches hasOne relation file.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - PersistedModel id
             *
             *  - `refresh` â€“ `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `File` object.)
             * </em>
             */
        R.file = function() {
          var TargetResource = $injector.get("File");
          var action = TargetResource["::get::Banner::file"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Banner.file#create
             * @methodOf lbServices.Banner.file
             *
             * @description
             *
             * Creates a new instance in file of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `File` object.)
             * </em>
             */
        R.file.create = function() {
          var TargetResource = $injector.get("File");
          var action = TargetResource["::create::Banner::file"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Banner.file#createMany
             * @methodOf lbServices.Banner.file
             *
             * @description
             *
             * Creates a new instance in file of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `File` object.)
             * </em>
             */
        R.file.createMany = function() {
          var TargetResource = $injector.get("File");
          var action = TargetResource["::createMany::Banner::file"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Banner.file#destroy
             * @methodOf lbServices.Banner.file
             *
             * @description
             *
             * Deletes file of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - PersistedModel id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.file.destroy = function() {
          var TargetResource = $injector.get("File");
          var action = TargetResource["::destroy::Banner::file"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Banner.file#update
             * @methodOf lbServices.Banner.file
             *
             * @description
             *
             * Update file of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `File` object.)
             * </em>
             */
        R.file.update = function() {
          var TargetResource = $injector.get("File");
          var action = TargetResource["::update::Banner::file"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.Product
 * @header lbServices.Product
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `Product` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "Product",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector', '$q',
      function(LoopBackResource, LoopBackAuth, $injector, $q) {
        var R = LoopBackResource(
        urlBase + "/products/:id",
          { 'id': '@id' },
          {

            // INTERNAL. Use Product.company() instead.
            "prototype$__get__company": {
              url: urlBase + "/products/:id/company",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Product#create
             * @methodOf lbServices.Product
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Product` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/products",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Product#createMany
             * @methodOf lbServices.Product
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Product` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/products",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Product#upsert
             * @methodOf lbServices.Product
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Product` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/products",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.Product#replaceOrCreate
             * @methodOf lbServices.Product
             *
             * @description
             *
             * Replace an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Product` object.)
             * </em>
             */
            "replaceOrCreate": {
              url: urlBase + "/products/replaceOrCreate",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Product#upsertWithWhere
             * @methodOf lbServices.Product
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` â€“ `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Product` object.)
             * </em>
             */
            "upsertWithWhere": {
              url: urlBase + "/products/upsertWithWhere",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Product#exists
             * @methodOf lbServices.Product
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` â€“ `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/products/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Product#findById
             * @methodOf lbServices.Product
             *
             * @description
             *
             * Find a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - Model id
             *
             *  - `filter` â€“ `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Product` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/products/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Product#replaceById
             * @methodOf lbServices.Product
             *
             * @description
             *
             * Replace attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - Model id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Product` object.)
             * </em>
             */
            "replaceById": {
              url: urlBase + "/products/:id/replace",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Product#find
             * @methodOf lbServices.Product
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` â€“ `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Product` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/products",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Product#findOne
             * @methodOf lbServices.Product
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` â€“ `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Product` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/products/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Product#updateAll
             * @methodOf lbServices.Product
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` â€“ `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
            "updateAll": {
              url: urlBase + "/products/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Product#deleteById
             * @methodOf lbServices.Product
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Product` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/products/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.Product#count
             * @methodOf lbServices.Product
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` â€“ `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` â€“ `{number=}` -
             */
            "count": {
              url: urlBase + "/products/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Product#prototype$updateAttributes
             * @methodOf lbServices.Product
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Product` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/products/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.Product#createChangeStream
             * @methodOf lbServices.Product
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` â€“ `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` â€“ `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/products/change-stream",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Product#search
             * @methodOf lbServices.Product
             *
             * @description
             *
             * search a company
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `ctx` â€“ `{object=}` -
             *
             *  - `options` â€“ `{object=}` -
             *
             *  - `res` â€“ `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Product` object.)
             * </em>
             */
            "search": {
              isArray: true,
              url: urlBase + "/products/search",
              method: "GET",
            },

            // INTERNAL. Use News.product.findById() instead.
            "::findById::News::product": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/news/:id/product/:fk",
              method: "GET",
            },

            // INTERNAL. Use News.product.destroyById() instead.
            "::destroyById::News::product": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/news/:id/product/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use News.product.updateById() instead.
            "::updateById::News::product": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/news/:id/product/:fk",
              method: "PUT",
            },

            // INTERNAL. Use News.product.link() instead.
            "::link::News::product": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/news/:id/product/rel/:fk",
              method: "PUT",
            },

            // INTERNAL. Use News.product.unlink() instead.
            "::unlink::News::product": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/news/:id/product/rel/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use News.product.exists() instead.
            "::exists::News::product": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/news/:id/product/rel/:fk",
              method: "HEAD",
            },

            // INTERNAL. Use News.product() instead.
            "::get::News::product": {
              isArray: true,
              url: urlBase + "/news/:id/product",
              method: "GET",
            },

            // INTERNAL. Use News.product.create() instead.
            "::create::News::product": {
              url: urlBase + "/news/:id/product",
              method: "POST",
            },

            // INTERNAL. Use News.product.createMany() instead.
            "::createMany::News::product": {
              isArray: true,
              url: urlBase + "/news/:id/product",
              method: "POST",
            },

            // INTERNAL. Use News.product.destroyAll() instead.
            "::delete::News::product": {
              url: urlBase + "/news/:id/product",
              method: "DELETE",
            },

            // INTERNAL. Use News.product.count() instead.
            "::count::News::product": {
              url: urlBase + "/news/:id/product/count",
              method: "GET",
            },

            // INTERNAL. Use Company.product.findById() instead.
            "::findById::Company::product": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/companies/:id/product/:fk",
              method: "GET",
            },

            // INTERNAL. Use Company.product.destroyById() instead.
            "::destroyById::Company::product": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/companies/:id/product/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Company.product.updateById() instead.
            "::updateById::Company::product": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/companies/:id/product/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Company.product() instead.
            "::get::Company::product": {
              isArray: true,
              url: urlBase + "/companies/:id/product",
              method: "GET",
            },

            // INTERNAL. Use Company.product.create() instead.
            "::create::Company::product": {
              url: urlBase + "/companies/:id/product",
              method: "POST",
            },

            // INTERNAL. Use Company.product.createMany() instead.
            "::createMany::Company::product": {
              isArray: true,
              url: urlBase + "/companies/:id/product",
              method: "POST",
            },

            // INTERNAL. Use Company.product.destroyAll() instead.
            "::delete::Company::product": {
              url: urlBase + "/companies/:id/product",
              method: "DELETE",
            },

            // INTERNAL. Use Company.product.count() instead.
            "::count::Company::product": {
              url: urlBase + "/companies/:id/product/count",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.Product#patchOrCreate
             * @methodOf lbServices.Product
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Product` object.)
             * </em>
             */
        R["patchOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.Product#updateOrCreate
             * @methodOf lbServices.Product
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Product` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.Product#patchOrCreateWithWhere
             * @methodOf lbServices.Product
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` â€“ `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Product` object.)
             * </em>
             */
        R["patchOrCreateWithWhere"] = R["upsertWithWhere"];

            /**
             * @ngdoc method
             * @name lbServices.Product#update
             * @methodOf lbServices.Product
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` â€“ `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.Product#destroyById
             * @methodOf lbServices.Product
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Product` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.Product#removeById
             * @methodOf lbServices.Product
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Product` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.Product#patchAttributes
             * @methodOf lbServices.Product
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Product` object.)
             * </em>
             */
        R["patchAttributes"] = R["prototype$updateAttributes"];


        /**
        * @ngdoc property
        * @name lbServices.Product#modelName
        * @propertyOf lbServices.Product
        * @description
        * The name of the model represented by this $resource,
        * i.e. `Product`.
        */
        R.modelName = "Product";


            /**
             * @ngdoc method
             * @name lbServices.Product#company
             * @methodOf lbServices.Product
             *
             * @description
             *
             * Fetches belongsTo relation company.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - PersistedModel id
             *
             *  - `refresh` â€“ `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Company` object.)
             * </em>
             */
        R.company = function() {
          var TargetResource = $injector.get("Company");
          var action = TargetResource["::get::Product::company"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.Incubation
 * @header lbServices.Incubation
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `Incubation` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "Incubation",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector', '$q',
      function(LoopBackResource, LoopBackAuth, $injector, $q) {
        var R = LoopBackResource(
        urlBase + "/incubations/:id",
          { 'id': '@id' },
          {

            // INTERNAL. Use Incubation.company() instead.
            "prototype$__get__company": {
              url: urlBase + "/incubations/:id/company",
              method: "GET",
            },

            // INTERNAL. Use Incubation.companies.findById() instead.
            "prototype$__findById__companies": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/incubations/:id/companies/:fk",
              method: "GET",
            },

            // INTERNAL. Use Incubation.companies.destroyById() instead.
            "prototype$__destroyById__companies": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/incubations/:id/companies/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Incubation.companies.updateById() instead.
            "prototype$__updateById__companies": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/incubations/:id/companies/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Incubation.companies.link() instead.
            "prototype$__link__companies": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/incubations/:id/companies/rel/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Incubation.companies.unlink() instead.
            "prototype$__unlink__companies": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/incubations/:id/companies/rel/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Incubation.companies.exists() instead.
            "prototype$__exists__companies": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/incubations/:id/companies/rel/:fk",
              method: "HEAD",
            },

            // INTERNAL. Use Incubation.companies() instead.
            "prototype$__get__companies": {
              isArray: true,
              url: urlBase + "/incubations/:id/companies",
              method: "GET",
            },

            // INTERNAL. Use Incubation.companies.create() instead.
            "prototype$__create__companies": {
              url: urlBase + "/incubations/:id/companies",
              method: "POST",
            },

            // INTERNAL. Use Incubation.companies.destroyAll() instead.
            "prototype$__delete__companies": {
              url: urlBase + "/incubations/:id/companies",
              method: "DELETE",
            },

            // INTERNAL. Use Incubation.companies.count() instead.
            "prototype$__count__companies": {
              url: urlBase + "/incubations/:id/companies/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Incubation#create
             * @methodOf lbServices.Incubation
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Incubation` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/incubations",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Incubation#createMany
             * @methodOf lbServices.Incubation
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Incubation` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/incubations",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Incubation#upsert
             * @methodOf lbServices.Incubation
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Incubation` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/incubations",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.Incubation#replaceOrCreate
             * @methodOf lbServices.Incubation
             *
             * @description
             *
             * Replace an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Incubation` object.)
             * </em>
             */
            "replaceOrCreate": {
              url: urlBase + "/incubations/replaceOrCreate",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Incubation#upsertWithWhere
             * @methodOf lbServices.Incubation
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` â€“ `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Incubation` object.)
             * </em>
             */
            "upsertWithWhere": {
              url: urlBase + "/incubations/upsertWithWhere",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Incubation#exists
             * @methodOf lbServices.Incubation
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` â€“ `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/incubations/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Incubation#findById
             * @methodOf lbServices.Incubation
             *
             * @description
             *
             * Find a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - Model id
             *
             *  - `filter` â€“ `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Incubation` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/incubations/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Incubation#replaceById
             * @methodOf lbServices.Incubation
             *
             * @description
             *
             * Replace attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - Model id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Incubation` object.)
             * </em>
             */
            "replaceById": {
              url: urlBase + "/incubations/:id/replace",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Incubation#find
             * @methodOf lbServices.Incubation
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` â€“ `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Incubation` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/incubations",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Incubation#findOne
             * @methodOf lbServices.Incubation
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` â€“ `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Incubation` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/incubations/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Incubation#updateAll
             * @methodOf lbServices.Incubation
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` â€“ `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
            "updateAll": {
              url: urlBase + "/incubations/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Incubation#deleteById
             * @methodOf lbServices.Incubation
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Incubation` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/incubations/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.Incubation#count
             * @methodOf lbServices.Incubation
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` â€“ `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` â€“ `{number=}` -
             */
            "count": {
              url: urlBase + "/incubations/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Incubation#prototype$updateAttributes
             * @methodOf lbServices.Incubation
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Incubation` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/incubations/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.Incubation#createChangeStream
             * @methodOf lbServices.Incubation
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` â€“ `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` â€“ `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/incubations/change-stream",
              method: "POST",
            },

            // INTERNAL. Use Company.incubation.findById() instead.
            "::findById::Company::incubation": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/companies/:id/incubation/:fk",
              method: "GET",
            },

            // INTERNAL. Use Company.incubation.destroyById() instead.
            "::destroyById::Company::incubation": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/companies/:id/incubation/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Company.incubation.updateById() instead.
            "::updateById::Company::incubation": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/companies/:id/incubation/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Company.incubation() instead.
            "::get::Company::incubation": {
              isArray: true,
              url: urlBase + "/companies/:id/incubation",
              method: "GET",
            },

            // INTERNAL. Use Company.incubation.create() instead.
            "::create::Company::incubation": {
              url: urlBase + "/companies/:id/incubation",
              method: "POST",
            },

            // INTERNAL. Use Company.incubation.createMany() instead.
            "::createMany::Company::incubation": {
              isArray: true,
              url: urlBase + "/companies/:id/incubation",
              method: "POST",
            },

            // INTERNAL. Use Company.incubation.destroyAll() instead.
            "::delete::Company::incubation": {
              url: urlBase + "/companies/:id/incubation",
              method: "DELETE",
            },

            // INTERNAL. Use Company.incubation.count() instead.
            "::count::Company::incubation": {
              url: urlBase + "/companies/:id/incubation/count",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.Incubation#patchOrCreate
             * @methodOf lbServices.Incubation
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Incubation` object.)
             * </em>
             */
        R["patchOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.Incubation#updateOrCreate
             * @methodOf lbServices.Incubation
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Incubation` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.Incubation#patchOrCreateWithWhere
             * @methodOf lbServices.Incubation
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` â€“ `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Incubation` object.)
             * </em>
             */
        R["patchOrCreateWithWhere"] = R["upsertWithWhere"];

            /**
             * @ngdoc method
             * @name lbServices.Incubation#update
             * @methodOf lbServices.Incubation
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` â€“ `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.Incubation#destroyById
             * @methodOf lbServices.Incubation
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Incubation` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.Incubation#removeById
             * @methodOf lbServices.Incubation
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Incubation` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.Incubation#patchAttributes
             * @methodOf lbServices.Incubation
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Incubation` object.)
             * </em>
             */
        R["patchAttributes"] = R["prototype$updateAttributes"];


        /**
        * @ngdoc property
        * @name lbServices.Incubation#modelName
        * @propertyOf lbServices.Incubation
        * @description
        * The name of the model represented by this $resource,
        * i.e. `Incubation`.
        */
        R.modelName = "Incubation";


            /**
             * @ngdoc method
             * @name lbServices.Incubation#company
             * @methodOf lbServices.Incubation
             *
             * @description
             *
             * Fetches belongsTo relation company.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - PersistedModel id
             *
             *  - `refresh` â€“ `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Company` object.)
             * </em>
             */
        R.company = function() {
          var TargetResource = $injector.get("Company");
          var action = TargetResource["::get::Incubation::company"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.Incubation.companies
     * @header lbServices.Incubation.companies
     * @object
     * @description
     *
     * The object `Incubation.companies` groups methods
     * manipulating `Company` instances related to `Incubation`.
     *
     * Call {@link lbServices.Incubation#companies Incubation.companies()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.Incubation#companies
             * @methodOf lbServices.Incubation
             *
             * @description
             *
             * Queries companies of incubation.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - PersistedModel id
             *
             *  - `filter` â€“ `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Company` object.)
             * </em>
             */
        R.companies = function() {
          var TargetResource = $injector.get("Company");
          var action = TargetResource["::get::Incubation::companies"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Incubation.companies#count
             * @methodOf lbServices.Incubation.companies
             *
             * @description
             *
             * Counts companies of incubation.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - PersistedModel id
             *
             *  - `where` â€“ `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` â€“ `{number=}` -
             */
        R.companies.count = function() {
          var TargetResource = $injector.get("Company");
          var action = TargetResource["::count::Incubation::companies"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Incubation.companies#create
             * @methodOf lbServices.Incubation.companies
             *
             * @description
             *
             * Creates a new instance in companies of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Company` object.)
             * </em>
             */
        R.companies.create = function() {
          var TargetResource = $injector.get("Company");
          var action = TargetResource["::create::Incubation::companies"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Incubation.companies#createMany
             * @methodOf lbServices.Incubation.companies
             *
             * @description
             *
             * Creates a new instance in companies of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Company` object.)
             * </em>
             */
        R.companies.createMany = function() {
          var TargetResource = $injector.get("Company");
          var action = TargetResource["::createMany::Incubation::companies"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Incubation.companies#destroyAll
             * @methodOf lbServices.Incubation.companies
             *
             * @description
             *
             * Deletes all companies of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - PersistedModel id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.companies.destroyAll = function() {
          var TargetResource = $injector.get("Company");
          var action = TargetResource["::delete::Incubation::companies"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Incubation.companies#destroyById
             * @methodOf lbServices.Incubation.companies
             *
             * @description
             *
             * Delete a related item by id for companies.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - PersistedModel id
             *
             *  - `fk` â€“ `{*}` - Foreign key for companies
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.companies.destroyById = function() {
          var TargetResource = $injector.get("Company");
          var action = TargetResource["::destroyById::Incubation::companies"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Incubation.companies#exists
             * @methodOf lbServices.Incubation.companies
             *
             * @description
             *
             * Check the existence of companies relation to an item by id.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - PersistedModel id
             *
             *  - `fk` â€“ `{*}` - Foreign key for companies
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Company` object.)
             * </em>
             */
        R.companies.exists = function() {
          var TargetResource = $injector.get("Company");
          var action = TargetResource["::exists::Incubation::companies"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Incubation.companies#findById
             * @methodOf lbServices.Incubation.companies
             *
             * @description
             *
             * Find a related item by id for companies.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - PersistedModel id
             *
             *  - `fk` â€“ `{*}` - Foreign key for companies
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Company` object.)
             * </em>
             */
        R.companies.findById = function() {
          var TargetResource = $injector.get("Company");
          var action = TargetResource["::findById::Incubation::companies"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Incubation.companies#link
             * @methodOf lbServices.Incubation.companies
             *
             * @description
             *
             * Add a related item by id for companies.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - PersistedModel id
             *
             *  - `fk` â€“ `{*}` - Foreign key for companies
             *
             * @param {Object} postData Request data.
             *
             * This method does not accept any data. Supply an empty object.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Company` object.)
             * </em>
             */
        R.companies.link = function() {
          var TargetResource = $injector.get("Company");
          var action = TargetResource["::link::Incubation::companies"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Incubation.companies#unlink
             * @methodOf lbServices.Incubation.companies
             *
             * @description
             *
             * Remove the companies relation to an item by id.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - PersistedModel id
             *
             *  - `fk` â€“ `{*}` - Foreign key for companies
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.companies.unlink = function() {
          var TargetResource = $injector.get("Company");
          var action = TargetResource["::unlink::Incubation::companies"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Incubation.companies#updateById
             * @methodOf lbServices.Incubation.companies
             *
             * @description
             *
             * Update a related item by id for companies.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - PersistedModel id
             *
             *  - `fk` â€“ `{*}` - Foreign key for companies
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Company` object.)
             * </em>
             */
        R.companies.updateById = function() {
          var TargetResource = $injector.get("Company");
          var action = TargetResource["::updateById::Incubation::companies"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.Employee
 * @header lbServices.Employee
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `Employee` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "Employee",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector', '$q',
      function(LoopBackResource, LoopBackAuth, $injector, $q) {
        var R = LoopBackResource(
        urlBase + "/employees/:id",
          { 'id': '@id' },
          {

            // INTERNAL. Use Employee.person() instead.
            "prototype$__get__person": {
              url: urlBase + "/employees/:id/person",
              method: "GET",
            },

            // INTERNAL. Use Employee.company() instead.
            "prototype$__get__company": {
              url: urlBase + "/employees/:id/company",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Employee#create
             * @methodOf lbServices.Employee
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Employee` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/employees",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Employee#createMany
             * @methodOf lbServices.Employee
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Employee` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/employees",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Employee#upsert
             * @methodOf lbServices.Employee
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Employee` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/employees",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.Employee#replaceOrCreate
             * @methodOf lbServices.Employee
             *
             * @description
             *
             * Replace an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Employee` object.)
             * </em>
             */
            "replaceOrCreate": {
              url: urlBase + "/employees/replaceOrCreate",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Employee#upsertWithWhere
             * @methodOf lbServices.Employee
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` â€“ `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Employee` object.)
             * </em>
             */
            "upsertWithWhere": {
              url: urlBase + "/employees/upsertWithWhere",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Employee#exists
             * @methodOf lbServices.Employee
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` â€“ `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/employees/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Employee#findById
             * @methodOf lbServices.Employee
             *
             * @description
             *
             * Find a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - Model id
             *
             *  - `filter` â€“ `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Employee` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/employees/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Employee#replaceById
             * @methodOf lbServices.Employee
             *
             * @description
             *
             * Replace attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - Model id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Employee` object.)
             * </em>
             */
            "replaceById": {
              url: urlBase + "/employees/:id/replace",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Employee#find
             * @methodOf lbServices.Employee
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` â€“ `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Employee` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/employees",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Employee#findOne
             * @methodOf lbServices.Employee
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` â€“ `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Employee` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/employees/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Employee#updateAll
             * @methodOf lbServices.Employee
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` â€“ `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
            "updateAll": {
              url: urlBase + "/employees/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Employee#deleteById
             * @methodOf lbServices.Employee
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Employee` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/employees/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.Employee#count
             * @methodOf lbServices.Employee
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` â€“ `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` â€“ `{number=}` -
             */
            "count": {
              url: urlBase + "/employees/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Employee#prototype$updateAttributes
             * @methodOf lbServices.Employee
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Employee` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/employees/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.Employee#createChangeStream
             * @methodOf lbServices.Employee
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` â€“ `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` â€“ `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/employees/change-stream",
              method: "POST",
            },

            // INTERNAL. Use Person.employee.findById() instead.
            "::findById::Person::employee": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/people/:id/employee/:fk",
              method: "GET",
            },

            // INTERNAL. Use Person.employee.destroyById() instead.
            "::destroyById::Person::employee": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/people/:id/employee/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Person.employee.updateById() instead.
            "::updateById::Person::employee": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/people/:id/employee/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Person.employee() instead.
            "::get::Person::employee": {
              isArray: true,
              url: urlBase + "/people/:id/employee",
              method: "GET",
            },

            // INTERNAL. Use Person.employee.create() instead.
            "::create::Person::employee": {
              url: urlBase + "/people/:id/employee",
              method: "POST",
            },

            // INTERNAL. Use Person.employee.createMany() instead.
            "::createMany::Person::employee": {
              isArray: true,
              url: urlBase + "/people/:id/employee",
              method: "POST",
            },

            // INTERNAL. Use Person.employee.destroyAll() instead.
            "::delete::Person::employee": {
              url: urlBase + "/people/:id/employee",
              method: "DELETE",
            },

            // INTERNAL. Use Person.employee.count() instead.
            "::count::Person::employee": {
              url: urlBase + "/people/:id/employee/count",
              method: "GET",
            },

            // INTERNAL. Use Company.employee.findById() instead.
            "::findById::Company::employee": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/companies/:id/employee/:fk",
              method: "GET",
            },

            // INTERNAL. Use Company.employee.destroyById() instead.
            "::destroyById::Company::employee": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/companies/:id/employee/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Company.employee.updateById() instead.
            "::updateById::Company::employee": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/companies/:id/employee/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Company.employee() instead.
            "::get::Company::employee": {
              isArray: true,
              url: urlBase + "/companies/:id/employee",
              method: "GET",
            },

            // INTERNAL. Use Company.employee.create() instead.
            "::create::Company::employee": {
              url: urlBase + "/companies/:id/employee",
              method: "POST",
            },

            // INTERNAL. Use Company.employee.createMany() instead.
            "::createMany::Company::employee": {
              isArray: true,
              url: urlBase + "/companies/:id/employee",
              method: "POST",
            },

            // INTERNAL. Use Company.employee.destroyAll() instead.
            "::delete::Company::employee": {
              url: urlBase + "/companies/:id/employee",
              method: "DELETE",
            },

            // INTERNAL. Use Company.employee.count() instead.
            "::count::Company::employee": {
              url: urlBase + "/companies/:id/employee/count",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.Employee#patchOrCreate
             * @methodOf lbServices.Employee
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Employee` object.)
             * </em>
             */
        R["patchOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.Employee#updateOrCreate
             * @methodOf lbServices.Employee
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Employee` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.Employee#patchOrCreateWithWhere
             * @methodOf lbServices.Employee
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` â€“ `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Employee` object.)
             * </em>
             */
        R["patchOrCreateWithWhere"] = R["upsertWithWhere"];

            /**
             * @ngdoc method
             * @name lbServices.Employee#update
             * @methodOf lbServices.Employee
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` â€“ `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.Employee#destroyById
             * @methodOf lbServices.Employee
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Employee` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.Employee#removeById
             * @methodOf lbServices.Employee
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Employee` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.Employee#patchAttributes
             * @methodOf lbServices.Employee
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Employee` object.)
             * </em>
             */
        R["patchAttributes"] = R["prototype$updateAttributes"];


        /**
        * @ngdoc property
        * @name lbServices.Employee#modelName
        * @propertyOf lbServices.Employee
        * @description
        * The name of the model represented by this $resource,
        * i.e. `Employee`.
        */
        R.modelName = "Employee";


            /**
             * @ngdoc method
             * @name lbServices.Employee#person
             * @methodOf lbServices.Employee
             *
             * @description
             *
             * Fetches belongsTo relation person.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - PersistedModel id
             *
             *  - `refresh` â€“ `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Person` object.)
             * </em>
             */
        R.person = function() {
          var TargetResource = $injector.get("Person");
          var action = TargetResource["::get::Employee::person"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Employee#company
             * @methodOf lbServices.Employee
             *
             * @description
             *
             * Fetches belongsTo relation company.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - PersistedModel id
             *
             *  - `refresh` â€“ `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Company` object.)
             * </em>
             */
        R.company = function() {
          var TargetResource = $injector.get("Company");
          var action = TargetResource["::get::Employee::company"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.Person
 * @header lbServices.Person
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `Person` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "Person",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector', '$q',
      function(LoopBackResource, LoopBackAuth, $injector, $q) {
        var R = LoopBackResource(
        urlBase + "/people/:id",
          { 'id': '@id' },
          {

            // INTERNAL. Use Person.employee.findById() instead.
            "prototype$__findById__employee": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/people/:id/employee/:fk",
              method: "GET",
            },

            // INTERNAL. Use Person.employee.destroyById() instead.
            "prototype$__destroyById__employee": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/people/:id/employee/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Person.employee.updateById() instead.
            "prototype$__updateById__employee": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/people/:id/employee/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Person.investorPerson.findById() instead.
            "prototype$__findById__investorPerson": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/people/:id/investorPerson/:fk",
              method: "GET",
            },

            // INTERNAL. Use Person.investorPerson.destroyById() instead.
            "prototype$__destroyById__investorPerson": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/people/:id/investorPerson/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Person.investorPerson.updateById() instead.
            "prototype$__updateById__investorPerson": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/people/:id/investorPerson/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Person.file.findById() instead.
            "prototype$__findById__file": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/people/:id/file/:fk",
              method: "GET",
            },

            // INTERNAL. Use Person.file.destroyById() instead.
            "prototype$__destroyById__file": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/people/:id/file/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Person.file.updateById() instead.
            "prototype$__updateById__file": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/people/:id/file/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Person.newsPerson.findById() instead.
            "prototype$__findById__newsPerson": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/people/:id/newsPerson/:fk",
              method: "GET",
            },

            // INTERNAL. Use Person.newsPerson.destroyById() instead.
            "prototype$__destroyById__newsPerson": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/people/:id/newsPerson/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Person.newsPerson.updateById() instead.
            "prototype$__updateById__newsPerson": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/people/:id/newsPerson/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Person.thumbnail() instead.
            "prototype$__get__thumbnail": {
              url: urlBase + "/people/:id/thumbnail",
              method: "GET",
            },

            // INTERNAL. Use Person.thumbnail.create() instead.
            "prototype$__create__thumbnail": {
              url: urlBase + "/people/:id/thumbnail",
              method: "POST",
            },

            // INTERNAL. Use Person.thumbnail.update() instead.
            "prototype$__update__thumbnail": {
              url: urlBase + "/people/:id/thumbnail",
              method: "PUT",
            },

            // INTERNAL. Use Person.thumbnail.destroy() instead.
            "prototype$__destroy__thumbnail": {
              url: urlBase + "/people/:id/thumbnail",
              method: "DELETE",
            },

            // INTERNAL. Use Person.employee() instead.
            "prototype$__get__employee": {
              isArray: true,
              url: urlBase + "/people/:id/employee",
              method: "GET",
            },

            // INTERNAL. Use Person.employee.create() instead.
            "prototype$__create__employee": {
              url: urlBase + "/people/:id/employee",
              method: "POST",
            },

            // INTERNAL. Use Person.employee.destroyAll() instead.
            "prototype$__delete__employee": {
              url: urlBase + "/people/:id/employee",
              method: "DELETE",
            },

            // INTERNAL. Use Person.employee.count() instead.
            "prototype$__count__employee": {
              url: urlBase + "/people/:id/employee/count",
              method: "GET",
            },

            // INTERNAL. Use Person.investorPerson() instead.
            "prototype$__get__investorPerson": {
              isArray: true,
              url: urlBase + "/people/:id/investorPerson",
              method: "GET",
            },

            // INTERNAL. Use Person.investorPerson.create() instead.
            "prototype$__create__investorPerson": {
              url: urlBase + "/people/:id/investorPerson",
              method: "POST",
            },

            // INTERNAL. Use Person.investorPerson.destroyAll() instead.
            "prototype$__delete__investorPerson": {
              url: urlBase + "/people/:id/investorPerson",
              method: "DELETE",
            },

            // INTERNAL. Use Person.investorPerson.count() instead.
            "prototype$__count__investorPerson": {
              url: urlBase + "/people/:id/investorPerson/count",
              method: "GET",
            },

            // INTERNAL. Use Person.file() instead.
            "prototype$__get__file": {
              isArray: true,
              url: urlBase + "/people/:id/file",
              method: "GET",
            },

            // INTERNAL. Use Person.file.create() instead.
            "prototype$__create__file": {
              url: urlBase + "/people/:id/file",
              method: "POST",
            },

            // INTERNAL. Use Person.file.destroyAll() instead.
            "prototype$__delete__file": {
              url: urlBase + "/people/:id/file",
              method: "DELETE",
            },

            // INTERNAL. Use Person.file.count() instead.
            "prototype$__count__file": {
              url: urlBase + "/people/:id/file/count",
              method: "GET",
            },

            // INTERNAL. Use Person.newsPerson() instead.
            "prototype$__get__newsPerson": {
              isArray: true,
              url: urlBase + "/people/:id/newsPerson",
              method: "GET",
            },

            // INTERNAL. Use Person.newsPerson.create() instead.
            "prototype$__create__newsPerson": {
              url: urlBase + "/people/:id/newsPerson",
              method: "POST",
            },

            // INTERNAL. Use Person.newsPerson.destroyAll() instead.
            "prototype$__delete__newsPerson": {
              url: urlBase + "/people/:id/newsPerson",
              method: "DELETE",
            },

            // INTERNAL. Use Person.newsPerson.count() instead.
            "prototype$__count__newsPerson": {
              url: urlBase + "/people/:id/newsPerson/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Person#create
             * @methodOf lbServices.Person
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Person` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/people",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Person#createMany
             * @methodOf lbServices.Person
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Person` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/people",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Person#upsert
             * @methodOf lbServices.Person
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Person` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/people",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.Person#replaceOrCreate
             * @methodOf lbServices.Person
             *
             * @description
             *
             * Replace an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Person` object.)
             * </em>
             */
            "replaceOrCreate": {
              url: urlBase + "/people/replaceOrCreate",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Person#upsertWithWhere
             * @methodOf lbServices.Person
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` â€“ `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Person` object.)
             * </em>
             */
            "upsertWithWhere": {
              url: urlBase + "/people/upsertWithWhere",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Person#exists
             * @methodOf lbServices.Person
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` â€“ `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/people/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Person#findById
             * @methodOf lbServices.Person
             *
             * @description
             *
             * Find a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - Model id
             *
             *  - `filter` â€“ `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Person` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/people/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Person#replaceById
             * @methodOf lbServices.Person
             *
             * @description
             *
             * Replace attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - Model id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Person` object.)
             * </em>
             */
            "replaceById": {
              url: urlBase + "/people/:id/replace",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Person#find
             * @methodOf lbServices.Person
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` â€“ `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Person` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/people",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Person#findOne
             * @methodOf lbServices.Person
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` â€“ `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Person` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/people/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Person#updateAll
             * @methodOf lbServices.Person
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` â€“ `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
            "updateAll": {
              url: urlBase + "/people/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Person#deleteById
             * @methodOf lbServices.Person
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Person` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/people/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.Person#count
             * @methodOf lbServices.Person
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` â€“ `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` â€“ `{number=}` -
             */
            "count": {
              url: urlBase + "/people/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Person#prototype$updateAttributes
             * @methodOf lbServices.Person
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Person` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/people/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.Person#createChangeStream
             * @methodOf lbServices.Person
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` â€“ `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` â€“ `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/people/change-stream",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Person#search
             * @methodOf lbServices.Person
             *
             * @description
             *
             * search a person
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `ctx` â€“ `{object=}` -
             *
             *  - `filter` â€“ `{object=}` -
             *
             *  - `res` â€“ `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Person` object.)
             * </em>
             */
            "search": {
              isArray: true,
              url: urlBase + "/people/search",
              method: "GET",
            },

            // INTERNAL. Use File.person() instead.
            "::get::File::person": {
              url: urlBase + "/files/:id/person",
              method: "GET",
            },

            // INTERNAL. Use News.person.findById() instead.
            "::findById::News::person": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/news/:id/person/:fk",
              method: "GET",
            },

            // INTERNAL. Use News.person.destroyById() instead.
            "::destroyById::News::person": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/news/:id/person/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use News.person.updateById() instead.
            "::updateById::News::person": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/news/:id/person/:fk",
              method: "PUT",
            },

            // INTERNAL. Use News.person.link() instead.
            "::link::News::person": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/news/:id/person/rel/:fk",
              method: "PUT",
            },

            // INTERNAL. Use News.person.unlink() instead.
            "::unlink::News::person": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/news/:id/person/rel/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use News.person.exists() instead.
            "::exists::News::person": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/news/:id/person/rel/:fk",
              method: "HEAD",
            },

            // INTERNAL. Use News.person() instead.
            "::get::News::person": {
              isArray: true,
              url: urlBase + "/news/:id/person",
              method: "GET",
            },

            // INTERNAL. Use News.person.create() instead.
            "::create::News::person": {
              url: urlBase + "/news/:id/person",
              method: "POST",
            },

            // INTERNAL. Use News.person.createMany() instead.
            "::createMany::News::person": {
              isArray: true,
              url: urlBase + "/news/:id/person",
              method: "POST",
            },

            // INTERNAL. Use News.person.destroyAll() instead.
            "::delete::News::person": {
              url: urlBase + "/news/:id/person",
              method: "DELETE",
            },

            // INTERNAL. Use News.person.count() instead.
            "::count::News::person": {
              url: urlBase + "/news/:id/person/count",
              method: "GET",
            },

            // INTERNAL. Use Investment.investorPerson.findById() instead.
            "::findById::Investment::investorPerson": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/investments/:id/investorPerson/:fk",
              method: "GET",
            },

            // INTERNAL. Use Investment.investorPerson.destroyById() instead.
            "::destroyById::Investment::investorPerson": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/investments/:id/investorPerson/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Investment.investorPerson.updateById() instead.
            "::updateById::Investment::investorPerson": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/investments/:id/investorPerson/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Investment.investorPerson.link() instead.
            "::link::Investment::investorPerson": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/investments/:id/investorPerson/rel/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Investment.investorPerson.unlink() instead.
            "::unlink::Investment::investorPerson": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/investments/:id/investorPerson/rel/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Investment.investorPerson.exists() instead.
            "::exists::Investment::investorPerson": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/investments/:id/investorPerson/rel/:fk",
              method: "HEAD",
            },

            // INTERNAL. Use Investment.investorPerson() instead.
            "::get::Investment::investorPerson": {
              isArray: true,
              url: urlBase + "/investments/:id/investorPerson",
              method: "GET",
            },

            // INTERNAL. Use Investment.investorPerson.create() instead.
            "::create::Investment::investorPerson": {
              url: urlBase + "/investments/:id/investorPerson",
              method: "POST",
            },

            // INTERNAL. Use Investment.investorPerson.createMany() instead.
            "::createMany::Investment::investorPerson": {
              isArray: true,
              url: urlBase + "/investments/:id/investorPerson",
              method: "POST",
            },

            // INTERNAL. Use Investment.investorPerson.destroyAll() instead.
            "::delete::Investment::investorPerson": {
              url: urlBase + "/investments/:id/investorPerson",
              method: "DELETE",
            },

            // INTERNAL. Use Investment.investorPerson.count() instead.
            "::count::Investment::investorPerson": {
              url: urlBase + "/investments/:id/investorPerson/count",
              method: "GET",
            },

            // INTERNAL. Use Employee.person() instead.
            "::get::Employee::person": {
              url: urlBase + "/employees/:id/person",
              method: "GET",
            },

            // INTERNAL. Use Company.founders.findById() instead.
            "::findById::Company::founders": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/companies/:id/founders/:fk",
              method: "GET",
            },

            // INTERNAL. Use Company.founders.destroyById() instead.
            "::destroyById::Company::founders": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/companies/:id/founders/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Company.founders.updateById() instead.
            "::updateById::Company::founders": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/companies/:id/founders/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Company.founders.link() instead.
            "::link::Company::founders": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/companies/:id/founders/rel/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Company.founders.unlink() instead.
            "::unlink::Company::founders": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/companies/:id/founders/rel/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Company.founders.exists() instead.
            "::exists::Company::founders": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/companies/:id/founders/rel/:fk",
              method: "HEAD",
            },

            // INTERNAL. Use Company.founders() instead.
            "::get::Company::founders": {
              isArray: true,
              url: urlBase + "/companies/:id/founders",
              method: "GET",
            },

            // INTERNAL. Use Company.founders.create() instead.
            "::create::Company::founders": {
              url: urlBase + "/companies/:id/founders",
              method: "POST",
            },

            // INTERNAL. Use Company.founders.createMany() instead.
            "::createMany::Company::founders": {
              isArray: true,
              url: urlBase + "/companies/:id/founders",
              method: "POST",
            },

            // INTERNAL. Use Company.founders.destroyAll() instead.
            "::delete::Company::founders": {
              url: urlBase + "/companies/:id/founders",
              method: "DELETE",
            },

            // INTERNAL. Use Company.founders.count() instead.
            "::count::Company::founders": {
              url: urlBase + "/companies/:id/founders/count",
              method: "GET",
            },

            // INTERNAL. Use NewsPerson.person() instead.
            "::get::NewsPerson::person": {
              url: urlBase + "/newsPeople/:id/person",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.Person#patchOrCreate
             * @methodOf lbServices.Person
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Person` object.)
             * </em>
             */
        R["patchOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.Person#updateOrCreate
             * @methodOf lbServices.Person
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Person` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.Person#patchOrCreateWithWhere
             * @methodOf lbServices.Person
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` â€“ `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Person` object.)
             * </em>
             */
        R["patchOrCreateWithWhere"] = R["upsertWithWhere"];

            /**
             * @ngdoc method
             * @name lbServices.Person#update
             * @methodOf lbServices.Person
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` â€“ `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.Person#destroyById
             * @methodOf lbServices.Person
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Person` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.Person#removeById
             * @methodOf lbServices.Person
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Person` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.Person#patchAttributes
             * @methodOf lbServices.Person
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Person` object.)
             * </em>
             */
        R["patchAttributes"] = R["prototype$updateAttributes"];


        /**
        * @ngdoc property
        * @name lbServices.Person#modelName
        * @propertyOf lbServices.Person
        * @description
        * The name of the model represented by this $resource,
        * i.e. `Person`.
        */
        R.modelName = "Person";

    /**
     * @ngdoc object
     * @name lbServices.Person.employee
     * @header lbServices.Person.employee
     * @object
     * @description
     *
     * The object `Person.employee` groups methods
     * manipulating `Employee` instances related to `Person`.
     *
     * Call {@link lbServices.Person#employee Person.employee()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.Person#employee
             * @methodOf lbServices.Person
             *
             * @description
             *
             * Queries employee of person.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - PersistedModel id
             *
             *  - `filter` â€“ `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Employee` object.)
             * </em>
             */
        R.employee = function() {
          var TargetResource = $injector.get("Employee");
          var action = TargetResource["::get::Person::employee"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Person.employee#count
             * @methodOf lbServices.Person.employee
             *
             * @description
             *
             * Counts employee of person.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - PersistedModel id
             *
             *  - `where` â€“ `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` â€“ `{number=}` -
             */
        R.employee.count = function() {
          var TargetResource = $injector.get("Employee");
          var action = TargetResource["::count::Person::employee"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Person.employee#create
             * @methodOf lbServices.Person.employee
             *
             * @description
             *
             * Creates a new instance in employee of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Employee` object.)
             * </em>
             */
        R.employee.create = function() {
          var TargetResource = $injector.get("Employee");
          var action = TargetResource["::create::Person::employee"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Person.employee#createMany
             * @methodOf lbServices.Person.employee
             *
             * @description
             *
             * Creates a new instance in employee of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Employee` object.)
             * </em>
             */
        R.employee.createMany = function() {
          var TargetResource = $injector.get("Employee");
          var action = TargetResource["::createMany::Person::employee"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Person.employee#destroyAll
             * @methodOf lbServices.Person.employee
             *
             * @description
             *
             * Deletes all employee of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - PersistedModel id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.employee.destroyAll = function() {
          var TargetResource = $injector.get("Employee");
          var action = TargetResource["::delete::Person::employee"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Person.employee#destroyById
             * @methodOf lbServices.Person.employee
             *
             * @description
             *
             * Delete a related item by id for employee.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - PersistedModel id
             *
             *  - `fk` â€“ `{*}` - Foreign key for employee
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.employee.destroyById = function() {
          var TargetResource = $injector.get("Employee");
          var action = TargetResource["::destroyById::Person::employee"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Person.employee#findById
             * @methodOf lbServices.Person.employee
             *
             * @description
             *
             * Find a related item by id for employee.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - PersistedModel id
             *
             *  - `fk` â€“ `{*}` - Foreign key for employee
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Employee` object.)
             * </em>
             */
        R.employee.findById = function() {
          var TargetResource = $injector.get("Employee");
          var action = TargetResource["::findById::Person::employee"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Person.employee#updateById
             * @methodOf lbServices.Person.employee
             *
             * @description
             *
             * Update a related item by id for employee.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - PersistedModel id
             *
             *  - `fk` â€“ `{*}` - Foreign key for employee
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Employee` object.)
             * </em>
             */
        R.employee.updateById = function() {
          var TargetResource = $injector.get("Employee");
          var action = TargetResource["::updateById::Person::employee"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.Person.investorPerson
     * @header lbServices.Person.investorPerson
     * @object
     * @description
     *
     * The object `Person.investorPerson` groups methods
     * manipulating `Investment` instances related to `Person`.
     *
     * Call {@link lbServices.Person#investorPerson Person.investorPerson()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.Person#investorPerson
             * @methodOf lbServices.Person
             *
             * @description
             *
             * Queries investorPerson of person.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - PersistedModel id
             *
             *  - `filter` â€“ `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Investment` object.)
             * </em>
             */
        R.investorPerson = function() {
          var TargetResource = $injector.get("Investment");
          var action = TargetResource["::get::Person::investorPerson"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Person.investorPerson#count
             * @methodOf lbServices.Person.investorPerson
             *
             * @description
             *
             * Counts investorPerson of person.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - PersistedModel id
             *
             *  - `where` â€“ `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` â€“ `{number=}` -
             */
        R.investorPerson.count = function() {
          var TargetResource = $injector.get("Investment");
          var action = TargetResource["::count::Person::investorPerson"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Person.investorPerson#create
             * @methodOf lbServices.Person.investorPerson
             *
             * @description
             *
             * Creates a new instance in investorPerson of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Investment` object.)
             * </em>
             */
        R.investorPerson.create = function() {
          var TargetResource = $injector.get("Investment");
          var action = TargetResource["::create::Person::investorPerson"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Person.investorPerson#createMany
             * @methodOf lbServices.Person.investorPerson
             *
             * @description
             *
             * Creates a new instance in investorPerson of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Investment` object.)
             * </em>
             */
        R.investorPerson.createMany = function() {
          var TargetResource = $injector.get("Investment");
          var action = TargetResource["::createMany::Person::investorPerson"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Person.investorPerson#destroyAll
             * @methodOf lbServices.Person.investorPerson
             *
             * @description
             *
             * Deletes all investorPerson of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - PersistedModel id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.investorPerson.destroyAll = function() {
          var TargetResource = $injector.get("Investment");
          var action = TargetResource["::delete::Person::investorPerson"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Person.investorPerson#destroyById
             * @methodOf lbServices.Person.investorPerson
             *
             * @description
             *
             * Delete a related item by id for investorPerson.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - PersistedModel id
             *
             *  - `fk` â€“ `{*}` - Foreign key for investorPerson
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.investorPerson.destroyById = function() {
          var TargetResource = $injector.get("Investment");
          var action = TargetResource["::destroyById::Person::investorPerson"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Person.investorPerson#findById
             * @methodOf lbServices.Person.investorPerson
             *
             * @description
             *
             * Find a related item by id for investorPerson.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - PersistedModel id
             *
             *  - `fk` â€“ `{*}` - Foreign key for investorPerson
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Investment` object.)
             * </em>
             */
        R.investorPerson.findById = function() {
          var TargetResource = $injector.get("Investment");
          var action = TargetResource["::findById::Person::investorPerson"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Person.investorPerson#updateById
             * @methodOf lbServices.Person.investorPerson
             *
             * @description
             *
             * Update a related item by id for investorPerson.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - PersistedModel id
             *
             *  - `fk` â€“ `{*}` - Foreign key for investorPerson
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Investment` object.)
             * </em>
             */
        R.investorPerson.updateById = function() {
          var TargetResource = $injector.get("Investment");
          var action = TargetResource["::updateById::Person::investorPerson"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.Person.file
     * @header lbServices.Person.file
     * @object
     * @description
     *
     * The object `Person.file` groups methods
     * manipulating `File` instances related to `Person`.
     *
     * Call {@link lbServices.Person#file Person.file()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.Person#file
             * @methodOf lbServices.Person
             *
             * @description
             *
             * Queries file of person.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - PersistedModel id
             *
             *  - `filter` â€“ `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `File` object.)
             * </em>
             */
        R.file = function() {
          var TargetResource = $injector.get("File");
          var action = TargetResource["::get::Person::file"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Person.file#count
             * @methodOf lbServices.Person.file
             *
             * @description
             *
             * Counts file of person.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - PersistedModel id
             *
             *  - `where` â€“ `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` â€“ `{number=}` -
             */
        R.file.count = function() {
          var TargetResource = $injector.get("File");
          var action = TargetResource["::count::Person::file"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Person.file#create
             * @methodOf lbServices.Person.file
             *
             * @description
             *
             * Creates a new instance in file of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `File` object.)
             * </em>
             */
        R.file.create = function() {
          var TargetResource = $injector.get("File");
          var action = TargetResource["::create::Person::file"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Person.file#createMany
             * @methodOf lbServices.Person.file
             *
             * @description
             *
             * Creates a new instance in file of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `File` object.)
             * </em>
             */
        R.file.createMany = function() {
          var TargetResource = $injector.get("File");
          var action = TargetResource["::createMany::Person::file"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Person.file#destroyAll
             * @methodOf lbServices.Person.file
             *
             * @description
             *
             * Deletes all file of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - PersistedModel id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.file.destroyAll = function() {
          var TargetResource = $injector.get("File");
          var action = TargetResource["::delete::Person::file"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Person.file#destroyById
             * @methodOf lbServices.Person.file
             *
             * @description
             *
             * Delete a related item by id for file.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - PersistedModel id
             *
             *  - `fk` â€“ `{*}` - Foreign key for file
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.file.destroyById = function() {
          var TargetResource = $injector.get("File");
          var action = TargetResource["::destroyById::Person::file"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Person.file#findById
             * @methodOf lbServices.Person.file
             *
             * @description
             *
             * Find a related item by id for file.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - PersistedModel id
             *
             *  - `fk` â€“ `{*}` - Foreign key for file
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `File` object.)
             * </em>
             */
        R.file.findById = function() {
          var TargetResource = $injector.get("File");
          var action = TargetResource["::findById::Person::file"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Person.file#updateById
             * @methodOf lbServices.Person.file
             *
             * @description
             *
             * Update a related item by id for file.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - PersistedModel id
             *
             *  - `fk` â€“ `{*}` - Foreign key for file
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `File` object.)
             * </em>
             */
        R.file.updateById = function() {
          var TargetResource = $injector.get("File");
          var action = TargetResource["::updateById::Person::file"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.Person.newsPerson
     * @header lbServices.Person.newsPerson
     * @object
     * @description
     *
     * The object `Person.newsPerson` groups methods
     * manipulating `NewsPerson` instances related to `Person`.
     *
     * Call {@link lbServices.Person#newsPerson Person.newsPerson()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.Person#newsPerson
             * @methodOf lbServices.Person
             *
             * @description
             *
             * Queries newsPerson of person.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - PersistedModel id
             *
             *  - `filter` â€“ `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `NewsPerson` object.)
             * </em>
             */
        R.newsPerson = function() {
          var TargetResource = $injector.get("NewsPerson");
          var action = TargetResource["::get::Person::newsPerson"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Person.newsPerson#count
             * @methodOf lbServices.Person.newsPerson
             *
             * @description
             *
             * Counts newsPerson of person.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - PersistedModel id
             *
             *  - `where` â€“ `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` â€“ `{number=}` -
             */
        R.newsPerson.count = function() {
          var TargetResource = $injector.get("NewsPerson");
          var action = TargetResource["::count::Person::newsPerson"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Person.newsPerson#create
             * @methodOf lbServices.Person.newsPerson
             *
             * @description
             *
             * Creates a new instance in newsPerson of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `NewsPerson` object.)
             * </em>
             */
        R.newsPerson.create = function() {
          var TargetResource = $injector.get("NewsPerson");
          var action = TargetResource["::create::Person::newsPerson"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Person.newsPerson#createMany
             * @methodOf lbServices.Person.newsPerson
             *
             * @description
             *
             * Creates a new instance in newsPerson of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `NewsPerson` object.)
             * </em>
             */
        R.newsPerson.createMany = function() {
          var TargetResource = $injector.get("NewsPerson");
          var action = TargetResource["::createMany::Person::newsPerson"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Person.newsPerson#destroyAll
             * @methodOf lbServices.Person.newsPerson
             *
             * @description
             *
             * Deletes all newsPerson of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - PersistedModel id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.newsPerson.destroyAll = function() {
          var TargetResource = $injector.get("NewsPerson");
          var action = TargetResource["::delete::Person::newsPerson"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Person.newsPerson#destroyById
             * @methodOf lbServices.Person.newsPerson
             *
             * @description
             *
             * Delete a related item by id for newsPerson.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - PersistedModel id
             *
             *  - `fk` â€“ `{*}` - Foreign key for newsPerson
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.newsPerson.destroyById = function() {
          var TargetResource = $injector.get("NewsPerson");
          var action = TargetResource["::destroyById::Person::newsPerson"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Person.newsPerson#findById
             * @methodOf lbServices.Person.newsPerson
             *
             * @description
             *
             * Find a related item by id for newsPerson.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - PersistedModel id
             *
             *  - `fk` â€“ `{*}` - Foreign key for newsPerson
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `NewsPerson` object.)
             * </em>
             */
        R.newsPerson.findById = function() {
          var TargetResource = $injector.get("NewsPerson");
          var action = TargetResource["::findById::Person::newsPerson"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Person.newsPerson#updateById
             * @methodOf lbServices.Person.newsPerson
             *
             * @description
             *
             * Update a related item by id for newsPerson.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - PersistedModel id
             *
             *  - `fk` â€“ `{*}` - Foreign key for newsPerson
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `NewsPerson` object.)
             * </em>
             */
        R.newsPerson.updateById = function() {
          var TargetResource = $injector.get("NewsPerson");
          var action = TargetResource["::updateById::Person::newsPerson"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.Person.thumbnail
     * @header lbServices.Person.thumbnail
     * @object
     * @description
     *
     * The object `Person.thumbnail` groups methods
     * manipulating `Thumbnail` instances related to `Person`.
     *
     * Call {@link lbServices.Person#thumbnail Person.thumbnail()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.Person#thumbnail
             * @methodOf lbServices.Person
             *
             * @description
             *
             * Fetches hasOne relation thumbnail.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - PersistedModel id
             *
             *  - `refresh` â€“ `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Thumbnail` object.)
             * </em>
             */
        R.thumbnail = function() {
          var TargetResource = $injector.get("Thumbnail");
          var action = TargetResource["::get::Person::thumbnail"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Person.thumbnail#create
             * @methodOf lbServices.Person.thumbnail
             *
             * @description
             *
             * Creates a new instance in thumbnail of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Thumbnail` object.)
             * </em>
             */
        R.thumbnail.create = function() {
          var TargetResource = $injector.get("Thumbnail");
          var action = TargetResource["::create::Person::thumbnail"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Person.thumbnail#createMany
             * @methodOf lbServices.Person.thumbnail
             *
             * @description
             *
             * Creates a new instance in thumbnail of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Thumbnail` object.)
             * </em>
             */
        R.thumbnail.createMany = function() {
          var TargetResource = $injector.get("Thumbnail");
          var action = TargetResource["::createMany::Person::thumbnail"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Person.thumbnail#destroy
             * @methodOf lbServices.Person.thumbnail
             *
             * @description
             *
             * Deletes thumbnail of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - PersistedModel id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.thumbnail.destroy = function() {
          var TargetResource = $injector.get("Thumbnail");
          var action = TargetResource["::destroy::Person::thumbnail"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Person.thumbnail#update
             * @methodOf lbServices.Person.thumbnail
             *
             * @description
             *
             * Update thumbnail of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Thumbnail` object.)
             * </em>
             */
        R.thumbnail.update = function() {
          var TargetResource = $injector.get("Thumbnail");
          var action = TargetResource["::update::Person::thumbnail"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.Company
 * @header lbServices.Company
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `Company` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "Company",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector', '$q',
      function(LoopBackResource, LoopBackAuth, $injector, $q) {
        var R = LoopBackResource(
        urlBase + "/companies/:id",
          { 'id': '@id' },
          {

            // INTERNAL. Use Company.product.findById() instead.
            "prototype$__findById__product": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/companies/:id/product/:fk",
              method: "GET",
            },

            // INTERNAL. Use Company.product.destroyById() instead.
            "prototype$__destroyById__product": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/companies/:id/product/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Company.product.updateById() instead.
            "prototype$__updateById__product": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/companies/:id/product/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Company.incubation.findById() instead.
            "prototype$__findById__incubation": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/companies/:id/incubation/:fk",
              method: "GET",
            },

            // INTERNAL. Use Company.incubation.destroyById() instead.
            "prototype$__destroyById__incubation": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/companies/:id/incubation/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Company.incubation.updateById() instead.
            "prototype$__updateById__incubation": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/companies/:id/incubation/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Company.founders.findById() instead.
            "prototype$__findById__founders": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/companies/:id/founders/:fk",
              method: "GET",
            },

            // INTERNAL. Use Company.founders.destroyById() instead.
            "prototype$__destroyById__founders": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/companies/:id/founders/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Company.founders.updateById() instead.
            "prototype$__updateById__founders": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/companies/:id/founders/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Company.founders.link() instead.
            "prototype$__link__founders": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/companies/:id/founders/rel/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Company.founders.unlink() instead.
            "prototype$__unlink__founders": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/companies/:id/founders/rel/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Company.founders.exists() instead.
            "prototype$__exists__founders": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/companies/:id/founders/rel/:fk",
              method: "HEAD",
            },

            // INTERNAL. Use Company.founderPrevs.findById() instead.
            "prototype$__findById__founderPrevs": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/companies/:id/founderPrevs/:fk",
              method: "GET",
            },

            // INTERNAL. Use Company.founderPrevs.destroyById() instead.
            "prototype$__destroyById__founderPrevs": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/companies/:id/founderPrevs/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Company.founderPrevs.updateById() instead.
            "prototype$__updateById__founderPrevs": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/companies/:id/founderPrevs/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Company.founderPrevs.link() instead.
            "prototype$__link__founderPrevs": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/companies/:id/founderPrevs/rel/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Company.founderPrevs.unlink() instead.
            "prototype$__unlink__founderPrevs": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/companies/:id/founderPrevs/rel/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Company.founderPrevs.exists() instead.
            "prototype$__exists__founderPrevs": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/companies/:id/founderPrevs/rel/:fk",
              method: "HEAD",
            },

            // INTERNAL. Use Company.employee.findById() instead.
            "prototype$__findById__employee": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/companies/:id/employee/:fk",
              method: "GET",
            },

            // INTERNAL. Use Company.employee.destroyById() instead.
            "prototype$__destroyById__employee": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/companies/:id/employee/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Company.employee.updateById() instead.
            "prototype$__updateById__employee": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/companies/:id/employee/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Company.ipos.findById() instead.
            "prototype$__findById__ipos": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/companies/:id/ipos/:fk",
              method: "GET",
            },

            // INTERNAL. Use Company.ipos.destroyById() instead.
            "prototype$__destroyById__ipos": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/companies/:id/ipos/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Company.ipos.updateById() instead.
            "prototype$__updateById__ipos": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/companies/:id/ipos/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Company.handover.findById() instead.
            "prototype$__findById__handover": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/companies/:id/handover/:fk",
              method: "GET",
            },

            // INTERNAL. Use Company.handover.destroyById() instead.
            "prototype$__destroyById__handover": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/companies/:id/handover/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Company.handover.updateById() instead.
            "prototype$__updateById__handover": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/companies/:id/handover/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Company.takeover.findById() instead.
            "prototype$__findById__takeover": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/companies/:id/takeover/:fk",
              method: "GET",
            },

            // INTERNAL. Use Company.takeover.destroyById() instead.
            "prototype$__destroyById__takeover": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/companies/:id/takeover/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Company.takeover.updateById() instead.
            "prototype$__updateById__takeover": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/companies/:id/takeover/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Company.investee.findById() instead.
            "prototype$__findById__investee": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/companies/:id/investee/:fk",
              method: "GET",
            },

            // INTERNAL. Use Company.investee.destroyById() instead.
            "prototype$__destroyById__investee": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/companies/:id/investee/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Company.investee.updateById() instead.
            "prototype$__updateById__investee": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/companies/:id/investee/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Company.file.findById() instead.
            "prototype$__findById__file": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/companies/:id/file/:fk",
              method: "GET",
            },

            // INTERNAL. Use Company.file.destroyById() instead.
            "prototype$__destroyById__file": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/companies/:id/file/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Company.file.updateById() instead.
            "prototype$__updateById__file": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/companies/:id/file/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Company.newsCompany.findById() instead.
            "prototype$__findById__newsCompany": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/companies/:id/newsCompany/:fk",
              method: "GET",
            },

            // INTERNAL. Use Company.newsCompany.destroyById() instead.
            "prototype$__destroyById__newsCompany": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/companies/:id/newsCompany/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Company.newsCompany.updateById() instead.
            "prototype$__updateById__newsCompany": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/companies/:id/newsCompany/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Company.thumbnail() instead.
            "prototype$__get__thumbnail": {
              url: urlBase + "/companies/:id/thumbnail",
              method: "GET",
            },

            // INTERNAL. Use Company.thumbnail.create() instead.
            "prototype$__create__thumbnail": {
              url: urlBase + "/companies/:id/thumbnail",
              method: "POST",
            },

            // INTERNAL. Use Company.thumbnail.update() instead.
            "prototype$__update__thumbnail": {
              url: urlBase + "/companies/:id/thumbnail",
              method: "PUT",
            },

            // INTERNAL. Use Company.thumbnail.destroy() instead.
            "prototype$__destroy__thumbnail": {
              url: urlBase + "/companies/:id/thumbnail",
              method: "DELETE",
            },

            // INTERNAL. Use Company.product() instead.
            "prototype$__get__product": {
              isArray: true,
              url: urlBase + "/companies/:id/product",
              method: "GET",
            },

            // INTERNAL. Use Company.product.create() instead.
            "prototype$__create__product": {
              url: urlBase + "/companies/:id/product",
              method: "POST",
            },

            // INTERNAL. Use Company.product.destroyAll() instead.
            "prototype$__delete__product": {
              url: urlBase + "/companies/:id/product",
              method: "DELETE",
            },

            // INTERNAL. Use Company.product.count() instead.
            "prototype$__count__product": {
              url: urlBase + "/companies/:id/product/count",
              method: "GET",
            },

            // INTERNAL. Use Company.incubation() instead.
            "prototype$__get__incubation": {
              isArray: true,
              url: urlBase + "/companies/:id/incubation",
              method: "GET",
            },

            // INTERNAL. Use Company.incubation.create() instead.
            "prototype$__create__incubation": {
              url: urlBase + "/companies/:id/incubation",
              method: "POST",
            },

            // INTERNAL. Use Company.incubation.destroyAll() instead.
            "prototype$__delete__incubation": {
              url: urlBase + "/companies/:id/incubation",
              method: "DELETE",
            },

            // INTERNAL. Use Company.incubation.count() instead.
            "prototype$__count__incubation": {
              url: urlBase + "/companies/:id/incubation/count",
              method: "GET",
            },

            // INTERNAL. Use Company.founders() instead.
            "prototype$__get__founders": {
              isArray: true,
              url: urlBase + "/companies/:id/founders",
              method: "GET",
            },

            // INTERNAL. Use Company.founders.create() instead.
            "prototype$__create__founders": {
              url: urlBase + "/companies/:id/founders",
              method: "POST",
            },

            // INTERNAL. Use Company.founders.destroyAll() instead.
            "prototype$__delete__founders": {
              url: urlBase + "/companies/:id/founders",
              method: "DELETE",
            },

            // INTERNAL. Use Company.founders.count() instead.
            "prototype$__count__founders": {
              url: urlBase + "/companies/:id/founders/count",
              method: "GET",
            },

            // INTERNAL. Use Company.founderPrevs() instead.
            "prototype$__get__founderPrevs": {
              isArray: true,
              url: urlBase + "/companies/:id/founderPrevs",
              method: "GET",
            },

            // INTERNAL. Use Company.founderPrevs.create() instead.
            "prototype$__create__founderPrevs": {
              url: urlBase + "/companies/:id/founderPrevs",
              method: "POST",
            },

            // INTERNAL. Use Company.founderPrevs.destroyAll() instead.
            "prototype$__delete__founderPrevs": {
              url: urlBase + "/companies/:id/founderPrevs",
              method: "DELETE",
            },

            // INTERNAL. Use Company.founderPrevs.count() instead.
            "prototype$__count__founderPrevs": {
              url: urlBase + "/companies/:id/founderPrevs/count",
              method: "GET",
            },

            // INTERNAL. Use Company.employee() instead.
            "prototype$__get__employee": {
              isArray: true,
              url: urlBase + "/companies/:id/employee",
              method: "GET",
            },

            // INTERNAL. Use Company.employee.create() instead.
            "prototype$__create__employee": {
              url: urlBase + "/companies/:id/employee",
              method: "POST",
            },

            // INTERNAL. Use Company.employee.destroyAll() instead.
            "prototype$__delete__employee": {
              url: urlBase + "/companies/:id/employee",
              method: "DELETE",
            },

            // INTERNAL. Use Company.employee.count() instead.
            "prototype$__count__employee": {
              url: urlBase + "/companies/:id/employee/count",
              method: "GET",
            },

            // INTERNAL. Use Company.ipos() instead.
            "prototype$__get__ipos": {
              isArray: true,
              url: urlBase + "/companies/:id/ipos",
              method: "GET",
            },

            // INTERNAL. Use Company.ipos.create() instead.
            "prototype$__create__ipos": {
              url: urlBase + "/companies/:id/ipos",
              method: "POST",
            },

            // INTERNAL. Use Company.ipos.destroyAll() instead.
            "prototype$__delete__ipos": {
              url: urlBase + "/companies/:id/ipos",
              method: "DELETE",
            },

            // INTERNAL. Use Company.ipos.count() instead.
            "prototype$__count__ipos": {
              url: urlBase + "/companies/:id/ipos/count",
              method: "GET",
            },

            // INTERNAL. Use Company.handover() instead.
            "prototype$__get__handover": {
              isArray: true,
              url: urlBase + "/companies/:id/handover",
              method: "GET",
            },

            // INTERNAL. Use Company.handover.create() instead.
            "prototype$__create__handover": {
              url: urlBase + "/companies/:id/handover",
              method: "POST",
            },

            // INTERNAL. Use Company.handover.destroyAll() instead.
            "prototype$__delete__handover": {
              url: urlBase + "/companies/:id/handover",
              method: "DELETE",
            },

            // INTERNAL. Use Company.handover.count() instead.
            "prototype$__count__handover": {
              url: urlBase + "/companies/:id/handover/count",
              method: "GET",
            },

            // INTERNAL. Use Company.takeover() instead.
            "prototype$__get__takeover": {
              isArray: true,
              url: urlBase + "/companies/:id/takeover",
              method: "GET",
            },

            // INTERNAL. Use Company.takeover.create() instead.
            "prototype$__create__takeover": {
              url: urlBase + "/companies/:id/takeover",
              method: "POST",
            },

            // INTERNAL. Use Company.takeover.destroyAll() instead.
            "prototype$__delete__takeover": {
              url: urlBase + "/companies/:id/takeover",
              method: "DELETE",
            },

            // INTERNAL. Use Company.takeover.count() instead.
            "prototype$__count__takeover": {
              url: urlBase + "/companies/:id/takeover/count",
              method: "GET",
            },

            // INTERNAL. Use Company.investee() instead.
            "prototype$__get__investee": {
              isArray: true,
              url: urlBase + "/companies/:id/investee",
              method: "GET",
            },

            // INTERNAL. Use Company.investee.create() instead.
            "prototype$__create__investee": {
              url: urlBase + "/companies/:id/investee",
              method: "POST",
            },

            // INTERNAL. Use Company.investee.destroyAll() instead.
            "prototype$__delete__investee": {
              url: urlBase + "/companies/:id/investee",
              method: "DELETE",
            },

            // INTERNAL. Use Company.investee.count() instead.
            "prototype$__count__investee": {
              url: urlBase + "/companies/:id/investee/count",
              method: "GET",
            },

            // INTERNAL. Use Company.file() instead.
            "prototype$__get__file": {
              isArray: true,
              url: urlBase + "/companies/:id/file",
              method: "GET",
            },

            // INTERNAL. Use Company.file.create() instead.
            "prototype$__create__file": {
              url: urlBase + "/companies/:id/file",
              method: "POST",
            },

            // INTERNAL. Use Company.file.destroyAll() instead.
            "prototype$__delete__file": {
              url: urlBase + "/companies/:id/file",
              method: "DELETE",
            },

            // INTERNAL. Use Company.file.count() instead.
            "prototype$__count__file": {
              url: urlBase + "/companies/:id/file/count",
              method: "GET",
            },

            // INTERNAL. Use Company.newsCompany() instead.
            "prototype$__get__newsCompany": {
              isArray: true,
              url: urlBase + "/companies/:id/newsCompany",
              method: "GET",
            },

            // INTERNAL. Use Company.newsCompany.create() instead.
            "prototype$__create__newsCompany": {
              url: urlBase + "/companies/:id/newsCompany",
              method: "POST",
            },

            // INTERNAL. Use Company.newsCompany.destroyAll() instead.
            "prototype$__delete__newsCompany": {
              url: urlBase + "/companies/:id/newsCompany",
              method: "DELETE",
            },

            // INTERNAL. Use Company.newsCompany.count() instead.
            "prototype$__count__newsCompany": {
              url: urlBase + "/companies/:id/newsCompany/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Company#create
             * @methodOf lbServices.Company
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Company` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/companies",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Company#createMany
             * @methodOf lbServices.Company
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Company` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/companies",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Company#upsert
             * @methodOf lbServices.Company
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Company` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/companies",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.Company#replaceOrCreate
             * @methodOf lbServices.Company
             *
             * @description
             *
             * Replace an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Company` object.)
             * </em>
             */
            "replaceOrCreate": {
              url: urlBase + "/companies/replaceOrCreate",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Company#upsertWithWhere
             * @methodOf lbServices.Company
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` â€“ `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Company` object.)
             * </em>
             */
            "upsertWithWhere": {
              url: urlBase + "/companies/upsertWithWhere",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Company#exists
             * @methodOf lbServices.Company
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` â€“ `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/companies/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Company#findById
             * @methodOf lbServices.Company
             *
             * @description
             *
             * Find a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - Model id
             *
             *  - `filter` â€“ `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Company` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/companies/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Company#replaceById
             * @methodOf lbServices.Company
             *
             * @description
             *
             * Replace attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - Model id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Company` object.)
             * </em>
             */
            "replaceById": {
              url: urlBase + "/companies/:id/replace",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Company#find
             * @methodOf lbServices.Company
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` â€“ `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Company` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/companies",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Company#findOne
             * @methodOf lbServices.Company
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` â€“ `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Company` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/companies/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Company#updateAll
             * @methodOf lbServices.Company
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` â€“ `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
            "updateAll": {
              url: urlBase + "/companies/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Company#deleteById
             * @methodOf lbServices.Company
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Company` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/companies/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.Company#count
             * @methodOf lbServices.Company
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` â€“ `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` â€“ `{number=}` -
             */
            "count": {
              url: urlBase + "/companies/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Company#prototype$updateAttributes
             * @methodOf lbServices.Company
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Company` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/companies/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.Company#createChangeStream
             * @methodOf lbServices.Company
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` â€“ `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` â€“ `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/companies/change-stream",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Company#search
             * @methodOf lbServices.Company
             *
             * @description
             *
             * search a company
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `ctx` â€“ `{object=}` -
             *
             *  - `options` â€“ `{object=}` -
             *
             *  - `res` â€“ `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Company` object.)
             * </em>
             */
            "search": {
              isArray: true,
              url: urlBase + "/companies/search",
              method: "GET",
            },

            // INTERNAL. Use File.company() instead.
            "::get::File::company": {
              url: urlBase + "/files/:id/company",
              method: "GET",
            },

            // INTERNAL. Use Business.organizations.findById() instead.
            "::findById::Business::organizations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/businesses/:id/organizations/:fk",
              method: "GET",
            },

            // INTERNAL. Use Business.organizations.destroyById() instead.
            "::destroyById::Business::organizations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/businesses/:id/organizations/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Business.organizations.updateById() instead.
            "::updateById::Business::organizations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/businesses/:id/organizations/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Business.organizations.link() instead.
            "::link::Business::organizations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/businesses/:id/organizations/rel/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Business.organizations.unlink() instead.
            "::unlink::Business::organizations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/businesses/:id/organizations/rel/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Business.organizations.exists() instead.
            "::exists::Business::organizations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/businesses/:id/organizations/rel/:fk",
              method: "HEAD",
            },

            // INTERNAL. Use Business.organizations() instead.
            "::get::Business::organizations": {
              isArray: true,
              url: urlBase + "/businesses/:id/organizations",
              method: "GET",
            },

            // INTERNAL. Use Business.organizations.create() instead.
            "::create::Business::organizations": {
              url: urlBase + "/businesses/:id/organizations",
              method: "POST",
            },

            // INTERNAL. Use Business.organizations.createMany() instead.
            "::createMany::Business::organizations": {
              isArray: true,
              url: urlBase + "/businesses/:id/organizations",
              method: "POST",
            },

            // INTERNAL. Use Business.organizations.destroyAll() instead.
            "::delete::Business::organizations": {
              url: urlBase + "/businesses/:id/organizations",
              method: "DELETE",
            },

            // INTERNAL. Use Business.organizations.count() instead.
            "::count::Business::organizations": {
              url: urlBase + "/businesses/:id/organizations/count",
              method: "GET",
            },

            // INTERNAL. Use News.company.findById() instead.
            "::findById::News::company": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/news/:id/company/:fk",
              method: "GET",
            },

            // INTERNAL. Use News.company.destroyById() instead.
            "::destroyById::News::company": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/news/:id/company/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use News.company.updateById() instead.
            "::updateById::News::company": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/news/:id/company/:fk",
              method: "PUT",
            },

            // INTERNAL. Use News.company.link() instead.
            "::link::News::company": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/news/:id/company/rel/:fk",
              method: "PUT",
            },

            // INTERNAL. Use News.company.unlink() instead.
            "::unlink::News::company": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/news/:id/company/rel/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use News.company.exists() instead.
            "::exists::News::company": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/news/:id/company/rel/:fk",
              method: "HEAD",
            },

            // INTERNAL. Use News.company() instead.
            "::get::News::company": {
              isArray: true,
              url: urlBase + "/news/:id/company",
              method: "GET",
            },

            // INTERNAL. Use News.company.create() instead.
            "::create::News::company": {
              url: urlBase + "/news/:id/company",
              method: "POST",
            },

            // INTERNAL. Use News.company.createMany() instead.
            "::createMany::News::company": {
              isArray: true,
              url: urlBase + "/news/:id/company",
              method: "POST",
            },

            // INTERNAL. Use News.company.destroyAll() instead.
            "::delete::News::company": {
              url: urlBase + "/news/:id/company",
              method: "DELETE",
            },

            // INTERNAL. Use News.company.count() instead.
            "::count::News::company": {
              url: urlBase + "/news/:id/company/count",
              method: "GET",
            },

            // INTERNAL. Use Ipo.company() instead.
            "::get::Ipo::company": {
              url: urlBase + "/ipos/:id/company",
              method: "GET",
            },

            // INTERNAL. Use Mna.takeover() instead.
            "::get::Mna::takeover": {
              url: urlBase + "/mnas/:id/takeover",
              method: "GET",
            },

            // INTERNAL. Use Mna.handover() instead.
            "::get::Mna::handover": {
              url: urlBase + "/mnas/:id/handover",
              method: "GET",
            },

            // INTERNAL. Use Investment.investee() instead.
            "::get::Investment::investee": {
              url: urlBase + "/investments/:id/investee",
              method: "GET",
            },

            // INTERNAL. Use Investment.investorCompany.findById() instead.
            "::findById::Investment::investorCompany": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/investments/:id/investorCompany/:fk",
              method: "GET",
            },

            // INTERNAL. Use Investment.investorCompany.destroyById() instead.
            "::destroyById::Investment::investorCompany": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/investments/:id/investorCompany/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Investment.investorCompany.updateById() instead.
            "::updateById::Investment::investorCompany": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/investments/:id/investorCompany/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Investment.investorCompany.link() instead.
            "::link::Investment::investorCompany": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/investments/:id/investorCompany/rel/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Investment.investorCompany.unlink() instead.
            "::unlink::Investment::investorCompany": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/investments/:id/investorCompany/rel/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Investment.investorCompany.exists() instead.
            "::exists::Investment::investorCompany": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/investments/:id/investorCompany/rel/:fk",
              method: "HEAD",
            },

            // INTERNAL. Use Investment.investorCompany() instead.
            "::get::Investment::investorCompany": {
              isArray: true,
              url: urlBase + "/investments/:id/investorCompany",
              method: "GET",
            },

            // INTERNAL. Use Investment.investorCompany.create() instead.
            "::create::Investment::investorCompany": {
              url: urlBase + "/investments/:id/investorCompany",
              method: "POST",
            },

            // INTERNAL. Use Investment.investorCompany.createMany() instead.
            "::createMany::Investment::investorCompany": {
              isArray: true,
              url: urlBase + "/investments/:id/investorCompany",
              method: "POST",
            },

            // INTERNAL. Use Investment.investorCompany.destroyAll() instead.
            "::delete::Investment::investorCompany": {
              url: urlBase + "/investments/:id/investorCompany",
              method: "DELETE",
            },

            // INTERNAL. Use Investment.investorCompany.count() instead.
            "::count::Investment::investorCompany": {
              url: urlBase + "/investments/:id/investorCompany/count",
              method: "GET",
            },

            // INTERNAL. Use Product.company() instead.
            "::get::Product::company": {
              url: urlBase + "/products/:id/company",
              method: "GET",
            },

            // INTERNAL. Use Incubation.company() instead.
            "::get::Incubation::company": {
              url: urlBase + "/incubations/:id/company",
              method: "GET",
            },

            // INTERNAL. Use Incubation.companies.findById() instead.
            "::findById::Incubation::companies": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/incubations/:id/companies/:fk",
              method: "GET",
            },

            // INTERNAL. Use Incubation.companies.destroyById() instead.
            "::destroyById::Incubation::companies": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/incubations/:id/companies/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Incubation.companies.updateById() instead.
            "::updateById::Incubation::companies": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/incubations/:id/companies/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Incubation.companies.link() instead.
            "::link::Incubation::companies": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/incubations/:id/companies/rel/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Incubation.companies.unlink() instead.
            "::unlink::Incubation::companies": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/incubations/:id/companies/rel/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Incubation.companies.exists() instead.
            "::exists::Incubation::companies": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/incubations/:id/companies/rel/:fk",
              method: "HEAD",
            },

            // INTERNAL. Use Incubation.companies() instead.
            "::get::Incubation::companies": {
              isArray: true,
              url: urlBase + "/incubations/:id/companies",
              method: "GET",
            },

            // INTERNAL. Use Incubation.companies.create() instead.
            "::create::Incubation::companies": {
              url: urlBase + "/incubations/:id/companies",
              method: "POST",
            },

            // INTERNAL. Use Incubation.companies.createMany() instead.
            "::createMany::Incubation::companies": {
              isArray: true,
              url: urlBase + "/incubations/:id/companies",
              method: "POST",
            },

            // INTERNAL. Use Incubation.companies.destroyAll() instead.
            "::delete::Incubation::companies": {
              url: urlBase + "/incubations/:id/companies",
              method: "DELETE",
            },

            // INTERNAL. Use Incubation.companies.count() instead.
            "::count::Incubation::companies": {
              url: urlBase + "/incubations/:id/companies/count",
              method: "GET",
            },

            // INTERNAL. Use Employee.company() instead.
            "::get::Employee::company": {
              url: urlBase + "/employees/:id/company",
              method: "GET",
            },

            // INTERNAL. Use Company.founderPrevs.findById() instead.
            "::findById::Company::founderPrevs": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/companies/:id/founderPrevs/:fk",
              method: "GET",
            },

            // INTERNAL. Use Company.founderPrevs.destroyById() instead.
            "::destroyById::Company::founderPrevs": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/companies/:id/founderPrevs/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Company.founderPrevs.updateById() instead.
            "::updateById::Company::founderPrevs": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/companies/:id/founderPrevs/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Company.founderPrevs.link() instead.
            "::link::Company::founderPrevs": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/companies/:id/founderPrevs/rel/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Company.founderPrevs.unlink() instead.
            "::unlink::Company::founderPrevs": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/companies/:id/founderPrevs/rel/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Company.founderPrevs.exists() instead.
            "::exists::Company::founderPrevs": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/companies/:id/founderPrevs/rel/:fk",
              method: "HEAD",
            },

            // INTERNAL. Use Company.founderPrevs() instead.
            "::get::Company::founderPrevs": {
              isArray: true,
              url: urlBase + "/companies/:id/founderPrevs",
              method: "GET",
            },

            // INTERNAL. Use Company.founderPrevs.create() instead.
            "::create::Company::founderPrevs": {
              url: urlBase + "/companies/:id/founderPrevs",
              method: "POST",
            },

            // INTERNAL. Use Company.founderPrevs.createMany() instead.
            "::createMany::Company::founderPrevs": {
              isArray: true,
              url: urlBase + "/companies/:id/founderPrevs",
              method: "POST",
            },

            // INTERNAL. Use Company.founderPrevs.destroyAll() instead.
            "::delete::Company::founderPrevs": {
              url: urlBase + "/companies/:id/founderPrevs",
              method: "DELETE",
            },

            // INTERNAL. Use Company.founderPrevs.count() instead.
            "::count::Company::founderPrevs": {
              url: urlBase + "/companies/:id/founderPrevs/count",
              method: "GET",
            },

            // INTERNAL. Use NewsCompany.company() instead.
            "::get::NewsCompany::company": {
              url: urlBase + "/newsCompanies/:id/company",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.Company#patchOrCreate
             * @methodOf lbServices.Company
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Company` object.)
             * </em>
             */
        R["patchOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.Company#updateOrCreate
             * @methodOf lbServices.Company
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Company` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.Company#patchOrCreateWithWhere
             * @methodOf lbServices.Company
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` â€“ `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Company` object.)
             * </em>
             */
        R["patchOrCreateWithWhere"] = R["upsertWithWhere"];

            /**
             * @ngdoc method
             * @name lbServices.Company#update
             * @methodOf lbServices.Company
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` â€“ `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.Company#destroyById
             * @methodOf lbServices.Company
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Company` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.Company#removeById
             * @methodOf lbServices.Company
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Company` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.Company#patchAttributes
             * @methodOf lbServices.Company
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Company` object.)
             * </em>
             */
        R["patchAttributes"] = R["prototype$updateAttributes"];


        /**
        * @ngdoc property
        * @name lbServices.Company#modelName
        * @propertyOf lbServices.Company
        * @description
        * The name of the model represented by this $resource,
        * i.e. `Company`.
        */
        R.modelName = "Company";

    /**
     * @ngdoc object
     * @name lbServices.Company.product
     * @header lbServices.Company.product
     * @object
     * @description
     *
     * The object `Company.product` groups methods
     * manipulating `Product` instances related to `Company`.
     *
     * Call {@link lbServices.Company#product Company.product()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.Company#product
             * @methodOf lbServices.Company
             *
             * @description
             *
             * Queries product of company.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - PersistedModel id
             *
             *  - `filter` â€“ `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Product` object.)
             * </em>
             */
        R.product = function() {
          var TargetResource = $injector.get("Product");
          var action = TargetResource["::get::Company::product"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Company.product#count
             * @methodOf lbServices.Company.product
             *
             * @description
             *
             * Counts product of company.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - PersistedModel id
             *
             *  - `where` â€“ `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` â€“ `{number=}` -
             */
        R.product.count = function() {
          var TargetResource = $injector.get("Product");
          var action = TargetResource["::count::Company::product"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Company.product#create
             * @methodOf lbServices.Company.product
             *
             * @description
             *
             * Creates a new instance in product of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Product` object.)
             * </em>
             */
        R.product.create = function() {
          var TargetResource = $injector.get("Product");
          var action = TargetResource["::create::Company::product"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Company.product#createMany
             * @methodOf lbServices.Company.product
             *
             * @description
             *
             * Creates a new instance in product of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Product` object.)
             * </em>
             */
        R.product.createMany = function() {
          var TargetResource = $injector.get("Product");
          var action = TargetResource["::createMany::Company::product"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Company.product#destroyAll
             * @methodOf lbServices.Company.product
             *
             * @description
             *
             * Deletes all product of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - PersistedModel id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.product.destroyAll = function() {
          var TargetResource = $injector.get("Product");
          var action = TargetResource["::delete::Company::product"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Company.product#destroyById
             * @methodOf lbServices.Company.product
             *
             * @description
             *
             * Delete a related item by id for product.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - PersistedModel id
             *
             *  - `fk` â€“ `{*}` - Foreign key for product
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.product.destroyById = function() {
          var TargetResource = $injector.get("Product");
          var action = TargetResource["::destroyById::Company::product"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Company.product#findById
             * @methodOf lbServices.Company.product
             *
             * @description
             *
             * Find a related item by id for product.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - PersistedModel id
             *
             *  - `fk` â€“ `{*}` - Foreign key for product
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Product` object.)
             * </em>
             */
        R.product.findById = function() {
          var TargetResource = $injector.get("Product");
          var action = TargetResource["::findById::Company::product"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Company.product#updateById
             * @methodOf lbServices.Company.product
             *
             * @description
             *
             * Update a related item by id for product.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - PersistedModel id
             *
             *  - `fk` â€“ `{*}` - Foreign key for product
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Product` object.)
             * </em>
             */
        R.product.updateById = function() {
          var TargetResource = $injector.get("Product");
          var action = TargetResource["::updateById::Company::product"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.Company.incubation
     * @header lbServices.Company.incubation
     * @object
     * @description
     *
     * The object `Company.incubation` groups methods
     * manipulating `Incubation` instances related to `Company`.
     *
     * Call {@link lbServices.Company#incubation Company.incubation()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.Company#incubation
             * @methodOf lbServices.Company
             *
             * @description
             *
             * Queries incubation of company.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - PersistedModel id
             *
             *  - `filter` â€“ `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Incubation` object.)
             * </em>
             */
        R.incubation = function() {
          var TargetResource = $injector.get("Incubation");
          var action = TargetResource["::get::Company::incubation"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Company.incubation#count
             * @methodOf lbServices.Company.incubation
             *
             * @description
             *
             * Counts incubation of company.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - PersistedModel id
             *
             *  - `where` â€“ `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` â€“ `{number=}` -
             */
        R.incubation.count = function() {
          var TargetResource = $injector.get("Incubation");
          var action = TargetResource["::count::Company::incubation"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Company.incubation#create
             * @methodOf lbServices.Company.incubation
             *
             * @description
             *
             * Creates a new instance in incubation of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Incubation` object.)
             * </em>
             */
        R.incubation.create = function() {
          var TargetResource = $injector.get("Incubation");
          var action = TargetResource["::create::Company::incubation"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Company.incubation#createMany
             * @methodOf lbServices.Company.incubation
             *
             * @description
             *
             * Creates a new instance in incubation of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Incubation` object.)
             * </em>
             */
        R.incubation.createMany = function() {
          var TargetResource = $injector.get("Incubation");
          var action = TargetResource["::createMany::Company::incubation"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Company.incubation#destroyAll
             * @methodOf lbServices.Company.incubation
             *
             * @description
             *
             * Deletes all incubation of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - PersistedModel id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.incubation.destroyAll = function() {
          var TargetResource = $injector.get("Incubation");
          var action = TargetResource["::delete::Company::incubation"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Company.incubation#destroyById
             * @methodOf lbServices.Company.incubation
             *
             * @description
             *
             * Delete a related item by id for incubation.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - PersistedModel id
             *
             *  - `fk` â€“ `{*}` - Foreign key for incubation
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.incubation.destroyById = function() {
          var TargetResource = $injector.get("Incubation");
          var action = TargetResource["::destroyById::Company::incubation"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Company.incubation#findById
             * @methodOf lbServices.Company.incubation
             *
             * @description
             *
             * Find a related item by id for incubation.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - PersistedModel id
             *
             *  - `fk` â€“ `{*}` - Foreign key for incubation
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Incubation` object.)
             * </em>
             */
        R.incubation.findById = function() {
          var TargetResource = $injector.get("Incubation");
          var action = TargetResource["::findById::Company::incubation"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Company.incubation#updateById
             * @methodOf lbServices.Company.incubation
             *
             * @description
             *
             * Update a related item by id for incubation.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - PersistedModel id
             *
             *  - `fk` â€“ `{*}` - Foreign key for incubation
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Incubation` object.)
             * </em>
             */
        R.incubation.updateById = function() {
          var TargetResource = $injector.get("Incubation");
          var action = TargetResource["::updateById::Company::incubation"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.Company.founders
     * @header lbServices.Company.founders
     * @object
     * @description
     *
     * The object `Company.founders` groups methods
     * manipulating `Person` instances related to `Company`.
     *
     * Call {@link lbServices.Company#founders Company.founders()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.Company#founders
             * @methodOf lbServices.Company
             *
             * @description
             *
             * Queries founders of company.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - PersistedModel id
             *
             *  - `filter` â€“ `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Person` object.)
             * </em>
             */
        R.founders = function() {
          var TargetResource = $injector.get("Person");
          var action = TargetResource["::get::Company::founders"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Company.founders#count
             * @methodOf lbServices.Company.founders
             *
             * @description
             *
             * Counts founders of company.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - PersistedModel id
             *
             *  - `where` â€“ `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` â€“ `{number=}` -
             */
        R.founders.count = function() {
          var TargetResource = $injector.get("Person");
          var action = TargetResource["::count::Company::founders"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Company.founders#create
             * @methodOf lbServices.Company.founders
             *
             * @description
             *
             * Creates a new instance in founders of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Person` object.)
             * </em>
             */
        R.founders.create = function() {
          var TargetResource = $injector.get("Person");
          var action = TargetResource["::create::Company::founders"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Company.founders#createMany
             * @methodOf lbServices.Company.founders
             *
             * @description
             *
             * Creates a new instance in founders of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Person` object.)
             * </em>
             */
        R.founders.createMany = function() {
          var TargetResource = $injector.get("Person");
          var action = TargetResource["::createMany::Company::founders"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Company.founders#destroyAll
             * @methodOf lbServices.Company.founders
             *
             * @description
             *
             * Deletes all founders of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - PersistedModel id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.founders.destroyAll = function() {
          var TargetResource = $injector.get("Person");
          var action = TargetResource["::delete::Company::founders"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Company.founders#destroyById
             * @methodOf lbServices.Company.founders
             *
             * @description
             *
             * Delete a related item by id for founders.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - PersistedModel id
             *
             *  - `fk` â€“ `{*}` - Foreign key for founders
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.founders.destroyById = function() {
          var TargetResource = $injector.get("Person");
          var action = TargetResource["::destroyById::Company::founders"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Company.founders#exists
             * @methodOf lbServices.Company.founders
             *
             * @description
             *
             * Check the existence of founders relation to an item by id.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - PersistedModel id
             *
             *  - `fk` â€“ `{*}` - Foreign key for founders
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Person` object.)
             * </em>
             */
        R.founders.exists = function() {
          var TargetResource = $injector.get("Person");
          var action = TargetResource["::exists::Company::founders"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Company.founders#findById
             * @methodOf lbServices.Company.founders
             *
             * @description
             *
             * Find a related item by id for founders.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - PersistedModel id
             *
             *  - `fk` â€“ `{*}` - Foreign key for founders
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Person` object.)
             * </em>
             */
        R.founders.findById = function() {
          var TargetResource = $injector.get("Person");
          var action = TargetResource["::findById::Company::founders"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Company.founders#link
             * @methodOf lbServices.Company.founders
             *
             * @description
             *
             * Add a related item by id for founders.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - PersistedModel id
             *
             *  - `fk` â€“ `{*}` - Foreign key for founders
             *
             * @param {Object} postData Request data.
             *
             * This method does not accept any data. Supply an empty object.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Person` object.)
             * </em>
             */
        R.founders.link = function() {
          var TargetResource = $injector.get("Person");
          var action = TargetResource["::link::Company::founders"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Company.founders#unlink
             * @methodOf lbServices.Company.founders
             *
             * @description
             *
             * Remove the founders relation to an item by id.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - PersistedModel id
             *
             *  - `fk` â€“ `{*}` - Foreign key for founders
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.founders.unlink = function() {
          var TargetResource = $injector.get("Person");
          var action = TargetResource["::unlink::Company::founders"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Company.founders#updateById
             * @methodOf lbServices.Company.founders
             *
             * @description
             *
             * Update a related item by id for founders.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - PersistedModel id
             *
             *  - `fk` â€“ `{*}` - Foreign key for founders
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Person` object.)
             * </em>
             */
        R.founders.updateById = function() {
          var TargetResource = $injector.get("Person");
          var action = TargetResource["::updateById::Company::founders"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.Company.founderPrevs
     * @header lbServices.Company.founderPrevs
     * @object
     * @description
     *
     * The object `Company.founderPrevs` groups methods
     * manipulating `Company` instances related to `Company`.
     *
     * Call {@link lbServices.Company#founderPrevs Company.founderPrevs()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.Company#founderPrevs
             * @methodOf lbServices.Company
             *
             * @description
             *
             * Queries founderPrevs of company.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - PersistedModel id
             *
             *  - `filter` â€“ `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Company` object.)
             * </em>
             */
        R.founderPrevs = function() {
          var TargetResource = $injector.get("Company");
          var action = TargetResource["::get::Company::founderPrevs"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Company.founderPrevs#count
             * @methodOf lbServices.Company.founderPrevs
             *
             * @description
             *
             * Counts founderPrevs of company.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - PersistedModel id
             *
             *  - `where` â€“ `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` â€“ `{number=}` -
             */
        R.founderPrevs.count = function() {
          var TargetResource = $injector.get("Company");
          var action = TargetResource["::count::Company::founderPrevs"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Company.founderPrevs#create
             * @methodOf lbServices.Company.founderPrevs
             *
             * @description
             *
             * Creates a new instance in founderPrevs of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Company` object.)
             * </em>
             */
        R.founderPrevs.create = function() {
          var TargetResource = $injector.get("Company");
          var action = TargetResource["::create::Company::founderPrevs"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Company.founderPrevs#createMany
             * @methodOf lbServices.Company.founderPrevs
             *
             * @description
             *
             * Creates a new instance in founderPrevs of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Company` object.)
             * </em>
             */
        R.founderPrevs.createMany = function() {
          var TargetResource = $injector.get("Company");
          var action = TargetResource["::createMany::Company::founderPrevs"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Company.founderPrevs#destroyAll
             * @methodOf lbServices.Company.founderPrevs
             *
             * @description
             *
             * Deletes all founderPrevs of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - PersistedModel id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.founderPrevs.destroyAll = function() {
          var TargetResource = $injector.get("Company");
          var action = TargetResource["::delete::Company::founderPrevs"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Company.founderPrevs#destroyById
             * @methodOf lbServices.Company.founderPrevs
             *
             * @description
             *
             * Delete a related item by id for founderPrevs.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - PersistedModel id
             *
             *  - `fk` â€“ `{*}` - Foreign key for founderPrevs
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.founderPrevs.destroyById = function() {
          var TargetResource = $injector.get("Company");
          var action = TargetResource["::destroyById::Company::founderPrevs"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Company.founderPrevs#exists
             * @methodOf lbServices.Company.founderPrevs
             *
             * @description
             *
             * Check the existence of founderPrevs relation to an item by id.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - PersistedModel id
             *
             *  - `fk` â€“ `{*}` - Foreign key for founderPrevs
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Company` object.)
             * </em>
             */
        R.founderPrevs.exists = function() {
          var TargetResource = $injector.get("Company");
          var action = TargetResource["::exists::Company::founderPrevs"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Company.founderPrevs#findById
             * @methodOf lbServices.Company.founderPrevs
             *
             * @description
             *
             * Find a related item by id for founderPrevs.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - PersistedModel id
             *
             *  - `fk` â€“ `{*}` - Foreign key for founderPrevs
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Company` object.)
             * </em>
             */
        R.founderPrevs.findById = function() {
          var TargetResource = $injector.get("Company");
          var action = TargetResource["::findById::Company::founderPrevs"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Company.founderPrevs#link
             * @methodOf lbServices.Company.founderPrevs
             *
             * @description
             *
             * Add a related item by id for founderPrevs.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - PersistedModel id
             *
             *  - `fk` â€“ `{*}` - Foreign key for founderPrevs
             *
             * @param {Object} postData Request data.
             *
             * This method does not accept any data. Supply an empty object.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Company` object.)
             * </em>
             */
        R.founderPrevs.link = function() {
          var TargetResource = $injector.get("Company");
          var action = TargetResource["::link::Company::founderPrevs"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Company.founderPrevs#unlink
             * @methodOf lbServices.Company.founderPrevs
             *
             * @description
             *
             * Remove the founderPrevs relation to an item by id.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - PersistedModel id
             *
             *  - `fk` â€“ `{*}` - Foreign key for founderPrevs
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.founderPrevs.unlink = function() {
          var TargetResource = $injector.get("Company");
          var action = TargetResource["::unlink::Company::founderPrevs"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Company.founderPrevs#updateById
             * @methodOf lbServices.Company.founderPrevs
             *
             * @description
             *
             * Update a related item by id for founderPrevs.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - PersistedModel id
             *
             *  - `fk` â€“ `{*}` - Foreign key for founderPrevs
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Company` object.)
             * </em>
             */
        R.founderPrevs.updateById = function() {
          var TargetResource = $injector.get("Company");
          var action = TargetResource["::updateById::Company::founderPrevs"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.Company.employee
     * @header lbServices.Company.employee
     * @object
     * @description
     *
     * The object `Company.employee` groups methods
     * manipulating `Employee` instances related to `Company`.
     *
     * Call {@link lbServices.Company#employee Company.employee()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.Company#employee
             * @methodOf lbServices.Company
             *
             * @description
             *
             * Queries employee of company.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - PersistedModel id
             *
             *  - `filter` â€“ `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Employee` object.)
             * </em>
             */
        R.employee = function() {
          var TargetResource = $injector.get("Employee");
          var action = TargetResource["::get::Company::employee"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Company.employee#count
             * @methodOf lbServices.Company.employee
             *
             * @description
             *
             * Counts employee of company.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - PersistedModel id
             *
             *  - `where` â€“ `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` â€“ `{number=}` -
             */
        R.employee.count = function() {
          var TargetResource = $injector.get("Employee");
          var action = TargetResource["::count::Company::employee"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Company.employee#create
             * @methodOf lbServices.Company.employee
             *
             * @description
             *
             * Creates a new instance in employee of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Employee` object.)
             * </em>
             */
        R.employee.create = function() {
          var TargetResource = $injector.get("Employee");
          var action = TargetResource["::create::Company::employee"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Company.employee#createMany
             * @methodOf lbServices.Company.employee
             *
             * @description
             *
             * Creates a new instance in employee of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Employee` object.)
             * </em>
             */
        R.employee.createMany = function() {
          var TargetResource = $injector.get("Employee");
          var action = TargetResource["::createMany::Company::employee"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Company.employee#destroyAll
             * @methodOf lbServices.Company.employee
             *
             * @description
             *
             * Deletes all employee of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - PersistedModel id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.employee.destroyAll = function() {
          var TargetResource = $injector.get("Employee");
          var action = TargetResource["::delete::Company::employee"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Company.employee#destroyById
             * @methodOf lbServices.Company.employee
             *
             * @description
             *
             * Delete a related item by id for employee.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - PersistedModel id
             *
             *  - `fk` â€“ `{*}` - Foreign key for employee
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.employee.destroyById = function() {
          var TargetResource = $injector.get("Employee");
          var action = TargetResource["::destroyById::Company::employee"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Company.employee#findById
             * @methodOf lbServices.Company.employee
             *
             * @description
             *
             * Find a related item by id for employee.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - PersistedModel id
             *
             *  - `fk` â€“ `{*}` - Foreign key for employee
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Employee` object.)
             * </em>
             */
        R.employee.findById = function() {
          var TargetResource = $injector.get("Employee");
          var action = TargetResource["::findById::Company::employee"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Company.employee#updateById
             * @methodOf lbServices.Company.employee
             *
             * @description
             *
             * Update a related item by id for employee.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - PersistedModel id
             *
             *  - `fk` â€“ `{*}` - Foreign key for employee
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Employee` object.)
             * </em>
             */
        R.employee.updateById = function() {
          var TargetResource = $injector.get("Employee");
          var action = TargetResource["::updateById::Company::employee"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.Company.ipos
     * @header lbServices.Company.ipos
     * @object
     * @description
     *
     * The object `Company.ipos` groups methods
     * manipulating `Ipo` instances related to `Company`.
     *
     * Call {@link lbServices.Company#ipos Company.ipos()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.Company#ipos
             * @methodOf lbServices.Company
             *
             * @description
             *
             * Queries ipos of company.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - PersistedModel id
             *
             *  - `filter` â€“ `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Ipo` object.)
             * </em>
             */
        R.ipos = function() {
          var TargetResource = $injector.get("Ipo");
          var action = TargetResource["::get::Company::ipos"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Company.ipos#count
             * @methodOf lbServices.Company.ipos
             *
             * @description
             *
             * Counts ipos of company.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - PersistedModel id
             *
             *  - `where` â€“ `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` â€“ `{number=}` -
             */
        R.ipos.count = function() {
          var TargetResource = $injector.get("Ipo");
          var action = TargetResource["::count::Company::ipos"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Company.ipos#create
             * @methodOf lbServices.Company.ipos
             *
             * @description
             *
             * Creates a new instance in ipos of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Ipo` object.)
             * </em>
             */
        R.ipos.create = function() {
          var TargetResource = $injector.get("Ipo");
          var action = TargetResource["::create::Company::ipos"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Company.ipos#createMany
             * @methodOf lbServices.Company.ipos
             *
             * @description
             *
             * Creates a new instance in ipos of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Ipo` object.)
             * </em>
             */
        R.ipos.createMany = function() {
          var TargetResource = $injector.get("Ipo");
          var action = TargetResource["::createMany::Company::ipos"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Company.ipos#destroyAll
             * @methodOf lbServices.Company.ipos
             *
             * @description
             *
             * Deletes all ipos of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - PersistedModel id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.ipos.destroyAll = function() {
          var TargetResource = $injector.get("Ipo");
          var action = TargetResource["::delete::Company::ipos"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Company.ipos#destroyById
             * @methodOf lbServices.Company.ipos
             *
             * @description
             *
             * Delete a related item by id for ipos.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - PersistedModel id
             *
             *  - `fk` â€“ `{*}` - Foreign key for ipos
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.ipos.destroyById = function() {
          var TargetResource = $injector.get("Ipo");
          var action = TargetResource["::destroyById::Company::ipos"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Company.ipos#findById
             * @methodOf lbServices.Company.ipos
             *
             * @description
             *
             * Find a related item by id for ipos.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - PersistedModel id
             *
             *  - `fk` â€“ `{*}` - Foreign key for ipos
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Ipo` object.)
             * </em>
             */
        R.ipos.findById = function() {
          var TargetResource = $injector.get("Ipo");
          var action = TargetResource["::findById::Company::ipos"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Company.ipos#updateById
             * @methodOf lbServices.Company.ipos
             *
             * @description
             *
             * Update a related item by id for ipos.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - PersistedModel id
             *
             *  - `fk` â€“ `{*}` - Foreign key for ipos
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Ipo` object.)
             * </em>
             */
        R.ipos.updateById = function() {
          var TargetResource = $injector.get("Ipo");
          var action = TargetResource["::updateById::Company::ipos"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.Company.handover
     * @header lbServices.Company.handover
     * @object
     * @description
     *
     * The object `Company.handover` groups methods
     * manipulating `Mna` instances related to `Company`.
     *
     * Call {@link lbServices.Company#handover Company.handover()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.Company#handover
             * @methodOf lbServices.Company
             *
             * @description
             *
             * Queries handover of company.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - PersistedModel id
             *
             *  - `filter` â€“ `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Mna` object.)
             * </em>
             */
        R.handover = function() {
          var TargetResource = $injector.get("Mna");
          var action = TargetResource["::get::Company::handover"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Company.handover#count
             * @methodOf lbServices.Company.handover
             *
             * @description
             *
             * Counts handover of company.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - PersistedModel id
             *
             *  - `where` â€“ `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` â€“ `{number=}` -
             */
        R.handover.count = function() {
          var TargetResource = $injector.get("Mna");
          var action = TargetResource["::count::Company::handover"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Company.handover#create
             * @methodOf lbServices.Company.handover
             *
             * @description
             *
             * Creates a new instance in handover of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Mna` object.)
             * </em>
             */
        R.handover.create = function() {
          var TargetResource = $injector.get("Mna");
          var action = TargetResource["::create::Company::handover"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Company.handover#createMany
             * @methodOf lbServices.Company.handover
             *
             * @description
             *
             * Creates a new instance in handover of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Mna` object.)
             * </em>
             */
        R.handover.createMany = function() {
          var TargetResource = $injector.get("Mna");
          var action = TargetResource["::createMany::Company::handover"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Company.handover#destroyAll
             * @methodOf lbServices.Company.handover
             *
             * @description
             *
             * Deletes all handover of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - PersistedModel id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.handover.destroyAll = function() {
          var TargetResource = $injector.get("Mna");
          var action = TargetResource["::delete::Company::handover"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Company.handover#destroyById
             * @methodOf lbServices.Company.handover
             *
             * @description
             *
             * Delete a related item by id for handover.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - PersistedModel id
             *
             *  - `fk` â€“ `{*}` - Foreign key for handover
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.handover.destroyById = function() {
          var TargetResource = $injector.get("Mna");
          var action = TargetResource["::destroyById::Company::handover"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Company.handover#findById
             * @methodOf lbServices.Company.handover
             *
             * @description
             *
             * Find a related item by id for handover.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - PersistedModel id
             *
             *  - `fk` â€“ `{*}` - Foreign key for handover
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Mna` object.)
             * </em>
             */
        R.handover.findById = function() {
          var TargetResource = $injector.get("Mna");
          var action = TargetResource["::findById::Company::handover"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Company.handover#updateById
             * @methodOf lbServices.Company.handover
             *
             * @description
             *
             * Update a related item by id for handover.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - PersistedModel id
             *
             *  - `fk` â€“ `{*}` - Foreign key for handover
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Mna` object.)
             * </em>
             */
        R.handover.updateById = function() {
          var TargetResource = $injector.get("Mna");
          var action = TargetResource["::updateById::Company::handover"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.Company.takeover
     * @header lbServices.Company.takeover
     * @object
     * @description
     *
     * The object `Company.takeover` groups methods
     * manipulating `Mna` instances related to `Company`.
     *
     * Call {@link lbServices.Company#takeover Company.takeover()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.Company#takeover
             * @methodOf lbServices.Company
             *
             * @description
             *
             * Queries takeover of company.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - PersistedModel id
             *
             *  - `filter` â€“ `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Mna` object.)
             * </em>
             */
        R.takeover = function() {
          var TargetResource = $injector.get("Mna");
          var action = TargetResource["::get::Company::takeover"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Company.takeover#count
             * @methodOf lbServices.Company.takeover
             *
             * @description
             *
             * Counts takeover of company.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - PersistedModel id
             *
             *  - `where` â€“ `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` â€“ `{number=}` -
             */
        R.takeover.count = function() {
          var TargetResource = $injector.get("Mna");
          var action = TargetResource["::count::Company::takeover"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Company.takeover#create
             * @methodOf lbServices.Company.takeover
             *
             * @description
             *
             * Creates a new instance in takeover of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Mna` object.)
             * </em>
             */
        R.takeover.create = function() {
          var TargetResource = $injector.get("Mna");
          var action = TargetResource["::create::Company::takeover"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Company.takeover#createMany
             * @methodOf lbServices.Company.takeover
             *
             * @description
             *
             * Creates a new instance in takeover of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Mna` object.)
             * </em>
             */
        R.takeover.createMany = function() {
          var TargetResource = $injector.get("Mna");
          var action = TargetResource["::createMany::Company::takeover"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Company.takeover#destroyAll
             * @methodOf lbServices.Company.takeover
             *
             * @description
             *
             * Deletes all takeover of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - PersistedModel id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.takeover.destroyAll = function() {
          var TargetResource = $injector.get("Mna");
          var action = TargetResource["::delete::Company::takeover"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Company.takeover#destroyById
             * @methodOf lbServices.Company.takeover
             *
             * @description
             *
             * Delete a related item by id for takeover.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - PersistedModel id
             *
             *  - `fk` â€“ `{*}` - Foreign key for takeover
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.takeover.destroyById = function() {
          var TargetResource = $injector.get("Mna");
          var action = TargetResource["::destroyById::Company::takeover"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Company.takeover#findById
             * @methodOf lbServices.Company.takeover
             *
             * @description
             *
             * Find a related item by id for takeover.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - PersistedModel id
             *
             *  - `fk` â€“ `{*}` - Foreign key for takeover
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Mna` object.)
             * </em>
             */
        R.takeover.findById = function() {
          var TargetResource = $injector.get("Mna");
          var action = TargetResource["::findById::Company::takeover"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Company.takeover#updateById
             * @methodOf lbServices.Company.takeover
             *
             * @description
             *
             * Update a related item by id for takeover.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - PersistedModel id
             *
             *  - `fk` â€“ `{*}` - Foreign key for takeover
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Mna` object.)
             * </em>
             */
        R.takeover.updateById = function() {
          var TargetResource = $injector.get("Mna");
          var action = TargetResource["::updateById::Company::takeover"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.Company.investee
     * @header lbServices.Company.investee
     * @object
     * @description
     *
     * The object `Company.investee` groups methods
     * manipulating `Investment` instances related to `Company`.
     *
     * Call {@link lbServices.Company#investee Company.investee()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.Company#investee
             * @methodOf lbServices.Company
             *
             * @description
             *
             * Queries investee of company.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - PersistedModel id
             *
             *  - `filter` â€“ `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Investment` object.)
             * </em>
             */
        R.investee = function() {
          var TargetResource = $injector.get("Investment");
          var action = TargetResource["::get::Company::investee"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Company.investee#count
             * @methodOf lbServices.Company.investee
             *
             * @description
             *
             * Counts investee of company.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - PersistedModel id
             *
             *  - `where` â€“ `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` â€“ `{number=}` -
             */
        R.investee.count = function() {
          var TargetResource = $injector.get("Investment");
          var action = TargetResource["::count::Company::investee"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Company.investee#create
             * @methodOf lbServices.Company.investee
             *
             * @description
             *
             * Creates a new instance in investee of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Investment` object.)
             * </em>
             */
        R.investee.create = function() {
          var TargetResource = $injector.get("Investment");
          var action = TargetResource["::create::Company::investee"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Company.investee#createMany
             * @methodOf lbServices.Company.investee
             *
             * @description
             *
             * Creates a new instance in investee of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Investment` object.)
             * </em>
             */
        R.investee.createMany = function() {
          var TargetResource = $injector.get("Investment");
          var action = TargetResource["::createMany::Company::investee"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Company.investee#destroyAll
             * @methodOf lbServices.Company.investee
             *
             * @description
             *
             * Deletes all investee of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - PersistedModel id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.investee.destroyAll = function() {
          var TargetResource = $injector.get("Investment");
          var action = TargetResource["::delete::Company::investee"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Company.investee#destroyById
             * @methodOf lbServices.Company.investee
             *
             * @description
             *
             * Delete a related item by id for investee.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - PersistedModel id
             *
             *  - `fk` â€“ `{*}` - Foreign key for investee
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.investee.destroyById = function() {
          var TargetResource = $injector.get("Investment");
          var action = TargetResource["::destroyById::Company::investee"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Company.investee#findById
             * @methodOf lbServices.Company.investee
             *
             * @description
             *
             * Find a related item by id for investee.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - PersistedModel id
             *
             *  - `fk` â€“ `{*}` - Foreign key for investee
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Investment` object.)
             * </em>
             */
        R.investee.findById = function() {
          var TargetResource = $injector.get("Investment");
          var action = TargetResource["::findById::Company::investee"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Company.investee#updateById
             * @methodOf lbServices.Company.investee
             *
             * @description
             *
             * Update a related item by id for investee.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - PersistedModel id
             *
             *  - `fk` â€“ `{*}` - Foreign key for investee
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Investment` object.)
             * </em>
             */
        R.investee.updateById = function() {
          var TargetResource = $injector.get("Investment");
          var action = TargetResource["::updateById::Company::investee"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.Company.file
     * @header lbServices.Company.file
     * @object
     * @description
     *
     * The object `Company.file` groups methods
     * manipulating `File` instances related to `Company`.
     *
     * Call {@link lbServices.Company#file Company.file()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.Company#file
             * @methodOf lbServices.Company
             *
             * @description
             *
             * Queries file of company.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - PersistedModel id
             *
             *  - `filter` â€“ `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `File` object.)
             * </em>
             */
        R.file = function() {
          var TargetResource = $injector.get("File");
          var action = TargetResource["::get::Company::file"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Company.file#count
             * @methodOf lbServices.Company.file
             *
             * @description
             *
             * Counts file of company.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - PersistedModel id
             *
             *  - `where` â€“ `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` â€“ `{number=}` -
             */
        R.file.count = function() {
          var TargetResource = $injector.get("File");
          var action = TargetResource["::count::Company::file"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Company.file#create
             * @methodOf lbServices.Company.file
             *
             * @description
             *
             * Creates a new instance in file of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `File` object.)
             * </em>
             */
        R.file.create = function() {
          var TargetResource = $injector.get("File");
          var action = TargetResource["::create::Company::file"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Company.file#createMany
             * @methodOf lbServices.Company.file
             *
             * @description
             *
             * Creates a new instance in file of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `File` object.)
             * </em>
             */
        R.file.createMany = function() {
          var TargetResource = $injector.get("File");
          var action = TargetResource["::createMany::Company::file"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Company.file#destroyAll
             * @methodOf lbServices.Company.file
             *
             * @description
             *
             * Deletes all file of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - PersistedModel id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.file.destroyAll = function() {
          var TargetResource = $injector.get("File");
          var action = TargetResource["::delete::Company::file"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Company.file#destroyById
             * @methodOf lbServices.Company.file
             *
             * @description
             *
             * Delete a related item by id for file.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - PersistedModel id
             *
             *  - `fk` â€“ `{*}` - Foreign key for file
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.file.destroyById = function() {
          var TargetResource = $injector.get("File");
          var action = TargetResource["::destroyById::Company::file"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Company.file#findById
             * @methodOf lbServices.Company.file
             *
             * @description
             *
             * Find a related item by id for file.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - PersistedModel id
             *
             *  - `fk` â€“ `{*}` - Foreign key for file
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `File` object.)
             * </em>
             */
        R.file.findById = function() {
          var TargetResource = $injector.get("File");
          var action = TargetResource["::findById::Company::file"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Company.file#updateById
             * @methodOf lbServices.Company.file
             *
             * @description
             *
             * Update a related item by id for file.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - PersistedModel id
             *
             *  - `fk` â€“ `{*}` - Foreign key for file
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `File` object.)
             * </em>
             */
        R.file.updateById = function() {
          var TargetResource = $injector.get("File");
          var action = TargetResource["::updateById::Company::file"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.Company.newsCompany
     * @header lbServices.Company.newsCompany
     * @object
     * @description
     *
     * The object `Company.newsCompany` groups methods
     * manipulating `NewsCompany` instances related to `Company`.
     *
     * Call {@link lbServices.Company#newsCompany Company.newsCompany()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.Company#newsCompany
             * @methodOf lbServices.Company
             *
             * @description
             *
             * Queries newsCompany of company.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - PersistedModel id
             *
             *  - `filter` â€“ `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `NewsCompany` object.)
             * </em>
             */
        R.newsCompany = function() {
          var TargetResource = $injector.get("NewsCompany");
          var action = TargetResource["::get::Company::newsCompany"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Company.newsCompany#count
             * @methodOf lbServices.Company.newsCompany
             *
             * @description
             *
             * Counts newsCompany of company.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - PersistedModel id
             *
             *  - `where` â€“ `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` â€“ `{number=}` -
             */
        R.newsCompany.count = function() {
          var TargetResource = $injector.get("NewsCompany");
          var action = TargetResource["::count::Company::newsCompany"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Company.newsCompany#create
             * @methodOf lbServices.Company.newsCompany
             *
             * @description
             *
             * Creates a new instance in newsCompany of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `NewsCompany` object.)
             * </em>
             */
        R.newsCompany.create = function() {
          var TargetResource = $injector.get("NewsCompany");
          var action = TargetResource["::create::Company::newsCompany"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Company.newsCompany#createMany
             * @methodOf lbServices.Company.newsCompany
             *
             * @description
             *
             * Creates a new instance in newsCompany of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `NewsCompany` object.)
             * </em>
             */
        R.newsCompany.createMany = function() {
          var TargetResource = $injector.get("NewsCompany");
          var action = TargetResource["::createMany::Company::newsCompany"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Company.newsCompany#destroyAll
             * @methodOf lbServices.Company.newsCompany
             *
             * @description
             *
             * Deletes all newsCompany of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - PersistedModel id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.newsCompany.destroyAll = function() {
          var TargetResource = $injector.get("NewsCompany");
          var action = TargetResource["::delete::Company::newsCompany"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Company.newsCompany#destroyById
             * @methodOf lbServices.Company.newsCompany
             *
             * @description
             *
             * Delete a related item by id for newsCompany.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - PersistedModel id
             *
             *  - `fk` â€“ `{*}` - Foreign key for newsCompany
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.newsCompany.destroyById = function() {
          var TargetResource = $injector.get("NewsCompany");
          var action = TargetResource["::destroyById::Company::newsCompany"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Company.newsCompany#findById
             * @methodOf lbServices.Company.newsCompany
             *
             * @description
             *
             * Find a related item by id for newsCompany.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - PersistedModel id
             *
             *  - `fk` â€“ `{*}` - Foreign key for newsCompany
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `NewsCompany` object.)
             * </em>
             */
        R.newsCompany.findById = function() {
          var TargetResource = $injector.get("NewsCompany");
          var action = TargetResource["::findById::Company::newsCompany"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Company.newsCompany#updateById
             * @methodOf lbServices.Company.newsCompany
             *
             * @description
             *
             * Update a related item by id for newsCompany.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - PersistedModel id
             *
             *  - `fk` â€“ `{*}` - Foreign key for newsCompany
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `NewsCompany` object.)
             * </em>
             */
        R.newsCompany.updateById = function() {
          var TargetResource = $injector.get("NewsCompany");
          var action = TargetResource["::updateById::Company::newsCompany"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.Company.thumbnail
     * @header lbServices.Company.thumbnail
     * @object
     * @description
     *
     * The object `Company.thumbnail` groups methods
     * manipulating `Thumbnail` instances related to `Company`.
     *
     * Call {@link lbServices.Company#thumbnail Company.thumbnail()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.Company#thumbnail
             * @methodOf lbServices.Company
             *
             * @description
             *
             * Fetches hasOne relation thumbnail.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - PersistedModel id
             *
             *  - `refresh` â€“ `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Thumbnail` object.)
             * </em>
             */
        R.thumbnail = function() {
          var TargetResource = $injector.get("Thumbnail");
          var action = TargetResource["::get::Company::thumbnail"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Company.thumbnail#create
             * @methodOf lbServices.Company.thumbnail
             *
             * @description
             *
             * Creates a new instance in thumbnail of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Thumbnail` object.)
             * </em>
             */
        R.thumbnail.create = function() {
          var TargetResource = $injector.get("Thumbnail");
          var action = TargetResource["::create::Company::thumbnail"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Company.thumbnail#createMany
             * @methodOf lbServices.Company.thumbnail
             *
             * @description
             *
             * Creates a new instance in thumbnail of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Thumbnail` object.)
             * </em>
             */
        R.thumbnail.createMany = function() {
          var TargetResource = $injector.get("Thumbnail");
          var action = TargetResource["::createMany::Company::thumbnail"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Company.thumbnail#destroy
             * @methodOf lbServices.Company.thumbnail
             *
             * @description
             *
             * Deletes thumbnail of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - PersistedModel id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.thumbnail.destroy = function() {
          var TargetResource = $injector.get("Thumbnail");
          var action = TargetResource["::destroy::Company::thumbnail"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Company.thumbnail#update
             * @methodOf lbServices.Company.thumbnail
             *
             * @description
             *
             * Update thumbnail of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Thumbnail` object.)
             * </em>
             */
        R.thumbnail.update = function() {
          var TargetResource = $injector.get("Thumbnail");
          var action = TargetResource["::update::Company::thumbnail"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.NewsCompany
 * @header lbServices.NewsCompany
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `NewsCompany` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "NewsCompany",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector', '$q',
      function(LoopBackResource, LoopBackAuth, $injector, $q) {
        var R = LoopBackResource(
        urlBase + "/newsCompanies/:id",
          { 'id': '@id' },
          {

            // INTERNAL. Use NewsCompany.company() instead.
            "prototype$__get__company": {
              url: urlBase + "/newsCompanies/:id/company",
              method: "GET",
            },

            // INTERNAL. Use NewsCompany.news() instead.
            "prototype$__get__news": {
              url: urlBase + "/newsCompanies/:id/news",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.NewsCompany#create
             * @methodOf lbServices.NewsCompany
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `NewsCompany` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/newsCompanies",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.NewsCompany#createMany
             * @methodOf lbServices.NewsCompany
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `NewsCompany` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/newsCompanies",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.NewsCompany#upsert
             * @methodOf lbServices.NewsCompany
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `NewsCompany` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/newsCompanies",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.NewsCompany#replaceOrCreate
             * @methodOf lbServices.NewsCompany
             *
             * @description
             *
             * Replace an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `NewsCompany` object.)
             * </em>
             */
            "replaceOrCreate": {
              url: urlBase + "/newsCompanies/replaceOrCreate",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.NewsCompany#upsertWithWhere
             * @methodOf lbServices.NewsCompany
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` â€“ `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `NewsCompany` object.)
             * </em>
             */
            "upsertWithWhere": {
              url: urlBase + "/newsCompanies/upsertWithWhere",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.NewsCompany#exists
             * @methodOf lbServices.NewsCompany
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` â€“ `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/newsCompanies/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.NewsCompany#findById
             * @methodOf lbServices.NewsCompany
             *
             * @description
             *
             * Find a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - Model id
             *
             *  - `filter` â€“ `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `NewsCompany` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/newsCompanies/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.NewsCompany#replaceById
             * @methodOf lbServices.NewsCompany
             *
             * @description
             *
             * Replace attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - Model id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `NewsCompany` object.)
             * </em>
             */
            "replaceById": {
              url: urlBase + "/newsCompanies/:id/replace",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.NewsCompany#find
             * @methodOf lbServices.NewsCompany
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` â€“ `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `NewsCompany` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/newsCompanies",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.NewsCompany#findOne
             * @methodOf lbServices.NewsCompany
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` â€“ `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `NewsCompany` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/newsCompanies/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.NewsCompany#updateAll
             * @methodOf lbServices.NewsCompany
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` â€“ `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
            "updateAll": {
              url: urlBase + "/newsCompanies/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.NewsCompany#deleteById
             * @methodOf lbServices.NewsCompany
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `NewsCompany` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/newsCompanies/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.NewsCompany#count
             * @methodOf lbServices.NewsCompany
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` â€“ `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` â€“ `{number=}` -
             */
            "count": {
              url: urlBase + "/newsCompanies/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.NewsCompany#prototype$updateAttributes
             * @methodOf lbServices.NewsCompany
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `NewsCompany` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/newsCompanies/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.NewsCompany#createChangeStream
             * @methodOf lbServices.NewsCompany
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` â€“ `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` â€“ `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/newsCompanies/change-stream",
              method: "POST",
            },

            // INTERNAL. Use News.newsCompany.findById() instead.
            "::findById::News::newsCompany": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/news/:id/newsCompany/:fk",
              method: "GET",
            },

            // INTERNAL. Use News.newsCompany.destroyById() instead.
            "::destroyById::News::newsCompany": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/news/:id/newsCompany/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use News.newsCompany.updateById() instead.
            "::updateById::News::newsCompany": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/news/:id/newsCompany/:fk",
              method: "PUT",
            },

            // INTERNAL. Use News.newsCompany() instead.
            "::get::News::newsCompany": {
              isArray: true,
              url: urlBase + "/news/:id/newsCompany",
              method: "GET",
            },

            // INTERNAL. Use News.newsCompany.create() instead.
            "::create::News::newsCompany": {
              url: urlBase + "/news/:id/newsCompany",
              method: "POST",
            },

            // INTERNAL. Use News.newsCompany.createMany() instead.
            "::createMany::News::newsCompany": {
              isArray: true,
              url: urlBase + "/news/:id/newsCompany",
              method: "POST",
            },

            // INTERNAL. Use News.newsCompany.destroyAll() instead.
            "::delete::News::newsCompany": {
              url: urlBase + "/news/:id/newsCompany",
              method: "DELETE",
            },

            // INTERNAL. Use News.newsCompany.count() instead.
            "::count::News::newsCompany": {
              url: urlBase + "/news/:id/newsCompany/count",
              method: "GET",
            },

            // INTERNAL. Use Company.newsCompany.findById() instead.
            "::findById::Company::newsCompany": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/companies/:id/newsCompany/:fk",
              method: "GET",
            },

            // INTERNAL. Use Company.newsCompany.destroyById() instead.
            "::destroyById::Company::newsCompany": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/companies/:id/newsCompany/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Company.newsCompany.updateById() instead.
            "::updateById::Company::newsCompany": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/companies/:id/newsCompany/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Company.newsCompany() instead.
            "::get::Company::newsCompany": {
              isArray: true,
              url: urlBase + "/companies/:id/newsCompany",
              method: "GET",
            },

            // INTERNAL. Use Company.newsCompany.create() instead.
            "::create::Company::newsCompany": {
              url: urlBase + "/companies/:id/newsCompany",
              method: "POST",
            },

            // INTERNAL. Use Company.newsCompany.createMany() instead.
            "::createMany::Company::newsCompany": {
              isArray: true,
              url: urlBase + "/companies/:id/newsCompany",
              method: "POST",
            },

            // INTERNAL. Use Company.newsCompany.destroyAll() instead.
            "::delete::Company::newsCompany": {
              url: urlBase + "/companies/:id/newsCompany",
              method: "DELETE",
            },

            // INTERNAL. Use Company.newsCompany.count() instead.
            "::count::Company::newsCompany": {
              url: urlBase + "/companies/:id/newsCompany/count",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.NewsCompany#patchOrCreate
             * @methodOf lbServices.NewsCompany
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `NewsCompany` object.)
             * </em>
             */
        R["patchOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.NewsCompany#updateOrCreate
             * @methodOf lbServices.NewsCompany
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `NewsCompany` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.NewsCompany#patchOrCreateWithWhere
             * @methodOf lbServices.NewsCompany
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` â€“ `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `NewsCompany` object.)
             * </em>
             */
        R["patchOrCreateWithWhere"] = R["upsertWithWhere"];

            /**
             * @ngdoc method
             * @name lbServices.NewsCompany#update
             * @methodOf lbServices.NewsCompany
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` â€“ `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.NewsCompany#destroyById
             * @methodOf lbServices.NewsCompany
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `NewsCompany` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.NewsCompany#removeById
             * @methodOf lbServices.NewsCompany
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `NewsCompany` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.NewsCompany#patchAttributes
             * @methodOf lbServices.NewsCompany
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `NewsCompany` object.)
             * </em>
             */
        R["patchAttributes"] = R["prototype$updateAttributes"];


        /**
        * @ngdoc property
        * @name lbServices.NewsCompany#modelName
        * @propertyOf lbServices.NewsCompany
        * @description
        * The name of the model represented by this $resource,
        * i.e. `NewsCompany`.
        */
        R.modelName = "NewsCompany";


            /**
             * @ngdoc method
             * @name lbServices.NewsCompany#company
             * @methodOf lbServices.NewsCompany
             *
             * @description
             *
             * Fetches belongsTo relation company.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - PersistedModel id
             *
             *  - `refresh` â€“ `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Company` object.)
             * </em>
             */
        R.company = function() {
          var TargetResource = $injector.get("Company");
          var action = TargetResource["::get::NewsCompany::company"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.NewsCompany#news
             * @methodOf lbServices.NewsCompany
             *
             * @description
             *
             * Fetches belongsTo relation news.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - PersistedModel id
             *
             *  - `refresh` â€“ `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `News` object.)
             * </em>
             */
        R.news = function() {
          var TargetResource = $injector.get("News");
          var action = TargetResource["::get::NewsCompany::news"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.NewsPerson
 * @header lbServices.NewsPerson
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `NewsPerson` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "NewsPerson",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector', '$q',
      function(LoopBackResource, LoopBackAuth, $injector, $q) {
        var R = LoopBackResource(
        urlBase + "/newsPeople/:id",
          { 'id': '@id' },
          {

            // INTERNAL. Use NewsPerson.person() instead.
            "prototype$__get__person": {
              url: urlBase + "/newsPeople/:id/person",
              method: "GET",
            },

            // INTERNAL. Use NewsPerson.news() instead.
            "prototype$__get__news": {
              url: urlBase + "/newsPeople/:id/news",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.NewsPerson#create
             * @methodOf lbServices.NewsPerson
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `NewsPerson` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/newsPeople",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.NewsPerson#createMany
             * @methodOf lbServices.NewsPerson
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `NewsPerson` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/newsPeople",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.NewsPerson#upsert
             * @methodOf lbServices.NewsPerson
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `NewsPerson` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/newsPeople",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.NewsPerson#replaceOrCreate
             * @methodOf lbServices.NewsPerson
             *
             * @description
             *
             * Replace an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `NewsPerson` object.)
             * </em>
             */
            "replaceOrCreate": {
              url: urlBase + "/newsPeople/replaceOrCreate",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.NewsPerson#upsertWithWhere
             * @methodOf lbServices.NewsPerson
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` â€“ `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `NewsPerson` object.)
             * </em>
             */
            "upsertWithWhere": {
              url: urlBase + "/newsPeople/upsertWithWhere",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.NewsPerson#exists
             * @methodOf lbServices.NewsPerson
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` â€“ `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/newsPeople/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.NewsPerson#findById
             * @methodOf lbServices.NewsPerson
             *
             * @description
             *
             * Find a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - Model id
             *
             *  - `filter` â€“ `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `NewsPerson` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/newsPeople/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.NewsPerson#replaceById
             * @methodOf lbServices.NewsPerson
             *
             * @description
             *
             * Replace attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - Model id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `NewsPerson` object.)
             * </em>
             */
            "replaceById": {
              url: urlBase + "/newsPeople/:id/replace",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.NewsPerson#find
             * @methodOf lbServices.NewsPerson
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` â€“ `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `NewsPerson` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/newsPeople",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.NewsPerson#findOne
             * @methodOf lbServices.NewsPerson
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` â€“ `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `NewsPerson` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/newsPeople/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.NewsPerson#updateAll
             * @methodOf lbServices.NewsPerson
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` â€“ `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
            "updateAll": {
              url: urlBase + "/newsPeople/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.NewsPerson#deleteById
             * @methodOf lbServices.NewsPerson
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `NewsPerson` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/newsPeople/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.NewsPerson#count
             * @methodOf lbServices.NewsPerson
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` â€“ `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` â€“ `{number=}` -
             */
            "count": {
              url: urlBase + "/newsPeople/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.NewsPerson#prototype$updateAttributes
             * @methodOf lbServices.NewsPerson
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `NewsPerson` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/newsPeople/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.NewsPerson#createChangeStream
             * @methodOf lbServices.NewsPerson
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` â€“ `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` â€“ `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/newsPeople/change-stream",
              method: "POST",
            },

            // INTERNAL. Use News.newsPerson.findById() instead.
            "::findById::News::newsPerson": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/news/:id/newsPerson/:fk",
              method: "GET",
            },

            // INTERNAL. Use News.newsPerson.destroyById() instead.
            "::destroyById::News::newsPerson": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/news/:id/newsPerson/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use News.newsPerson.updateById() instead.
            "::updateById::News::newsPerson": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/news/:id/newsPerson/:fk",
              method: "PUT",
            },

            // INTERNAL. Use News.newsPerson() instead.
            "::get::News::newsPerson": {
              isArray: true,
              url: urlBase + "/news/:id/newsPerson",
              method: "GET",
            },

            // INTERNAL. Use News.newsPerson.create() instead.
            "::create::News::newsPerson": {
              url: urlBase + "/news/:id/newsPerson",
              method: "POST",
            },

            // INTERNAL. Use News.newsPerson.createMany() instead.
            "::createMany::News::newsPerson": {
              isArray: true,
              url: urlBase + "/news/:id/newsPerson",
              method: "POST",
            },

            // INTERNAL. Use News.newsPerson.destroyAll() instead.
            "::delete::News::newsPerson": {
              url: urlBase + "/news/:id/newsPerson",
              method: "DELETE",
            },

            // INTERNAL. Use News.newsPerson.count() instead.
            "::count::News::newsPerson": {
              url: urlBase + "/news/:id/newsPerson/count",
              method: "GET",
            },

            // INTERNAL. Use Person.newsPerson.findById() instead.
            "::findById::Person::newsPerson": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/people/:id/newsPerson/:fk",
              method: "GET",
            },

            // INTERNAL. Use Person.newsPerson.destroyById() instead.
            "::destroyById::Person::newsPerson": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/people/:id/newsPerson/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Person.newsPerson.updateById() instead.
            "::updateById::Person::newsPerson": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/people/:id/newsPerson/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Person.newsPerson() instead.
            "::get::Person::newsPerson": {
              isArray: true,
              url: urlBase + "/people/:id/newsPerson",
              method: "GET",
            },

            // INTERNAL. Use Person.newsPerson.create() instead.
            "::create::Person::newsPerson": {
              url: urlBase + "/people/:id/newsPerson",
              method: "POST",
            },

            // INTERNAL. Use Person.newsPerson.createMany() instead.
            "::createMany::Person::newsPerson": {
              isArray: true,
              url: urlBase + "/people/:id/newsPerson",
              method: "POST",
            },

            // INTERNAL. Use Person.newsPerson.destroyAll() instead.
            "::delete::Person::newsPerson": {
              url: urlBase + "/people/:id/newsPerson",
              method: "DELETE",
            },

            // INTERNAL. Use Person.newsPerson.count() instead.
            "::count::Person::newsPerson": {
              url: urlBase + "/people/:id/newsPerson/count",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.NewsPerson#patchOrCreate
             * @methodOf lbServices.NewsPerson
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `NewsPerson` object.)
             * </em>
             */
        R["patchOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.NewsPerson#updateOrCreate
             * @methodOf lbServices.NewsPerson
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `NewsPerson` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.NewsPerson#patchOrCreateWithWhere
             * @methodOf lbServices.NewsPerson
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` â€“ `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `NewsPerson` object.)
             * </em>
             */
        R["patchOrCreateWithWhere"] = R["upsertWithWhere"];

            /**
             * @ngdoc method
             * @name lbServices.NewsPerson#update
             * @methodOf lbServices.NewsPerson
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` â€“ `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.NewsPerson#destroyById
             * @methodOf lbServices.NewsPerson
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `NewsPerson` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.NewsPerson#removeById
             * @methodOf lbServices.NewsPerson
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `NewsPerson` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.NewsPerson#patchAttributes
             * @methodOf lbServices.NewsPerson
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `NewsPerson` object.)
             * </em>
             */
        R["patchAttributes"] = R["prototype$updateAttributes"];


        /**
        * @ngdoc property
        * @name lbServices.NewsPerson#modelName
        * @propertyOf lbServices.NewsPerson
        * @description
        * The name of the model represented by this $resource,
        * i.e. `NewsPerson`.
        */
        R.modelName = "NewsPerson";


            /**
             * @ngdoc method
             * @name lbServices.NewsPerson#person
             * @methodOf lbServices.NewsPerson
             *
             * @description
             *
             * Fetches belongsTo relation person.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - PersistedModel id
             *
             *  - `refresh` â€“ `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Person` object.)
             * </em>
             */
        R.person = function() {
          var TargetResource = $injector.get("Person");
          var action = TargetResource["::get::NewsPerson::person"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.NewsPerson#news
             * @methodOf lbServices.NewsPerson
             *
             * @description
             *
             * Fetches belongsTo relation news.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - PersistedModel id
             *
             *  - `refresh` â€“ `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `News` object.)
             * </em>
             */
        R.news = function() {
          var TargetResource = $injector.get("News");
          var action = TargetResource["::get::NewsPerson::news"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.Thumbnail
 * @header lbServices.Thumbnail
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `Thumbnail` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "Thumbnail",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector', '$q',
      function(LoopBackResource, LoopBackAuth, $injector, $q) {
        var R = LoopBackResource(
        urlBase + "/thumbnails/:id",
          { 'id': '@id' },
          {

            /**
             * @ngdoc method
             * @name lbServices.Thumbnail#create
             * @methodOf lbServices.Thumbnail
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Thumbnail` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/thumbnails",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Thumbnail#createMany
             * @methodOf lbServices.Thumbnail
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Thumbnail` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/thumbnails",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Thumbnail#upsert
             * @methodOf lbServices.Thumbnail
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Thumbnail` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/thumbnails",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.Thumbnail#replaceOrCreate
             * @methodOf lbServices.Thumbnail
             *
             * @description
             *
             * Replace an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Thumbnail` object.)
             * </em>
             */
            "replaceOrCreate": {
              url: urlBase + "/thumbnails/replaceOrCreate",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Thumbnail#upsertWithWhere
             * @methodOf lbServices.Thumbnail
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` â€“ `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Thumbnail` object.)
             * </em>
             */
            "upsertWithWhere": {
              url: urlBase + "/thumbnails/upsertWithWhere",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Thumbnail#exists
             * @methodOf lbServices.Thumbnail
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` â€“ `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/thumbnails/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Thumbnail#findById
             * @methodOf lbServices.Thumbnail
             *
             * @description
             *
             * Find a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - Model id
             *
             *  - `filter` â€“ `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Thumbnail` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/thumbnails/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Thumbnail#replaceById
             * @methodOf lbServices.Thumbnail
             *
             * @description
             *
             * Replace attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - Model id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Thumbnail` object.)
             * </em>
             */
            "replaceById": {
              url: urlBase + "/thumbnails/:id/replace",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Thumbnail#find
             * @methodOf lbServices.Thumbnail
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` â€“ `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Thumbnail` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/thumbnails",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Thumbnail#findOne
             * @methodOf lbServices.Thumbnail
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` â€“ `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Thumbnail` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/thumbnails/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Thumbnail#updateAll
             * @methodOf lbServices.Thumbnail
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` â€“ `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
            "updateAll": {
              url: urlBase + "/thumbnails/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Thumbnail#deleteById
             * @methodOf lbServices.Thumbnail
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Thumbnail` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/thumbnails/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.Thumbnail#count
             * @methodOf lbServices.Thumbnail
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` â€“ `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` â€“ `{number=}` -
             */
            "count": {
              url: urlBase + "/thumbnails/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Thumbnail#prototype$updateAttributes
             * @methodOf lbServices.Thumbnail
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Thumbnail` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/thumbnails/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.Thumbnail#createChangeStream
             * @methodOf lbServices.Thumbnail
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` â€“ `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` â€“ `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/thumbnails/change-stream",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Thumbnail#upload
             * @methodOf lbServices.Thumbnail
             *
             * @description
             *
             * Uploads a Thumbnail
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `options` â€“ `{object=}` -
             *
             * @param {Object} postData Request data.
             *
             *  - `ctx` â€“ `{object=}` -
             *
             *  - `res` â€“ `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Thumbnail` object.)
             * </em>
             */
            "upload": {
              url: urlBase + "/thumbnails/upload",
              method: "POST",
            },

            // INTERNAL. Use Person.thumbnail() instead.
            "::get::Person::thumbnail": {
              url: urlBase + "/people/:id/thumbnail",
              method: "GET",
            },

            // INTERNAL. Use Person.thumbnail.create() instead.
            "::create::Person::thumbnail": {
              url: urlBase + "/people/:id/thumbnail",
              method: "POST",
            },

            // INTERNAL. Use Person.thumbnail.createMany() instead.
            "::createMany::Person::thumbnail": {
              isArray: true,
              url: urlBase + "/people/:id/thumbnail",
              method: "POST",
            },

            // INTERNAL. Use Person.thumbnail.update() instead.
            "::update::Person::thumbnail": {
              url: urlBase + "/people/:id/thumbnail",
              method: "PUT",
            },

            // INTERNAL. Use Person.thumbnail.destroy() instead.
            "::destroy::Person::thumbnail": {
              url: urlBase + "/people/:id/thumbnail",
              method: "DELETE",
            },

            // INTERNAL. Use Company.thumbnail() instead.
            "::get::Company::thumbnail": {
              url: urlBase + "/companies/:id/thumbnail",
              method: "GET",
            },

            // INTERNAL. Use Company.thumbnail.create() instead.
            "::create::Company::thumbnail": {
              url: urlBase + "/companies/:id/thumbnail",
              method: "POST",
            },

            // INTERNAL. Use Company.thumbnail.createMany() instead.
            "::createMany::Company::thumbnail": {
              isArray: true,
              url: urlBase + "/companies/:id/thumbnail",
              method: "POST",
            },

            // INTERNAL. Use Company.thumbnail.update() instead.
            "::update::Company::thumbnail": {
              url: urlBase + "/companies/:id/thumbnail",
              method: "PUT",
            },

            // INTERNAL. Use Company.thumbnail.destroy() instead.
            "::destroy::Company::thumbnail": {
              url: urlBase + "/companies/:id/thumbnail",
              method: "DELETE",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.Thumbnail#patchOrCreate
             * @methodOf lbServices.Thumbnail
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Thumbnail` object.)
             * </em>
             */
        R["patchOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.Thumbnail#updateOrCreate
             * @methodOf lbServices.Thumbnail
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Thumbnail` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.Thumbnail#patchOrCreateWithWhere
             * @methodOf lbServices.Thumbnail
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` â€“ `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Thumbnail` object.)
             * </em>
             */
        R["patchOrCreateWithWhere"] = R["upsertWithWhere"];

            /**
             * @ngdoc method
             * @name lbServices.Thumbnail#update
             * @methodOf lbServices.Thumbnail
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` â€“ `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.Thumbnail#destroyById
             * @methodOf lbServices.Thumbnail
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Thumbnail` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.Thumbnail#removeById
             * @methodOf lbServices.Thumbnail
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Thumbnail` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.Thumbnail#patchAttributes
             * @methodOf lbServices.Thumbnail
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Thumbnail` object.)
             * </em>
             */
        R["patchAttributes"] = R["prototype$updateAttributes"];


        /**
        * @ngdoc property
        * @name lbServices.Thumbnail#modelName
        * @propertyOf lbServices.Thumbnail
        * @description
        * The name of the model represented by this $resource,
        * i.e. `Thumbnail`.
        */
        R.modelName = "Thumbnail";



        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.Group
 * @header lbServices.Group
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `Group` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "Group",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector', '$q',
      function(LoopBackResource, LoopBackAuth, $injector, $q) {
        var R = LoopBackResource(
        urlBase + "/groups/:id",
          { 'id': '@id' },
          {

            // INTERNAL. Use Group.user() instead.
            "prototype$__get__user": {
              url: urlBase + "/groups/:id/user",
              method: "GET",
            },

            // INTERNAL. Use Group.members.findById() instead.
            "prototype$__findById__members": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/groups/:id/members/:fk",
              method: "GET",
            },

            // INTERNAL. Use Group.members.destroyById() instead.
            "prototype$__destroyById__members": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/groups/:id/members/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Group.members.updateById() instead.
            "prototype$__updateById__members": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/groups/:id/members/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Group.members() instead.
            "prototype$__get__members": {
              isArray: true,
              url: urlBase + "/groups/:id/members",
              method: "GET",
            },

            // INTERNAL. Use Group.members.create() instead.
            "prototype$__create__members": {
              url: urlBase + "/groups/:id/members",
              method: "POST",
            },

            // INTERNAL. Use Group.members.destroyAll() instead.
            "prototype$__delete__members": {
              url: urlBase + "/groups/:id/members",
              method: "DELETE",
            },

            // INTERNAL. Use Group.members.count() instead.
            "prototype$__count__members": {
              url: urlBase + "/groups/:id/members/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Group#create
             * @methodOf lbServices.Group
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Group` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/groups",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Group#createMany
             * @methodOf lbServices.Group
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Group` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/groups",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Group#upsert
             * @methodOf lbServices.Group
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Group` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/groups",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.Group#replaceOrCreate
             * @methodOf lbServices.Group
             *
             * @description
             *
             * Replace an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Group` object.)
             * </em>
             */
            "replaceOrCreate": {
              url: urlBase + "/groups/replaceOrCreate",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Group#upsertWithWhere
             * @methodOf lbServices.Group
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` â€“ `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Group` object.)
             * </em>
             */
            "upsertWithWhere": {
              url: urlBase + "/groups/upsertWithWhere",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Group#exists
             * @methodOf lbServices.Group
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` â€“ `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/groups/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Group#findById
             * @methodOf lbServices.Group
             *
             * @description
             *
             * Find a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - Model id
             *
             *  - `filter` â€“ `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Group` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/groups/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Group#replaceById
             * @methodOf lbServices.Group
             *
             * @description
             *
             * Replace attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - Model id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Group` object.)
             * </em>
             */
            "replaceById": {
              url: urlBase + "/groups/:id/replace",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Group#find
             * @methodOf lbServices.Group
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` â€“ `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Group` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/groups",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Group#findOne
             * @methodOf lbServices.Group
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` â€“ `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Group` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/groups/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Group#updateAll
             * @methodOf lbServices.Group
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` â€“ `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
            "updateAll": {
              url: urlBase + "/groups/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Group#deleteById
             * @methodOf lbServices.Group
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Group` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/groups/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.Group#count
             * @methodOf lbServices.Group
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` â€“ `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` â€“ `{number=}` -
             */
            "count": {
              url: urlBase + "/groups/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Group#prototype$updateAttributes
             * @methodOf lbServices.Group
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Group` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/groups/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.Group#createChangeStream
             * @methodOf lbServices.Group
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` â€“ `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` â€“ `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/groups/change-stream",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Group#permit
             * @methodOf lbServices.Group
             *
             * @description
             *
             * group permission
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `param` â€“ `{object}` -
             *
             *  - `res` â€“ `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Group` object.)
             * </em>
             */
            "permit": {
              url: urlBase + "/groups/permit",
              method: "PUT",
            },

            // INTERNAL. Use User.group() instead.
            "::get::User::group": {
              url: urlBase + "/users/:id/group",
              method: "GET",
            },

            // INTERNAL. Use User.group.create() instead.
            "::create::User::group": {
              url: urlBase + "/users/:id/group",
              method: "POST",
            },

            // INTERNAL. Use User.group.createMany() instead.
            "::createMany::User::group": {
              isArray: true,
              url: urlBase + "/users/:id/group",
              method: "POST",
            },

            // INTERNAL. Use User.group.update() instead.
            "::update::User::group": {
              url: urlBase + "/users/:id/group",
              method: "PUT",
            },

            // INTERNAL. Use User.group.destroy() instead.
            "::destroy::User::group": {
              url: urlBase + "/users/:id/group",
              method: "DELETE",
            },

            // INTERNAL. Use GroupMapping.group() instead.
            "::get::GroupMapping::group": {
              url: urlBase + "/groupMappings/:id/group",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.Group#patchOrCreate
             * @methodOf lbServices.Group
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Group` object.)
             * </em>
             */
        R["patchOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.Group#updateOrCreate
             * @methodOf lbServices.Group
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Group` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.Group#patchOrCreateWithWhere
             * @methodOf lbServices.Group
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` â€“ `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Group` object.)
             * </em>
             */
        R["patchOrCreateWithWhere"] = R["upsertWithWhere"];

            /**
             * @ngdoc method
             * @name lbServices.Group#update
             * @methodOf lbServices.Group
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` â€“ `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.Group#destroyById
             * @methodOf lbServices.Group
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Group` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.Group#removeById
             * @methodOf lbServices.Group
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Group` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.Group#patchAttributes
             * @methodOf lbServices.Group
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Group` object.)
             * </em>
             */
        R["patchAttributes"] = R["prototype$updateAttributes"];


        /**
        * @ngdoc property
        * @name lbServices.Group#modelName
        * @propertyOf lbServices.Group
        * @description
        * The name of the model represented by this $resource,
        * i.e. `Group`.
        */
        R.modelName = "Group";


            /**
             * @ngdoc method
             * @name lbServices.Group#user
             * @methodOf lbServices.Group
             *
             * @description
             *
             * Fetches belongsTo relation user.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - PersistedModel id
             *
             *  - `refresh` â€“ `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
        R.user = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::get::Group::user"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.Group.members
     * @header lbServices.Group.members
     * @object
     * @description
     *
     * The object `Group.members` groups methods
     * manipulating `GroupMapping` instances related to `Group`.
     *
     * Call {@link lbServices.Group#members Group.members()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.Group#members
             * @methodOf lbServices.Group
             *
             * @description
             *
             * Queries members of group.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - PersistedModel id
             *
             *  - `filter` â€“ `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `GroupMapping` object.)
             * </em>
             */
        R.members = function() {
          var TargetResource = $injector.get("GroupMapping");
          var action = TargetResource["::get::Group::members"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Group.members#count
             * @methodOf lbServices.Group.members
             *
             * @description
             *
             * Counts members of group.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - PersistedModel id
             *
             *  - `where` â€“ `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` â€“ `{number=}` -
             */
        R.members.count = function() {
          var TargetResource = $injector.get("GroupMapping");
          var action = TargetResource["::count::Group::members"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Group.members#create
             * @methodOf lbServices.Group.members
             *
             * @description
             *
             * Creates a new instance in members of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `GroupMapping` object.)
             * </em>
             */
        R.members.create = function() {
          var TargetResource = $injector.get("GroupMapping");
          var action = TargetResource["::create::Group::members"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Group.members#createMany
             * @methodOf lbServices.Group.members
             *
             * @description
             *
             * Creates a new instance in members of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `GroupMapping` object.)
             * </em>
             */
        R.members.createMany = function() {
          var TargetResource = $injector.get("GroupMapping");
          var action = TargetResource["::createMany::Group::members"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Group.members#destroyAll
             * @methodOf lbServices.Group.members
             *
             * @description
             *
             * Deletes all members of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - PersistedModel id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.members.destroyAll = function() {
          var TargetResource = $injector.get("GroupMapping");
          var action = TargetResource["::delete::Group::members"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Group.members#destroyById
             * @methodOf lbServices.Group.members
             *
             * @description
             *
             * Delete a related item by id for members.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - PersistedModel id
             *
             *  - `fk` â€“ `{*}` - Foreign key for members
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.members.destroyById = function() {
          var TargetResource = $injector.get("GroupMapping");
          var action = TargetResource["::destroyById::Group::members"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Group.members#findById
             * @methodOf lbServices.Group.members
             *
             * @description
             *
             * Find a related item by id for members.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - PersistedModel id
             *
             *  - `fk` â€“ `{*}` - Foreign key for members
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `GroupMapping` object.)
             * </em>
             */
        R.members.findById = function() {
          var TargetResource = $injector.get("GroupMapping");
          var action = TargetResource["::findById::Group::members"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Group.members#updateById
             * @methodOf lbServices.Group.members
             *
             * @description
             *
             * Update a related item by id for members.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - PersistedModel id
             *
             *  - `fk` â€“ `{*}` - Foreign key for members
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `GroupMapping` object.)
             * </em>
             */
        R.members.updateById = function() {
          var TargetResource = $injector.get("GroupMapping");
          var action = TargetResource["::updateById::Group::members"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.GroupMapping
 * @header lbServices.GroupMapping
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `GroupMapping` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "GroupMapping",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector', '$q',
      function(LoopBackResource, LoopBackAuth, $injector, $q) {
        var R = LoopBackResource(
        urlBase + "/groupMappings/:id",
          { 'id': '@id' },
          {

            // INTERNAL. Use GroupMapping.group() instead.
            "prototype$__get__group": {
              url: urlBase + "/groupMappings/:id/group",
              method: "GET",
            },

            // INTERNAL. Use GroupMapping.user() instead.
            "prototype$__get__user": {
              url: urlBase + "/groupMappings/:id/user",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.GroupMapping#create
             * @methodOf lbServices.GroupMapping
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `GroupMapping` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/groupMappings",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.GroupMapping#createMany
             * @methodOf lbServices.GroupMapping
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `GroupMapping` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/groupMappings",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.GroupMapping#upsert
             * @methodOf lbServices.GroupMapping
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `GroupMapping` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/groupMappings",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.GroupMapping#replaceOrCreate
             * @methodOf lbServices.GroupMapping
             *
             * @description
             *
             * Replace an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `GroupMapping` object.)
             * </em>
             */
            "replaceOrCreate": {
              url: urlBase + "/groupMappings/replaceOrCreate",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.GroupMapping#upsertWithWhere
             * @methodOf lbServices.GroupMapping
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` â€“ `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `GroupMapping` object.)
             * </em>
             */
            "upsertWithWhere": {
              url: urlBase + "/groupMappings/upsertWithWhere",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.GroupMapping#exists
             * @methodOf lbServices.GroupMapping
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` â€“ `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/groupMappings/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.GroupMapping#findById
             * @methodOf lbServices.GroupMapping
             *
             * @description
             *
             * Find a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - Model id
             *
             *  - `filter` â€“ `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `GroupMapping` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/groupMappings/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.GroupMapping#replaceById
             * @methodOf lbServices.GroupMapping
             *
             * @description
             *
             * Replace attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - Model id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `GroupMapping` object.)
             * </em>
             */
            "replaceById": {
              url: urlBase + "/groupMappings/:id/replace",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.GroupMapping#find
             * @methodOf lbServices.GroupMapping
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` â€“ `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `GroupMapping` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/groupMappings",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.GroupMapping#findOne
             * @methodOf lbServices.GroupMapping
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` â€“ `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `GroupMapping` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/groupMappings/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.GroupMapping#updateAll
             * @methodOf lbServices.GroupMapping
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` â€“ `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
            "updateAll": {
              url: urlBase + "/groupMappings/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.GroupMapping#deleteById
             * @methodOf lbServices.GroupMapping
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `GroupMapping` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/groupMappings/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.GroupMapping#count
             * @methodOf lbServices.GroupMapping
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` â€“ `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` â€“ `{number=}` -
             */
            "count": {
              url: urlBase + "/groupMappings/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.GroupMapping#prototype$updateAttributes
             * @methodOf lbServices.GroupMapping
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `GroupMapping` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/groupMappings/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.GroupMapping#createChangeStream
             * @methodOf lbServices.GroupMapping
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` â€“ `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` â€“ `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/groupMappings/change-stream",
              method: "POST",
            },

            // INTERNAL. Use User.groupMapping() instead.
            "::get::User::groupMapping": {
              url: urlBase + "/users/:id/groupMapping",
              method: "GET",
            },

            // INTERNAL. Use User.groupMapping.create() instead.
            "::create::User::groupMapping": {
              url: urlBase + "/users/:id/groupMapping",
              method: "POST",
            },

            // INTERNAL. Use User.groupMapping.createMany() instead.
            "::createMany::User::groupMapping": {
              isArray: true,
              url: urlBase + "/users/:id/groupMapping",
              method: "POST",
            },

            // INTERNAL. Use User.groupMapping.update() instead.
            "::update::User::groupMapping": {
              url: urlBase + "/users/:id/groupMapping",
              method: "PUT",
            },

            // INTERNAL. Use User.groupMapping.destroy() instead.
            "::destroy::User::groupMapping": {
              url: urlBase + "/users/:id/groupMapping",
              method: "DELETE",
            },

            // INTERNAL. Use Group.members.findById() instead.
            "::findById::Group::members": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/groups/:id/members/:fk",
              method: "GET",
            },

            // INTERNAL. Use Group.members.destroyById() instead.
            "::destroyById::Group::members": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/groups/:id/members/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Group.members.updateById() instead.
            "::updateById::Group::members": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/groups/:id/members/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Group.members() instead.
            "::get::Group::members": {
              isArray: true,
              url: urlBase + "/groups/:id/members",
              method: "GET",
            },

            // INTERNAL. Use Group.members.create() instead.
            "::create::Group::members": {
              url: urlBase + "/groups/:id/members",
              method: "POST",
            },

            // INTERNAL. Use Group.members.createMany() instead.
            "::createMany::Group::members": {
              isArray: true,
              url: urlBase + "/groups/:id/members",
              method: "POST",
            },

            // INTERNAL. Use Group.members.destroyAll() instead.
            "::delete::Group::members": {
              url: urlBase + "/groups/:id/members",
              method: "DELETE",
            },

            // INTERNAL. Use Group.members.count() instead.
            "::count::Group::members": {
              url: urlBase + "/groups/:id/members/count",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.GroupMapping#patchOrCreate
             * @methodOf lbServices.GroupMapping
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `GroupMapping` object.)
             * </em>
             */
        R["patchOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.GroupMapping#updateOrCreate
             * @methodOf lbServices.GroupMapping
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `GroupMapping` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.GroupMapping#patchOrCreateWithWhere
             * @methodOf lbServices.GroupMapping
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` â€“ `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `GroupMapping` object.)
             * </em>
             */
        R["patchOrCreateWithWhere"] = R["upsertWithWhere"];

            /**
             * @ngdoc method
             * @name lbServices.GroupMapping#update
             * @methodOf lbServices.GroupMapping
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` â€“ `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.GroupMapping#destroyById
             * @methodOf lbServices.GroupMapping
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `GroupMapping` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.GroupMapping#removeById
             * @methodOf lbServices.GroupMapping
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `GroupMapping` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.GroupMapping#patchAttributes
             * @methodOf lbServices.GroupMapping
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `GroupMapping` object.)
             * </em>
             */
        R["patchAttributes"] = R["prototype$updateAttributes"];


        /**
        * @ngdoc property
        * @name lbServices.GroupMapping#modelName
        * @propertyOf lbServices.GroupMapping
        * @description
        * The name of the model represented by this $resource,
        * i.e. `GroupMapping`.
        */
        R.modelName = "GroupMapping";


            /**
             * @ngdoc method
             * @name lbServices.GroupMapping#group
             * @methodOf lbServices.GroupMapping
             *
             * @description
             *
             * Fetches belongsTo relation group.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - PersistedModel id
             *
             *  - `refresh` â€“ `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Group` object.)
             * </em>
             */
        R.group = function() {
          var TargetResource = $injector.get("Group");
          var action = TargetResource["::get::GroupMapping::group"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.GroupMapping#user
             * @methodOf lbServices.GroupMapping
             *
             * @description
             *
             * Fetches belongsTo relation user.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` â€“ `{*}` - PersistedModel id
             *
             *  - `refresh` â€“ `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
        R.user = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::get::GroupMapping::user"];
          return action.apply(R, arguments);
        };


        return R;
      }]);


  module
  .factory('LoopBackAuth', function() {
    var props = ['accessTokenId', 'currentUserId', 'rememberMe'];
    var propsPrefix = '$LoopBack$';

    function LoopBackAuth() {
      var self = this;
      props.forEach(function(name) {
        self[name] = load(name);
      });
      this.currentUserData = null;
    }

    LoopBackAuth.prototype.save = function() {
      var self = this;
      var storage = this.rememberMe ? localStorage : sessionStorage;
      props.forEach(function(name) {
        save(storage, name, self[name]);
      });
    };

    LoopBackAuth.prototype.setUser = function(accessTokenId, userId, userData) {
      this.accessTokenId = accessTokenId;
      this.currentUserId = userId;
      this.currentUserData = userData;
    };

    LoopBackAuth.prototype.clearUser = function() {
      this.accessTokenId = null;
      this.currentUserId = null;
      this.currentUserData = null;
    };

    LoopBackAuth.prototype.clearStorage = function() {
      props.forEach(function(name) {
        save(sessionStorage, name, null);
        save(localStorage, name, null);
      });
    };

    return new LoopBackAuth();

    // Note: LocalStorage converts the value to string
    // We are using empty string as a marker for null/undefined values.
    function save(storage, name, value) {
      try {
        var key = propsPrefix + name;
        if (value == null) value = '';
        storage[key] = value;
      } catch (err) {
        console.log('Cannot access local/session storage:', err);
      }
    }

    function load(name) {
      var key = propsPrefix + name;
      return localStorage[key] || sessionStorage[key] || null;
    }
  })
  .config(['$httpProvider', function($httpProvider) {
    $httpProvider.interceptors.push('LoopBackAuthRequestInterceptor');
  }])
  .factory('LoopBackAuthRequestInterceptor', ['$q', 'LoopBackAuth',
    function($q, LoopBackAuth) {
      return {
        'request': function(config) {
          // filter out external requests
          var host = getHost(config.url);
          if (host && host !== urlBaseHost) {
            return config;
          }

          if (LoopBackAuth.accessTokenId) {
            config.headers[authHeader] = LoopBackAuth.accessTokenId;
          } else if (config.__isGetCurrentUser__) {
            // Return a stub 401 error for User.getCurrent() when
            // there is no user logged in
            var res = {
              body: { error: { status: 401 }},
              status: 401,
              config: config,
              headers: function() { return undefined; },
            };
            return $q.reject(res);
          }
          return config || $q.when(config);
        },
      };
    }])

  /**
   * @ngdoc object
   * @name lbServices.LoopBackResourceProvider
   * @header lbServices.LoopBackResourceProvider
   * @description
   * Use `LoopBackResourceProvider` to change the global configuration
   * settings used by all models. Note that the provider is available
   * to Configuration Blocks only, see
   * {@link https://docs.angularjs.org/guide/module#module-loading-dependencies Module Loading & Dependencies}
   * for more details.
   *
   * ## Example
   *
   * ```js
   * angular.module('app')
   *  .config(function(LoopBackResourceProvider) {
   *     LoopBackResourceProvider.setAuthHeader('X-Access-Token');
   *  });
   * ```
   */
  .provider('LoopBackResource', function LoopBackResourceProvider() {
    /**
     * @ngdoc method
     * @name lbServices.LoopBackResourceProvider#setAuthHeader
     * @methodOf lbServices.LoopBackResourceProvider
     * @param {string} header The header name to use, e.g. `X-Access-Token`
     * @description
     * Configure the REST transport to use a different header for sending
     * the authentication token. It is sent in the `Authorization` header
     * by default.
     */
    this.setAuthHeader = function(header) {
      authHeader = header;
    };

    /**
     * @ngdoc method
     * @name lbServices.LoopBackResourceProvider#getAuthHeader
     * @methodOf lbServices.LoopBackResourceProvider
     * @description
     * Get the header name that is used for sending the authentication token.
     */
    this.getAuthHeader = function() {
      return authHeader;
    };

    /**
     * @ngdoc method
     * @name lbServices.LoopBackResourceProvider#setUrlBase
     * @methodOf lbServices.LoopBackResourceProvider
     * @param {string} url The URL to use, e.g. `/api` or `//example.com/api`.
     * @description
     * Change the URL of the REST API server. By default, the URL provided
     * to the code generator (`lb-ng` or `grunt-loopback-sdk-angular`) is used.
     */
    this.setUrlBase = function(url) {
      urlBase = url;
      urlBaseHost = getHost(urlBase) || location.host;
    };

    /**
     * @ngdoc method
     * @name lbServices.LoopBackResourceProvider#getUrlBase
     * @methodOf lbServices.LoopBackResourceProvider
     * @description
     * Get the URL of the REST API server. The URL provided
     * to the code generator (`lb-ng` or `grunt-loopback-sdk-angular`) is used.
     */
    this.getUrlBase = function() {
      return urlBase;
    };

    this.$get = ['$resource', function($resource) {
      var LoopBackResource = function(url, params, actions) {
        var resource = $resource(url, params, actions);

        // Angular always calls POST on $save()
        // This hack is based on
        // http://kirkbushell.me/angular-js-using-ng-resource-in-a-more-restful-manner/
        resource.prototype.$save = function(success, error) {
          // Fortunately, LoopBack provides a convenient `upsert` method
          // that exactly fits our needs.
          var result = resource.upsert.call(this, {}, this, success, error);
          return result.$promise || result;
        };
        return resource;
      };

      LoopBackResource.getUrlBase = function() {
        return urlBase;
      };

      LoopBackResource.getAuthHeader = function() {
        return authHeader;
      };

      return LoopBackResource;
    }];
  });
})(window, window.angular);
