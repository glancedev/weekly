"use strict";function pageTitle(e,t){return{link:function(r,n){var o=function(e,r,o,a,i){var s="Startup Weekly";r.data&&r.data.pageTitle&&(s="Startup Weekly | "+r.data.pageTitle),t(function(){n.text(s)})};e.$on("$stateChangeStart",o)}}}function sideNavigation(e){return{restrict:"A",link:function(e,t){t.metisMenu();var r=$('#side-menu a:not([href$="\\#"])');r.click(function(){$(window).width()<769&&$("body").toggleClass("show-sidebar")})}}}function minimalizaMenu(e){return{restrict:"EA",template:'<div class="header-link hide-menu" ng-click="minimalize()"><i class="fa fa-bars"></i></div>',controller:["$scope","$element",function(e,t){e.minimalize=function(){$(window).width()<769?$("body").toggleClass("show-sidebar"):$("body").toggleClass("hide-sidebar")}}]}}function sparkline(){return{restrict:"A",scope:{sparkData:"=",sparkOptions:"="},link:function(e,t,r){e.$watch(e.sparkData,function(){n()}),e.$watch(e.sparkOptions,function(){n()});var n=function(){$(t).sparkline(e.sparkData,e.sparkOptions)}}}}function icheck(e){return{restrict:"A",require:"ngModel",link:function(t,r,n,o){return e(function(){var e;return e=n.value,t.$watch(n.ngModel,function(e){$(r).iCheck("update")}),$(r).iCheck({checkboxClass:"icheckbox_square-green",radioClass:"iradio_square-green"}).on("ifChanged",function(a){if("checkbox"===$(r).attr("type")&&n.ngModel&&t.$apply(function(){return o.$setViewValue(a.target.checked)}),"radio"===$(r).attr("type")&&n.ngModel)return t.$apply(function(){return o.$setViewValue(e)})})})}}}function smallHeader(){return{restrict:"A",scope:!0,controller:["$scope","$element",function(e,t){e.small=function(){var e=t.find("i:first"),r=t.find("#hbreadcrumb");t.toggleClass("small-header"),r.toggleClass("m-t-lg"),e.toggleClass("fa-arrow-up").toggleClass("fa-arrow-down")}}]}}function animatePanel(e,t){return{restrict:"A",link:function(r,n,o){var a=0,i=.06,s=Math.abs(i)+a;t.current.name;o.effect||(o.effect="zoomIn"),i=o.delay?o.delay/10:.06,o.child?o.child="."+o.child:o.child=".row > div";var p=n.find(o.child);p.addClass("opacity-0");p.length*i*1e3+700;e(function(){p=n.find(o.child),p.addClass("stagger").addClass("animated-panel").addClass(o.effect);var t=p.length+10,r=t*i*1e4/10;p.each(function(e,t){s+=i;var r=Math.round(10*s)/10;$(t).css("animation-delay",r+"s"),$(t).removeClass("opacity-0")}),e(function(){$(".stagger").css("animation",""),$(".stagger").removeClass(o.effect).removeClass("animated-panel").removeClass("stagger"),p.resize()},r)})}}}function landingScrollspy(){return{restrict:"A",link:function(e,t,r){t.scrollspy({target:".navbar-fixed-top",offset:80})}}}function clockPicker(){return{restrict:"A",link:function(e,t){t.clockpicker()}}}function dateTimePicker(){return{require:"?ngModel",restrict:"AE",scope:{pick12HourFormat:"@",language:"@",useCurrent:"@",location:"@"},link:function(e,t,r){t.datetimepicker({pick12HourFormat:e.pick12HourFormat,language:e.language,useCurrent:e.useCurrent}),t.on("blur",function(){})}}}function inputPressEnter(){return function(e,t,r){t.bind("keydown keypress",function(t){13===t.which&&(e.$apply(function(){e.$eval(r.inputPressEnter)}),t.preventDefault())})}}function uibTypeaheadPopup($$debounce){return{scope:{matches:"=",query:"=",active:"=",position:"&",moveInProgress:"=",select:"&",assignIsOpen:"&",debounce:"&"},replace:!0,templateUrl:function(e,t){return t.popupTemplateUrl||"uib/template/typeahead/typeahead-popup.html"},link:function(scope,element,attrs){scope.templateUrl=attrs.templateUrl,scope.isOpen=function(){var e=scope.matches.length>0;return scope.assignIsOpen({isOpen:e}),e},scope.isActive=function(e){return scope.active===e},scope.selectActive=function(e){scope.active=e},scope.selectMatch=function(e,t){var r=scope.debounce();angular.isNumber(r)||angular.isObject(r)?$$debounce(function(){scope.select({activeIdx:e,evt:t})},angular.isNumber(r)?r:r.default):scope.select({activeIdx:e,evt:t})},scope.selectMatchExt=function(activeIdx,evt,callback){var debounce=scope.debounce();angular.isNumber(debounce)||angular.isObject(debounce)?$$debounce(function(){scope.select({activeIdx:activeIdx,evt:evt})},angular.isNumber(debounce)?debounce:debounce.default):scope.select({activeIdx:activeIdx,evt:evt}),callback&&eval(callback)}}}}function fixWrapperHeight(){var e=62,t=$("#navigation").height(),r=$(".content").height();r<t&&$("#wrapper").css("min-height",t+"px"),r<t&&t<$(window).height()&&$("#wrapper").css("min-height",$(window).height()-e+"px"),r>t&&r<$(window).height()&&$("#wrapper").css("min-height",$(window).height()-e+"px")}function setBodySmall(){$(this).width()<769?$("body").addClass("page-small"):($("body").removeClass("page-small"),$("body").removeClass("show-sidebar"))}pageTitle.$inject=["$rootScope","$timeout"],sideNavigation.$inject=["$timeout"],minimalizaMenu.$inject=["$rootScope"],icheck.$inject=["$timeout"],animatePanel.$inject=["$timeout","$state"],uibTypeaheadPopup.$inject=["$$debounce"],angular.module("testApp",["ngCookies","ngResource","ngSanitize","ui.router","ngAnimate","ngSanitize","infinite-scroll","ui.bootstrap","ui.select","ngStorage","angular-slidezilla","lbServices","validation.match"]).config(["$stateProvider","$urlRouterProvider","$locationProvider","$httpProvider","uiSelectConfig",function(e,t,r,n,o){t.otherwise("/news"),r.html5Mode(!0),n.interceptors.push("authInterceptor"),o.theme="bootstrap"}]).factory("authInterceptor",["$rootScope","$q","$cookies","$location",function(e,t,r,n){return{request:function(e){return e.headers=e.headers||{},r.get("token")&&(e.headers.Authorization=r.get("token")),e},responseError:function(e){return 401===e.status?(n.path("/login"),r.remove("token"),t.reject(e)):t.reject(e)}}}]).run(["$rootScope","$state","Auth",function(e,t,r){e.$on("$stateChangeStart",function(e,t){moment.locale("ko"),t.authenticate&&!r.isLoggedIn()&&e.preventDefault()})}]),function(e,t){e.module("testApp.constants",[]).constant("appConfig",{userRoles:["guest","user","admin"]}),e.module("infinite-scroll").value("THROTTLE_MILLISECONDS",500)}(angular),angular.module("testApp").config(["$stateProvider",function(e){e.state("login",{url:"/login",templateUrl:"app/account/login/login.html",controller:"LoginCtrl"}).state("signup",{url:"/signup",templateUrl:"app/account/signup/signup.html",controller:"SignupCtrl"}).state("signup_done",{url:"/signup_done",templateUrl:"app/account/signup/signup_done.html",controller:"SignupCtrl"}).state("proup",{url:"/proup",templateUrl:"app/account/proup/proup.html",controller:"ProupCtrl"}).state("profile",{url:"/profile",templateUrl:"app/account/profile/profile.html",controller:"ProfileCtrl"}).state("profile_out",{url:"/profile_out",templateUrl:"app/account/profile/profile_out.html",controller:"ProfileCtrl"}).state("password_change",{url:"/password_change/:user_id/:access_token",templateUrl:"app/account/settings/password_change.html",controller:"SettingsCtrl"}).state("password_change_done",{url:"/password_change_done",templateUrl:"app/account/settings/password_change_done.html",controller:"SettingsCtrl"}).state("password_recovery",{url:"/password_recovery",templateUrl:"app/account/settings/password_recovery.html",controller:"SettingsCtrl"}).state("password_sended",{url:"/password_sended/:email",templateUrl:"app/account/settings/password_sended.html",controller:"SettingsCtrl"}).state("member",{url:"/member",templateUrl:"app/account/member/member.html",controller:"MemberCtrl"}).state("member.all",{url:"/all",templateUrl:"app/account/member/member_all.html",controller:"MemberCtrl"}).state("member.wait",{url:"/wait",templateUrl:"app/account/member/member_wait.html",controller:"MemberCtrl"}).state("member.cancel",{url:"/cancel",templateUrl:"app/account/member/member_cancel.html",controller:"MemberCtrl"}).state("member.code",{url:"/code",templateUrl:"app/account/member/member_code.html",controller:"MemberCtrl"}).state("payment",{url:"/payment",templateUrl:"app/account/payment/payment.html",controller:"PaymentCtrl"}).state("payment.info",{url:"/info",templateUrl:"app/account/payment/payment_info.html",controller:"PaymentCtrl"}).state("payment.history",{url:"/history",templateUrl:"app/account/payment/payment_history.html",controller:"PaymentCtrl"})}]),angular.module("testApp").controller("BusinessCtrl",["$rootScope","$scope","$state","$location","$window","$timeout","$log","$http","$localStorage","Business","Banner","timeFactory",function(e,t,r,n,o,a,i,s,p,u,l,d){e.$state=r,t.today=d.getToday(),t.tomorrow=d.getTomorrow(),t.contents=[],t.filter={filter:{include:[{relation:"organizations",scope:{fields:["id","name"]}}],where:{and:[{display:!0},{or:[{deadline:{gte:t.today}},{deadline:null}]}]},order:"created DESC",limit:"30",skip:0}},t.getFilter=function(e){switch(e){case 0:t.filter.filter.skip=0,t.filter.filter.order="created DESC",t.filter.filter.where={and:[{display:!0},{or:[{deadline:{gte:t.today}},{deadline:null}]}]};break;case 1:t.filter.filter.skip=0,t.filter.filter.order="deadline ASC",t.filter.filter.where={and:[{display:!0},{ordinary:!1},{deadline:{gte:t.today}}]};break;default:t.filter.filter.skip=0,t.filter.filter.order="created DESC",t.filter.filter.where={and:[{display:!0},{ordinary:!0}]}}},t.loadMore=function(e){null!=e&&(t.index=e,t.contents=[],t.getFilter(e)),u.find(t.filter).$promise.then(function(e){t.contents=t.contents.concat(e),0==e.length?t.infiniteBreak=!0:t.infiniteBreak=!1,t.filter.filter.skip+=30},function(e){alert(e.data.error.message)})},t.loadBanner=function(e){l.find({filter:{include:["file"],where:{and:[{display:!0},{name:{like:"business"}}]},order:"start ASC"}}).$promise.then(function(e){t.banners=[],t.banners=t.banners.concat(e)},function(e){alert(e.data.error.message)})},t.loadBanner(),t.sub_menu=[{title:"등록일순으로 정렬"},{title:"마감일순으로 정렬"},{title:"상시접수사업 보기"}],t.checkboxModel={value1:"",value2:""}}]),angular.module("testApp").config(["$stateProvider",function(e){e.state("business",{url:"/business",templateUrl:"app/business/business.html",controller:"BusinessCtrl"})}]),angular.module("testApp").controller("CompanyCtrl",["$rootScope","$scope","$state","$location","$window","$timeout","$log","$http","$localStorage","NewsFactory","News","Company","Person","Category",function(e,t,r,n,o,a,i,s,p,u,l,d,c,m){e.$state=r,t.where={state:[],field:[],totalMoney:[],founderIds:[],foundationDate:[],location:[],keywords:[]},e.input=t.input={},t.searchTools={list:[]},t.generateWhereOrList=["founderIds"],t.filter={filter:{include:[{relation:"thumbnail",scope:{fields:["id","medium"]}},{relation:"product",scope:{fields:["id","name"]}}],where:{type:"스타트업"},order:"created DESC",limit:20,skip:0}},t.generateWhereOr=function(e){var r={or:[]};return angular.forEach(t.where[e],function(t,n){var o={};o[e]=t,r.or.push(o)}),r},t.generateWhereInq=function(e){var r={};return r[e]={inq:t.where[e]},r},t.generateWhereKeywords=function(e){var r={or:[]};return angular.forEach(t.where[e],function(e,t){r.or.push({name:{like:e}}),r.or.push({nameEng:{like:e}})}),r.or.push({nameTag:{inq:t.where[e]}}),r},t.generateWhere=function(){return new Promise(function(e,r){var n={and:[]};for(var o in t.where)0!==t.where[o].length&&(t.generateWhereOrList.includes(o)?n.and.push(t.generateWhereOr(o)):"keywords"===o?n.and.push(t.generateWhereKeywords(o)):n.and.push(t.generateWhereInq(o)));return n.and.length>0?t.filter.filter.where=n:t.filter.filter.where={},e(t.filter)})},t.contents=[],"company"==r.current.name?t.infiniteBreak=!1:t.infiniteBreak=!0,t.loadMore=function(){t.generateWhere().then(function(e){d.find(e).$promise.then(function(r){t.contents=t.contents.concat(r),0==r.length?t.infiniteBreak=!0:t.infiniteBreak=!1,e.filter.skip+=20},function(e){alert(e.data.error.message)})})},e.putTags=t.putTags=function(e,r){if(t.generateWhereOrList.includes(e)){if(null==r.id||t.where[e].includes(r.id))return void(t.input[e]="");t.searchTools.list.push({group:e,name:r.name,id:r.id}),t.where[e].push(r.id)}else{if(t.where[e].includes(r))return;t.searchTools.list.push({group:e,name:r}),t.where[e].push(r)}t.input[e]="",t.loadMore()},e.removeTags=t.removeTags=function(e,r,n){var o=null==r?n:r;t.where[e].splice(t.where[e].indexOf(o),1),t.loadMore()},t.searchAutoComplete=function(e,t,r){if("Company"===e)var e=d;if("Person"===e)var e=c;return e[t]({filter:{where:{name:{like:r}},order:"name ASC",limit:10}}).$promise.then(function(e){return e.map(function(e){return e})},function(e){alert(e.data.error.message)})},t.getCategory=function(e,r,n,o,a,i,s){var p="items_"+n;if(t[p]=[],"Company"===e)var e=d;if("Person"===e)var e=c;if("Category"===e)var e=m;e[r]({id:n,filter:{fields:o.split(","),limit:a,order:i}}).$promise.then(function(e){s?t[p]=t[p].concat(e):angular.forEach(e,function(e){t[p].push(e.name)})},function(e){alert(e.data.error.message)})},t.sub_menu2=[{title:"스타트업",icon:"",link:"company.startup"},{title:"벤처캐피탈",icon:"",link:"company.vc"},{title:"엑셀러레이터",icon:"",link:"company.ac"}],t.sub_menu3=[{title:"신규 설립 회사",icon:"",link:"#"},{title:"최근 투자유치 회사",icon:"",link:"#"},{title:"투자금 100억원 이상",icon:"",link:"#"},{title:"AR/VA 분야 회사",icon:"",link:"#"},{title:"실리콘벨리 소재 회사",icon:"",link:"#"},{title:"프라이머 출신 회사",icon:"",link:"#"},{title:"대기업 출자 벤처캐피탈",icon:"",link:"#"}]}]),angular.module("testApp").config(["$stateProvider",function(e){e.state("startup",{url:"/startup",templateUrl:"app/company/company_startup.html",controller:"CompanyStartupCtrl"}).state("vc",{url:"/vc",templateUrl:"app/company/company_vc.html",controller:"CompanyVcCtrl"}).state("ac",{url:"/ac",templateUrl:"app/company/company_ac.html",controller:"CompanyAcCtrl"}).state("companydetail",{url:"/company/:id",templateUrl:"app/company/company_detail.html",controller:"CompanyDetailCtrl"})}]),angular.module("testApp").controller("CompanyAcCtrl",["$rootScope","$scope","$state","$location","$window","$timeout","$log","$http","$localStorage","NewsFactory","News","Company","Person","Category","timeFactory",function(e,t,r,n,o,a,i,s,p,u,l,d,c,m,f){t.generateWhereOrList=["personIds","company"],t.generateWhereCompareList=["foundationDate_gte","foundationDate_lte"],t.filter={filter:{include:[{relation:"thumbnail",scope:{fields:["id","medium"]}},{relation:"incubation",scope:{order:"deadline DESC"}}],where:{},order:"created DESC",limit:20,skip:0}},t.reset=function(){t.where={isRecruiting:[],isMoney:[],isPlace:[],field:[],foundationDate_gte:[],foundationDate_lte:[],location:[],keywords:[]},e.input=t.input={},t.searchTools={list:[],save:""}},t.reset(),t.generateWhereOr=function(e){var r={or:[]};return angular.forEach(t.where[e],function(t,n){var o={};o[e]=t,r.or.push(o)}),r},t.generateWhereInq=function(e){var r={};return r[e]={inq:t.where[e]},r},t.generateWhereCompare=function(e){return t.where[e][0]},t.generateWhereKeywords=function(e){var r={or:[]};return angular.forEach(t.where[e],function(e,t){r.or.push({name:{like:e,options:"i"}}),r.or.push({nameEng:{like:e,options:"i"}})}),r.or.push({nameTag:{inq:t.where[e]}}),r},t.generateWhere=function(){return new Promise(function(e,r){var n={and:[]};for(var o in t.where)0!==t.where[o].length&&(t.generateWhereOrList.includes(o)?n.and.push(t.generateWhereOr(o)):t.generateWhereCompareList.includes(o)?n.and.push(t.generateWhereCompare(o)):"keywords"===o?n.and.push(t.generateWhereKeywords(o)):n.and.push(t.generateWhereInq(o)));return n.and.length>0?t.filter.filter.where=n:t.filter.filter.where={},e(t.filter)})},t.contents=[],t.loadMore=function(){t.generateWhere().then(function(e){null==e.filter.where.and?e.filter.where.and=[{type:"보육기관"}]:e.filter.where.and.push({type:"보육기관"}),d.find(e).$promise.then(function(r){t.contents=t.contents.concat(r),0==r.length?t.infiniteBreak=!0:t.infiniteBreak=!1,e.filter.skip+=20},function(e){alert(e.data.error.message)})})},e.putTags=t.putTags=function(e,r,n){if(t.generateWhereOrList.includes(e)){if(null==r.id||t.where[e].includes(r.id))return void(t.input[e]="");t.searchTools.list.push({group:e,name:r.name,id:r.id}),t.where[e].push(r.id)}else if(t.generateWhereCompareList.includes(e)){var o=e.split("_")[0],a=e.split("_")[1],i=r.split("_")[0],s=r.split("_")[1];angular.forEach(t.searchTools.list,function(r,n){return r.id==e?t.searchTools.list.splice(n,1):null}),t.where[e]=[],t.searchTools.list.push({group:e,name:i,id:e});var p={};p[o]={},p[o][a]=s,t.where[e].push(p)}else{if(t.where[e].includes(r))return;null!=n?(t.searchTools.list.push({group:e,id:r,name:n}),t.where[e].push(r)):(t.searchTools.list.push({group:e,name:r}),t.where[e].push(r))}t.input[e]="",t.contents=[],t.filter.filter.skip=0,t.loadMore()},e.removeTags=t.removeTags=function(e,r,n){t.contents=[],t.filter.filter.skip=0;var o=null==r?n:r;t.where[e].splice(t.where[e].indexOf(o),1),t.loadMore()},e.hotTags=t.hotTags=function(e,r,n){if(t.reset(),null!=e)var e=e.split(",");if(null!=r)var r=r.split(",");if(null!=n)var n=n.split(",");angular.forEach(e,function(e,o){null===r?t.putTags(e,n[o]):t.putTags(e,{id:r[o],name:n[o]})})},t.status={isopen:!1},t.saveFilter=function(e){if(t.searchTools.save){if(!t.filter.filter.where)return void alert("Sorry, you can't save an empty filter.");var r={name:t.searchTools.save,searchTools:t.searchTools.list,filter:t.where};null==p[e]&&(p[e]=[]),p[e].push(r),t.status.isopen=!1,t.reset()}},t.getSavedFilter=function(e){t.saved_filter=p[e]},t.removeSavedFilter=function(e,r){e.preventDefault(),e.stopPropagation(),t.saved_filter.splice(r,1)},t.selectSavedFilter=function(e,r){t.where=t.saved_filter[r].filter,t.searchTools.list=t.saved_filter[r].searchTools,t.contents=[],t.filter.filter.skip=0,t.loadMore()},t.searchAutoComplete=function(e,t,r,n,o){if("Company"===e)var e=d;if("Person"===e)var e=c;if("Product"===e)var e=Product;if("Category"===e)var e=m;return e[t]({id:o,filter:{where:{name:{like:r,options:"i"}},order:"name ASC",limit:30}}).$promise.then(function(e){return e.map(function(e){return n?e.name:e})},function(e){alert(e.data.error.message)})},t.getCategory=function(e,r,n,o,a,i,s,p){var u="items_"+n;if(t[u]=[],"Company"===e)var e=d;if("Person"===e)var e=c;if("Product"===e)var e=Product;if("Category"===e)var e=m;var l={fields:o.split(","),limit:a,order:i};null!=p&&(l.where={},l.where[p]=!0),e[r]({id:n,filter:l}).$promise.then(function(e){s?t[u]=t[u].concat(e):angular.forEach(e,function(e){t[u].push(e.name)})},function(e){alert(e.data.error.message)})},moment.locale("ko"),t.today=moment().format("MM/DD (dddd)"),t.yesterday=moment().add(-1,"days").format("MM/DD (dddd)"),t.beforemonth=f.getBeforeMonth(),t.before3month=f.getBefore3Month(),t.before6month=f.getBefore6Month(),t.beforeyear=f.getBeforeYear(),t.sub_menu2=[{title:"스타트업",icon:"",link:"startup"},{title:"벤처캐피탈",icon:"",link:"vc"},{title:"엑셀러레이터",icon:"",link:"ac"}]}]),angular.module("testApp").controller("CompanyDetailCtrl",["$rootScope","$scope","$state","$stateParams","$location","$window","$timeout","$log","$http","$localStorage","NewsFactory","News","Company","Person","Category","Ipo","Mna","Incubation","Investment","timeFactory",function(e,t,r,n,o,a,i,s,p,u,l,d,c,m,f,y,h,g,v,_){t.where={state:[],field:[],totalMoney:[],founderIds:[],foundationDate:[],location:[],keywords:[]},e.input=t.input={},t.searchTools={list:[]},t.generateWhereOrList=["founderIds"],t.filter={filter:{include:[{relation:"thumbnail",scope:{fields:["id","medium"]}},{relation:"product",scope:{fields:["id","name"]}}],where:{},order:"created DESC",limit:"15",skip:null}},t.generateWhereOr=function(e){var r={or:[]};return angular.forEach(t.where[e],function(t,n){var o={};o[e]=t,r.or.push(o)}),r},t.generateWhereInq=function(e){var r={};return r[e]={inq:t.where[e]},r},t.generateWhereKeywords=function(e){var r={or:[]};return angular.forEach(t.where[e],function(e,t){r.or.push({name:{like:e}}),r.or.push({nameEng:{like:e}})}),r.or.push({nameTag:{inq:t.where[e]}}),r},t.generateWhere=function(){return new Promise(function(e,r){var n={and:[]};for(var o in t.where)0!==t.where[o].length&&(t.generateWhereOrList.includes(o)?n.and.push(t.generateWhereOr(o)):"keywords"===o?n.and.push(t.generateWhereKeywords(o)):n.and.push(t.generateWhereInq(o)));return n.and.length>0?t.filter.filter.where=n:t.filter.filter.where={},e(t.filter)})},c.findById({id:n.id,filter:{include:[{relation:"thumbnail",scope:{}},{relation:"product"},{relation:"founders",scope:{fields:["id","name"]}},{relation:"incubation",scope:{include:[{relation:"companies",scope:{fields:["id","name"]}}],order:"deadline DESC"}},{relation:"employee",scope:{include:[{relation:"person",scope:{fields:["id","name"]}}],fields:["id","employeeId","position"],where:{current:!0}}},{relation:"takeover",scope:{include:[{relation:"handover",scope:{fields:["id","name"]}}]}},{relation:"ipos",include:[{relation:"company",scope:{fields:["id","name"]}}]},{relation:"newsCompany",scope:{include:[{relation:"news",scope:{fields:["title","link","datetime"]}}]}}]}}).$promise.then(function(e){t.company=e,t.company.modified=new Date,0!==e.product.length&&(t.products=e.product),0!==e.incubation.length&&(t.incubations=e.incubation,angular.forEach(t.incubations,function(e,t){e.company=[],angular.forEach(e.compaines,function(t,r){e.company.push({id:t.id,name:t.name})})})),t.inserted_tag=t.company.field},function(e){}),v.find({filter:{include:[{relation:"investee",scope:{fields:["id","name"]}},{relation:"investorCompany",scope:{fields:["id","name"]}},{relation:"investorPerson",scope:{fields:["id","name"]}}],where:{investeeId:n.id},order:"announcementDate DESC"}}).$promise.then(function(e){t.invest_total_money=0;for(var r=0;r<e.length;r++)t.invest_total_money+=e[r].money;t.invests=e,t.invests.modified=new Date},function(e){}),h.find({filter:{include:[{relation:"takeover",scope:{fields:["id","name"]}},{relation:"handover",scope:{fields:["id","name"]}}],where:{companyIds:n.id},order:"announcementDate DESC"}}).$promise.then(function(e){t.mnas=e,t.mnas.modified=new Date},function(e){}),v.find({filter:{include:[{relation:"investee",scope:{fields:["id","name","description","state"]}}],where:{companyIds:n.id}}}).$promise.then(function(e){t.inv2Model=e,t.inv2Model.modified=new Date,t.inv3Model=t.removeDuplicates(e,"investeeId")}),t.removeDuplicates=function(e,t){for(var r,n=[],o=[],a=0;a<e.length;a++)r=e[a][t],o.indexOf(r)===-1&&(n.push(e[a]),o.push(r));return n},g.find({filter:{include:[{relation:"company",scope:{fields:["id","name"]}}],where:{companyIds:n.id}}}).$promise.then(function(e){t.icbModel=e,t.icbModel.modified=new Date}),e.putTags=t.putTags=function(e,r){if(t.generateWhereOrList.includes(e)){if(null==r.id||t.where[e].includes(r.id))return void(t.input[e]="");t.searchTools.list.push({group:e,name:r.name,id:r.id}),t.where[e].push(r.id)}else{if(t.where[e].includes(r))return;t.searchTools.list.push({group:e,name:r}),t.where[e].push(r)}t.input[e]="",t.loadMore()},e.removeTags=t.removeTags=function(e,r,n){var o=null==r?n:r;t.where[e].splice(t.where[e].indexOf(o),1),t.loadMore()},t.searchAutoComplete=function(e,t,r){if("Company"===e)var e=c;if("Person"===e)var e=m;return e[t]({filter:{where:{name:{like:r}},order:"name ASC",limit:10}}).$promise.then(function(e){return e.map(function(e){return e})},function(e){})},t.getCategory=function(e,r,n,o,a,i,s){var p="items_"+n;if(t[p]=[],"Company"===e)var e=c;if("Person"===e)var e=m;if("Category"===e)var e=f;e[r]({id:n,filter:{fields:o.split(","),limit:a,order:i}}).$promise.then(function(e){s?t[p]=t[p].concat(e):angular.forEach(e,function(e){t[p].push(e.name)})},function(e){})},t.today=_.getToday(),t.yesterday=_.getYesterday(),t.sub_menu1=[{title:"즐겨찾는 페이지",icon:"fa-star-o",link:"#"},{title:"뉴스 보관함",icon:"fa-bookmark-o",link:"#"}],t.sub_menu2=[{title:"스타트업",icon:"",link:"startup"},{title:"벤처캐피탈",icon:"",link:"vc"},{title:"엑셀러레이터",icon:"",link:"ac"}],t.sub_menu3=[]}]),angular.module("testApp").controller("CompanyStartupCtrl",["$rootScope","$scope","$state","$location","$window","$timeout","$log","$http","$localStorage","NewsFactory","News","Company","Person","Category","timeFactory",function(e,t,r,n,o,a,i,s,p,u,l,d,c,m,f){t.generateWhereOrList=["personIds","company"],t.generateWhereCompareList=["foundationDate_gte","foundationDate_lte","totalMoney_gte","totalMoney_lte"],t.filter={filter:{include:[{relation:"thumbnail",scope:{fields:["id","medium"]}},{relation:"product",scope:{fields:["id","name"]}}],where:{},order:"created DESC",limit:20,skip:0}},t.reset=function(){t.where={state:[],field:[],totalMoney_gte:[],totalMoney_lte:[],founderSchool:[],foundationDate_gte:[],foundationDate_lte:[],location:[],keywords:[]},e.input=t.input={},t.searchTools={list:[],save:""}},t.reset(),t.generateWhereOr=function(e){var r={or:[]};return angular.forEach(t.where[e],function(t,n){var o={};o[e]=t,r.or.push(o)}),r},t.generateWhereInq=function(e){var r={};return r[e]={inq:t.where[e]},r},t.generateWhereCompare=function(e){return t.where[e][0]},t.generateWhereKeywords=function(e){var r={or:[]};return angular.forEach(t.where[e],function(e,t){r.or.push({name:{like:e,options:"i"}}),r.or.push({nameEng:{like:e,options:"i"}})}),r.or.push({nameTag:{inq:t.where[e]}}),r},t.generateWhere=function(){return new Promise(function(e,r){var n={and:[]};for(var o in t.where)0!==t.where[o].length&&(t.generateWhereOrList.includes(o)?n.and.push(t.generateWhereOr(o)):t.generateWhereCompareList.includes(o)?n.and.push(t.generateWhereCompare(o)):"keywords"===o?n.and.push(t.generateWhereKeywords(o)):n.and.push(t.generateWhereInq(o)));return n.and.length>0?t.filter.filter.where=n:t.filter.filter.where={},e(t.filter)})},t.contents=[],t.loadMore=function(){t.generateWhere().then(function(e){null==e.filter.where.and?e.filter.where.and=[{type:"스타트업"}]:e.filter.where.and.push({type:"스타트업"}),d.find(e).$promise.then(function(r){t.contents=t.contents.concat(r),0==r.length?t.infiniteBreak=!0:t.infiniteBreak=!1,e.filter.skip+=20},function(e){alert("PRO 구독자 전용 섹션입니다.")})})},e.putTags=t.putTags=function(e,r,n,o){if(t.generateWhereOrList.includes(e)){if(null==r.id||t.where[e].includes(r.id))return void(t.input[e]="");t.searchTools.list.push({group:e,name:r.name,id:r.id}),t.where[e].push(r.id)}else if(t.generateWhereCompareList.includes(e)){var a=e.split("_")[0],i=e.split("_")[1],s=r.split("_")[0],p=r.split("_")[1];angular.forEach(t.searchTools.list,function(r,n){return r.id==e?t.searchTools.list.splice(n,1):null}),t.where[e]=[],t.searchTools.list.push({group:e,name:s,id:e});var u={};u[a]={},u[a][i]=p,t.where[e].push(u)}else{if(t.where[e].includes(r))return;var l=r;null!=n&&(l=n),t.searchTools.list.push({group:e,name:l}),t.where[e].push(r)}t.input[e]="",t.contents=[],t.filter.filter.skip=0,o||t.loadMore()},e.removeTags=t.removeTags=function(e,r,n){t.contents=[],t.filter.filter.skip=0;var o=null==r?n:r;t.where[e].splice(t.where[e].indexOf(o),1),t.loadMore()},e.hotTags=t.hotTags=function(e,r,n,o){if(t.reset(),null!=e)var e=e.split(",");if(null!=r)var r=r.split(",");if(null!=n)var n=n.split(",");if(null!=o)var o=o.split(",");angular.forEach(e,function(a,i){var s=!0;e.length==i+1&&(s=null),null===r?null===o?t.putTags(a,n[i],null,s):t.putTags(a,n[i],o[i],s):t.putTags(a,{id:r[i],name:n[i]},null,s)})},t.status={isopen:!1},t.saveFilter=function(e){if(t.searchTools.save){if(!t.filter.filter.where)return void alert("Sorry, you can't save an empty filter.");var r={name:t.searchTools.save,searchTools:t.searchTools.list,filter:t.where};null==p[e]&&(p[e]=[]),p[e].push(r),t.status.isopen=!1,t.reset()}},t.getSavedFilter=function(e){t.saved_filter=p[e]},t.removeSavedFilter=function(e,r){e.preventDefault(),e.stopPropagation(),t.saved_filter.splice(r,1)},t.selectSavedFilter=function(e,r){t.where=t.saved_filter[r].filter,t.searchTools.list=t.saved_filter[r].searchTools,t.contents=[],t.filter.filter.skip=0,t.loadMore()},t.searchAutoComplete=function(e,t,r,n,o){if("Company"===e)var e=d;if("Person"===e)var e=c;if("Product"===e)var e=Product;if("Category"===e)var e=m;return e[t]({id:o,filter:{where:{name:{like:r,options:"i"}},order:"name ASC",limit:30}}).$promise.then(function(e){return e.map(function(e){return n?e.name:e})},function(e){alert(e.data.error.message)})},t.getCategory=function(e,r,n,o,a,i,s,p){var u="items_"+n;if(t[u]=[],"Company"===e)var e=d;if("Person"===e)var e=c;if("Product"===e)var e=Product;if("Category"===e)var e=m;var l={fields:o.split(","),limit:a,order:i};null!=p&&(l.where={},l.where[p]=!0),e[r]({id:n,filter:l}).$promise.then(function(e){s?t[u]=t[u].concat(e):angular.forEach(e,function(e){t[u].push(e.name)})},function(e){alert(e.data.error.message)})},t.beforemonth=f.getBeforeMonth(),t.before3month=f.getBefore3Month(),t.before6month=f.getBefore6Month(),t.beforeyear=f.getBeforeYear(),t.sub_menu2=[{title:"스타트업",icon:"",link:"startup"},{title:"벤처캐피탈",icon:"",link:"vc"},{title:"엑셀러레이터",icon:"",link:"ac"}],t.sub_menu3=[{title:"신규 설립 회사",icon:"",link:"#",group:"foundationDate_gte",id:null,name:"3개월 이내_"+t.before3month,alias:null},{title:"100억원 이상 투자 유치",icon:"",link:"#",group:"totalMoney_gte",id:null,name:"100억원 이상_100",alias:null},{title:"핀테크 분야 회사",icon:"",link:"#",group:"field",id:null,name:"핀테크",alias:null},{title:"VR/AR 분야 회사",icon:"",link:"#",group:"field",id:null,name:"VR/AR",alias:null},{title:"미국 소재 회사",icon:"",link:"#",group:"location,location",id:null,name:"미국(서부),미국(동부)",alias:null},{title:"중국 소재 회사",icon:"",link:"#",group:"location",id:null,name:"중국",alias:null},{title:"KAIST출신 창업자 회사",icon:"",link:"#",group:"founderSchool",id:null,name:"카이스트",alias:null}]}]),angular.module("testApp").controller("CompanyVcCtrl",["$rootScope","$scope","$state","$location","$window","$timeout","$log","$http","$localStorage","NewsFactory","News","Company","Person","Category","Investment","timeFactory",function(e,t,r,n,o,a,i,s,p,u,l,d,c,m,f,y){t.generateWhereOrList=[],t.generateWhereCompareList=["foundationDate_gte","foundationDate_lte"],t.filter={filter:{include:[{relation:"thumbnail",scope:{fields:["id","medium"]}}],where:{},order:"created DESC",limit:20,skip:0}},t.reset=function(){t.where={step:[],field:[],foundationDate:[],location:[],keywords:[]},e.input=t.input={},t.searchTools={list:[],save:""}},t.reset(),t.generateWhereOr=function(e){var r={or:[]};return angular.forEach(t.where[e],function(t,n){var o={};o[e]=t,r.or.push(o)}),r},t.generateWhereInq=function(e){var r={};return r[e]={inq:t.where[e]},r},t.generateWhereCompare=function(e){return t.where[e][0]},t.generateWhereKeywords=function(e){var r={or:[]};return angular.forEach(t.where[e],function(e,t){r.or.push({name:{like:e,options:"i"}}),r.or.push({nameEng:{like:e,options:"i"}})}),r.or.push({nameTag:{inq:t.where[e]}}),r},t.generateWhere=function(){return new Promise(function(e,r){var n={and:[]};for(var o in t.where)0!==t.where[o].length&&(t.generateWhereOrList.includes(o)?n.and.push(t.generateWhereOr(o)):t.generateWhereCompareList.includes(o)?n.and.push(t.generateWhereCompare(o)):"keywords"===o?n.and.push(t.generateWhereKeywords(o)):n.and.push(t.generateWhereInq(o)));return n.and.length>0?t.filter.filter.where=n:t.filter.filter.where={},e(t.filter)})},t.contents=[],t.loadMore=function(){t.generateWhere().then(function(e){null==e.filter.where.and?e.filter.where.and=[{type:"투자기관"}]:e.filter.where.and.push({type:"투자기관"}),d.find(e).$promise.then(function(r){t.contents=t.contents.concat(r),angular.forEach(t.contents,function(e,r){t.getInvestment(r,e.id)}),0==r.length?t.infiniteBreak=!0:t.infiniteBreak=!1,e.filter.skip+=20},function(e){alert(e.data.error.message)})})},t.getInvestment=function(e,r){f.find({filter:{fields:["id","investeeId"],include:[{relation:"investee",scope:{fields:["id","name"]}}],where:{companyIds:r}}}).$promise.then(function(r){t.contents[e].InvestmentCnt=r.length,t.contents[e].Investment=t.removeDuplicates(r,"investeeId")},function(e){alert(e.data.error.message)})},t.removeDuplicates=function(e,t){for(var r,n=[],o=[],a=0;a<e.length;a++)r=e[a][t],o.indexOf(r)===-1&&(n.push(e[a]),o.push(r));return n},e.putTags=t.putTags=function(e,r,n){if(t.generateWhereOrList.includes(e)){if(null==r.id||t.where[e].includes(r.id))return void(t.input[e]="");t.searchTools.list.push({group:e,name:r.name,id:r.id}),t.where[e].push(r.id)}else if(t.generateWhereCompareList.includes(e)){var o=e.split("_")[0],a=e.split("_")[1],i=r.split("_")[0],s=r.split("_")[1];
angular.forEach(t.searchTools.list,function(r,n){return r.id==e?t.searchTools.list.splice(n,1):null}),t.where[e]=[],t.searchTools.list.push({group:e,name:i,id:e});var p={};p[o]={},p[o][a]=s,t.where[e].push(p)}else{if(t.where[e].includes(r))return;var u=r;null!=n&&(u=n),t.searchTools.list.push({group:e,name:u}),t.where[e].push(r)}t.input[e]="",t.contents=[],t.filter.filter.skip=0,t.loadMore()},e.removeTags=t.removeTags=function(e,r,n){t.contents=[],t.filter.filter.skip=0;var o=null==r?n:r;t.where[e].splice(t.where[e].indexOf(o),1),t.loadMore()},e.hotTags=t.hotTags=function(e,r,n){if(t.reset(),null!=e)var e=e.split(",");if(null!=r)var r=r.split(",");if(null!=n)var n=n.split(",");angular.forEach(e,function(e,o){null===r?t.putTags(e,n[o]):t.putTags(e,{id:r[o],name:n[o]})})},t.status={isopen:!1},t.saveFilter=function(e){if(t.searchTools.save){if(!t.filter.filter.where)return void alert("Sorry, you can't save an empty filter.");var r={name:t.searchTools.save,searchTools:t.searchTools.list,filter:t.where};null==p[e]&&(p[e]=[]),p[e].push(r),t.status.isopen=!1,t.reset()}},t.getSavedFilter=function(e){t.saved_filter=p[e]},t.removeSavedFilter=function(e,r){e.preventDefault(),e.stopPropagation(),t.saved_filter.splice(r,1)},t.selectSavedFilter=function(e,r){t.where=t.saved_filter[r].filter,t.searchTools.list=t.saved_filter[r].searchTools,t.contents=[],t.filter.filter.skip=0,t.loadMore()},t.searchAutoComplete=function(e,t,r,n,o){if("Company"===e)var e=d;if("Person"===e)var e=c;if("Product"===e)var e=Product;if("Category"===e)var e=m;return e[t]({id:o,filter:{where:{name:{like:r,options:"i"}},order:"name ASC",limit:30}}).$promise.then(function(e){return e.map(function(e){return n?e.name:e})},function(e){alert(e.data.error.message)})},t.getCategory=function(e,r,n,o,a,i,s,p){var u="items_"+n;if(t[u]=[],"Company"===e)var e=d;if("Person"===e)var e=c;if("Product"===e)var e=Product;if("Category"===e)var e=m;var l={fields:o.split(","),limit:a,order:i};null!=p&&(l.where={},l.where[p]=!0),e[r]({id:n,filter:l}).$promise.then(function(e){s?t[u]=t[u].concat(e):angular.forEach(e,function(e){t[u].push(e.name)})},function(e){alert(e.data.error.message)})},moment.locale("ko"),t.today=moment().format("MM/DD (dddd)"),t.yesterday=moment().add(-1,"days").format("MM/DD (dddd)"),t.beforemonth=y.getBeforeMonth(),t.before3month=y.getBefore3Month(),t.before6month=y.getBefore6Month(),t.beforeyear=y.getBeforeYear(),t.sub_menu2=[{title:"스타트업",icon:"",link:"startup"},{title:"벤처캐피탈",icon:"",link:"vc"},{title:"엑셀러레이터",icon:"",link:"ac"}]}]),angular.module("testApp").controller("EventCtrl",["$rootScope","$scope","$state","$location","$window","$timeout","$log","$http","$localStorage","Event","Banner",function(e,t,r,n,o,a,i,s,p,u,l){t.contents=[],t.contents2=[],t.filter={filter:{where:{and:[{display:!0},{datetime:{gte:new Date}}]},order:"datetime ASC",skip:0}},t.loadMore=function(e){null!=e&&(t.index=e,t.contents=[],t.contents2=[],t.filter={filter:{where:t.getFilter(e),order:"datetime ASC",skip:0}}),u.find(t.filter).$promise.then(function(e){t.contents=t.contents.concat(e);var r=new Array;_.find(e,function(e){r.push(e.daybyday)});var n=r.reduce(function(e,t){return e.indexOf(t)<0&&e.push(t),e},[]);t.contents2=t.contents2.concat(n),t.infiniteBreak=!0},function(e){alert(e.data.error.message)})},t.loadBanner=function(e){l.find({filter:{include:["file"],where:{and:[{display:!0},{name:{like:"event"}}]},order:"start ASC"}}).$promise.then(function(e){t.banners=[],t.banners=t.banners.concat(e)},function(e){alert(e.data.error.message)})},t.loadBanner();var d=new Date,c=d.getDate()-d.getDay();new Date(d.setDate(c)),new Date(d.setDate(c+7)),new Date((new Date).setDate(c+8)),new Date((new Date).setDate(c+14)),new Date((new Date).setDate(c+15)),new Date((new Date).setDate(c+21)),new Date((new Date).setDate(c+22));moment.locale("ko"),t.today=moment().format("MM/DD (dddd)"),t.yesterday=moment().add(-1,"days").format("MM/DD (dddd)"),t.getFilter=function(e){switch(e){case 0:return{and:[{display:!0},{datetime:{gte:moment(new Date).format("YYYY-MM-DD 00:00:00")}}]};case 1:return{and:[{display:!0},{datetime:{gte:moment().add(1,"weeks").startOf("isoWeek").format("YYYY-MM-DD 00:00:00")}},{datetime:{lte:moment().add(2,"weeks").startOf("isoWeek").format("YYYY-MM-DD 00:00:00")}}]};default:return{and:[{display:!0},{datetime:{gte:moment().add(2,"weeks").startOf("isoWeek").format("YYYY-MM-DD 00:00:00")}}]}}},t.getCountEvent=function(e){u.count({where:t.getFilter(e)}).$promise.then(function(r){t.sub_menu[e].count=r.count},function(e){alert(e.data.error.message)})},t.sub_menu=[{title:"전체보기",count:0},{title:"다음 주",count:0},{title:"추후 일정",count:0}],t.checkboxModel={value1:"",value2:""},t.model={name:"Tabs"},t.sortType="name",t.sortReverse=!1,t.searchContent="",t.posts=[{userId:1,time:"19:00",pay:"무료",name:"quia et suscipit so",location:"서울시 강남구 역삼동 645-27번지"},{userId:1,time:"19:00",pay:"무료",name:"quia et suscipit",location:"서울시 강남구 선릉동 1234-123"}],t.days=[{userId:1,day:"10월 28일 (월)"},{userId:2,day:"10월 29일 (화)"}]}]),angular.module("testApp").config(["$stateProvider",function(e){e.state("event",{url:"/event",templateUrl:"app/event/event.html",controller:"EventCtrl"})}]),angular.module("testApp").component("mainComponent",function(){}).component("newsLocationComponent",function(){}).component("newsMarketsComponent",function(){}).component("newsSkillsComponent",function(){}),angular.module("testApp").controller("MainCtrl",["$scope","$http","$uibModal","mainFactory",function(e,t,r,n){e.awesomeThings=[],t.get("/api/things").success(function(t){e.awesomeThings=t}),e.addThing=function(){""!==e.newThing&&(t.post("/api/things",{name:e.newThing}),e.newThing="")},e.deleteThing=function(e){t.delete("/api/things/"+e._id)},e.$on("$destroy",function(){}),e.sub_menu=[{title:"이번 주",content:""},{title:"다음 주",content:""},{title:"다다음 주",content:""},{title:"추후 일정",content:""}],e.model={name:"Tabs"},e.sortType="name",e.sortReverse=!1,e.searchContent="",e.posts=[{userId:1,id:1,title:"sunt aut facere repellat provident occaecati excepturi optio reprehenderit",body:"quia et suscipit suscipit recusandae consequuntur expedita et cum reprehenderit molestiae ut ut quas totam nostrum rerum est autem sunt rem eveniet architecto"},{userId:1,id:2,title:"qui est esse",body:"est rerum tempore vitae sequi sint nihil reprehenderit dolor beatae ea dolores neque fugiat blanditiis voluptate porro vel nihil molestiae ut reiciendis qui aperiam non debitis possimus qui neque nisi nulla"},{userId:1,id:3,title:"ea molestias quasi exercitationem repellat qui ipsa sit aut",body:"et iusto sed quo iure voluptatem occaecati omnis eligendi aut ad voluptatem doloribus vel accusantium quis pariatur molestiae porro eius odio et labore et velit aut"},{userId:1,id:4,title:"eum et est occaecati",body:"ullam et saepe reiciendis voluptatem adipisci sit amet autem assumenda provident rerum culpa quis hic commodi nesciunt rem tenetur doloremque ipsam iure quis sunt voluptatem rerum illo velit"},{userId:1,id:5,title:"nesciunt quas odio",body:"repudiandae veniam quaerat sunt sed alias aut fugiat sit autem sed est voluptatem omnis possimus esse voluptatibus quis est aut tenetur dolor neque"},{userId:1,id:6,title:"dolorem eum magni eos aperiam quia",body:"ut aspernatur corporis harum nihil quis provident sequi mollitia nobis aliquid molestiae perspiciatis et ea nemo ab reprehenderit accusantium quas voluptate dolores velit et doloremque molestiae"},{userId:1,id:7,title:"magnam facilis autem",body:"dolore placeat quibusdam ea quo vitae magni quis enim qui quis quo nemo aut saepe quidem repellat excepturi ut quia sunt ut sequi eos ea sed quas"},{userId:1,id:8,title:"dolorem dolore est ipsam",body:"dignissimos aperiam dolorem qui eum facilis quibusdam animi sint suscipit qui sint possimus cum quaerat magni maiores excepturi ipsam ut commodi dolor voluptatum modi aut vitae"},{userId:1,id:9,title:"nesciunt iure omnis dolorem tempora et accusantium",body:"consectetur animi nesciunt iure dolore enim quia ad veniam autem ut quam aut nobis et est aut quod aut provident voluptas autem voluptas"},{userId:1,id:10,title:"optio molestias id quia eum",body:"quo et expedita modi cum officia vel magni doloribus qui repudiandae vero nisi sit quos veniam quod sed accusamus veritatis error"}]}]),angular.module("testApp").directive("pageTitle",pageTitle).directive("sideNavigation",sideNavigation).directive("minimalizaMenu",minimalizaMenu).directive("sparkline",sparkline).directive("icheck",icheck).directive("smallHeader",smallHeader).directive("animatePanel",animatePanel).directive("landingScrollspy",landingScrollspy).directive("clockPicker",clockPicker).directive("dateTimePicker",dateTimePicker).directive("inputPressEnter",inputPressEnter).directive("uibTypeaheadPopup",uibTypeaheadPopup).decorator("uibTypeaheadPopupDirective",["$delegate",function(e){return[e[1]]}]),angular.module("testApp").filter("mainFilter",function(){return function(e,t){var r=[];return angular.isArray(e)?e.forEach(function(e){for(var n=!1,o=Object.keys(t),a=0;a<o.length;a++){var i=o[a],s=t[i].toLowerCase();if(e[i].toString().toLowerCase().indexOf(s)!==-1){n=!0;break}}n&&r.push(e)}):r=e,r}}).filter("koDate",function(){return function(e){var t=moment(e).format("MM월 DD일 (dddd)");return t}}),angular.module("testApp").config(["$stateProvider",function(e){e.state("main",{url:"/main",templateUrl:"app/main/main.html",controller:"MainCtrl"})}]),angular.module("testApp").factory("timeFactory",function(){return{getToday:function(){return moment().utcOffset(0).set({hour:0,minute:0,second:0,millisecond:0}).toISOString()},getYesterday:function(){return moment().utcOffset(0).set({hour:0,minute:0,second:0,millisecond:0}).add(-1,"days").toISOString()},getTomorrow:function(){return moment().utcOffset(0).set({hour:0,minute:0,second:0,millisecond:0}).add(1,"days").toISOString()},getBeforeWeek:function(){return moment().utcOffset(0).set({hour:0,minute:0,second:0,millisecond:0}).add(-1,"weeks").toISOString()},getBeforeMonth:function(){return moment().utcOffset(0).set({hour:0,minute:0,second:0,millisecond:0}).add(-1,"months").toISOString()},getBefore3Month:function(){return moment().utcOffset(0).set({hour:0,minute:0,second:0,millisecond:0}).add(-3,"months").toISOString()},getBefore6Month:function(){return moment().utcOffset(0).set({hour:0,minute:0,second:0,millisecond:0}).add(-6,"months").toISOString()},getBeforeYear:function(){return moment().utcOffset(0).set({hour:0,minute:0,second:0,millisecond:0}).add(-1,"years").toISOString()}}}),angular.module("testApp").controller("NewsCtrl",["$rootScope","$scope","$state","$filter","$location","$window","$timeout","$log","$http","$localStorage","Auth","NewsFactory","News","Company","Person","Product","Event","Category","Banner","timeFactory",function(e,t,r,n,o,a,i,s,p,u,l,d,c,m,f,y,h,g,v,_){t.subscribe={name:"",email:"",Company:""},t.AddSubscribe=function(e){return""==e.email?void alert("이메일은 필수 입력 사항입니다."):(t.subscribe_button(),void p({method:"POST",url:"http://glance.media/subscription/subscribe.php"}).then(function(e){},function(e){d.confirm.sample()}))},t.generateWhereOrList=["personIds","productIds","companyIds"],t.generateWhereCompareList=["datetime_gte","datetime_lte"];n("date")(new Date,"yyyy-MM-dd");t.filter={filter:{where:{},order:"datetime DESC",limit:"30",skip:null}},t.reset=function(){t.where={datetime_gte:[],datetime_lte:[],type:[],field:[],personIds:[],productIds:[],companyIds:[],keywords:[]},e.input=t.input={},t.searchTools={list:[],save:""}},t.reset(),t.generateWhereOr=function(e){var r={or:[]};return angular.forEach(t.where[e],function(t,n){var o={};o[e]=t,r.or.push(o)}),r},t.generateWhereInq=function(e){var r={};return r[e]={inq:t.where[e]},r},t.generateWhereCompare=function(e){return t.where[e][0]},t.generateWhereKeywords=function(e){var r={or:[]};return angular.forEach(t.where[e],function(e,t){r.or.push({title:{like:e,options:"i"}})}),r},t.generateWhere=function(){return new Promise(function(e,r){var n={and:[]};for(var o in t.where)0!==t.where[o].length&&(t.generateWhereOrList.includes(o)?n.and.push(t.generateWhereOr(o)):t.generateWhereCompareList.includes(o)?n.and.push(t.generateWhereCompare(o)):"keywords"===o?n.and.push(t.generateWhereKeywords(o)):n.and.push(t.generateWhereInq(o)));return n.and.length>0?t.filter.filter.where=n:t.filter.filter.where={},e(t.filter)})},e.putTags=t.putTags=function(e,r,n){if(t.generateWhereOrList.includes(e)){if(null==r.id||t.where[e].includes(r.id))return void(t.input[e]="");t.searchTools.list.push({group:e,name:r.name,id:r.id}),t.where[e].push(r.id)}else if(t.generateWhereCompareList.includes(e)){var o=e.split("_")[0],a=e.split("_")[1],i=r.split("_")[0],s=r.split("_")[1];angular.forEach(t.searchTools.list,function(r,n){return r.id==e?t.searchTools.list.splice(n,1):null}),t.where[e]=[],t.searchTools.list.push({group:e,name:i,id:e});var p={};p[o]={},p[o][a]=s,t.where[e].push(p)}else{if(t.where[e].includes(r))return;t.searchTools.list.push({group:e,name:r}),t.where[e].push(r)}t.input[e]="",t.contents=[],t.filter.filter.skip=0,(null==n||n)&&t.loadMore()},e.removeTags=t.removeTags=function(e,r,n){t.contents=[],t.filter.filter.skip=0;var o=null==r?n:r;t.where[e].splice(t.where[e].indexOf(o),1),t.loadMore()},e.hotTags=t.hotTags=function(e,r,n){if(t.reset(),null!=e)var e=e.split(",");if(null!=r)var r=r.split(",");if(null!=n)var n=n.split(",");var o=!1;angular.forEach(e,function(a,i){i===e.length-1&&(o=!0),null===r?t.putTags(a,n[i],o):t.putTags(a,{id:r[i],name:n[i]},o)})},t.status={isopen:!1},t.saveFilter=function(e){if(t.searchTools.save){if(!t.filter.filter.where)return void alert("Sorry, you can't save an empty filter.");var r={name:t.searchTools.save,searchTools:t.searchTools.list,filter:t.where};null==u[e]&&(u[e]=[]),u[e].push(r),t.status.isopen=!1,t.reset()}},t.getSavedFilter=function(e){t.saved_filter=u[e]},t.removeSavedFilter=function(e,r){e.preventDefault(),e.stopPropagation(),t.saved_filter.splice(r,1)},t.selectSavedFilter=function(e,r){t.where=t.saved_filter[r].filter,t.searchTools.list=t.saved_filter[r].searchTools,t.contents=[],t.filter.filter.skip=0,t.loadMore()},t.searchAutoComplete=function(e,t,r,n,o){if("Company"===e)var e=m;if("Person"===e)var e=f;if("Product"===e)var e=y;if("Category"===e)var e=g;return e[t]({id:o,filter:{where:{name:{like:r,options:"i"}},order:"name ASC",limit:30}}).$promise.then(function(e){return e.map(function(e){return n?e.name:e})},function(e){})},t.getCategory=function(e,r,n,o,a,i,s,p){var u="items_"+n;if(t[u]=[],"Company"===e)var e=m;if("Person"===e)var e=f;if("Product"===e)var e=y;if("Category"===e)var e=g;var l={fields:o.split(","),limit:a,order:i};null!=p&&(l.where={},l.where[p]=!0),e[r]({id:n,filter:l}).$promise.then(function(e){s?t[u]=t[u].concat(e):angular.forEach(e,function(e){t[u].push(e.name)})},function(e){})},t.contents=[],"news"==r.current.name?t.infiniteBreak0=!1:t.infiniteBreak0=!0,t.loadMore=function(){t.generateWhere().then(function(e){c.find(e).$promise.then(function(e){t.contents=t.contents.concat(e),0==e.length?t.infiniteBreak0=!0:t.infiniteBreak0=!1,t.filter.filter.skip+=30},function(e){})})},t.loadEvents=function(){t.events=[],t.today=moment().format("YYYY-MM-DD"),h.find({filter:{where:{and:[{display:!0},{daybyday:t.today}]},order:"datetime ASC"}}).$promise.then(function(e){t.events=t.events.concat(e)},function(e){})},t.loadEvents(),t.loadBanner=function(e){v.find({filter:{include:["file"],where:{and:[{display:!0},{name:{like:"news",options:"i"}}]},order:"start ASC"}}).$promise.then(function(e){t.banners=[],t.banners=t.banners.concat(e)},function(e){})},t.loadBanner(),t.isLoggedIn=l.isLoggedIn,t.yesterday=_.getYesterday(),t.beforeweeks=_.getBeforeWeek(),t.beforemonth=_.getBeforeMonth(),t.beforeyear=_.getBeforeYear(),t.sub_menu2=[{title:"투자유치",icon:"",link:"invest"},{title:"인수합병(M&A)",icon:"",link:"mna"},{title:"기업공개(IPO)",icon:"",link:"ipo"}],t.sub_menu3=[{title:"엑싯/투자",icon:"",link:"#",group:"type,type,type",id:null,name:"기업공개,인수합병,투자유치"},{title:"성과/지표",icon:"",link:"#",group:"type",id:null,name:"성과/지표"},{title:"출시/업데이트",icon:"",link:"#",group:"type",id:null,name:"출시/업데이트"},{title:"정책/제도",icon:"",link:"#",group:"type",id:null,name:"정책/제도"},{title:"지식/인사이트",icon:"",link:"#",group:"type",id:null,name:"지식/인사이트"},{title:"인터뷰/리뷰",icon:"",link:"#",group:"type",id:null,name:"인터뷰/리뷰"}],t.subscribe_button=d.confirm.sample()}]),angular.module("testApp").config(["$stateProvider",function(e){e.state("news",{url:"/news",templateUrl:"app/news/news.html",controller:"NewsCtrl"}).state("invest",{url:"/invest",templateUrl:"app/news/news_invest.html",controller:"NewsInvestCtrl"}).state("mna",{url:"/mna",templateUrl:"app/news/news_mna.html",controller:"NewsMnaCtrl"}).state("ipo",{url:"/ipo",templateUrl:"app/news/news_ipo.html",controller:"NewsIpoCtrl"})}]),angular.module("testApp").controller("NewsInvestCtrl",["$rootScope","$scope","$state","$filter","$location","$window","$timeout","$log","$http","$localStorage","NewsFactory","News","Company","Person","Product","Investment","Event","Category","timeFactory",function(e,t,r,n,o,a,i,s,p,u,l,d,c,m,f,y,h,g,v){t.generateWhereOrList=["companyIds","investeeId"],t.generateWhereCompareList=["announcementDate_gte","announcementDate_lte","money_gte","money_lte"];n("date")(new Date,"yyyy-MM-dd");t.filter={filter:{where:{},include:[{relation:"investee",scope:{fields:["id","name"]}},{relation:"investorCompany",scope:{fields:["id","name"]}},{relation:"investorPerson",scope:{fields:["id","name"]}}],order:"created DESC",limit:"30",skip:null}},t.reset=function(){t.where={announcementDate_gte:[],announcementDate_lte:[],money_gte:[],money_lte:[],investeeId:[],companyIds:[],personIds:[],field:[],keywords:[]},e.input=t.input={},t.searchTools={list:[],save:""}},t.reset(),t.generateWhereOr=function(e){var r={or:[]};return angular.forEach(t.where[e],function(t,n){var o={};o[e]=t,r.or.push(o)}),r},t.generateWhereInq=function(e){var r={};return r[e]={inq:t.where[e]},r},t.generateWhereCompare=function(e){return t.where[e][0]},t.generateWhereKeywords=function(e){var r={or:[]};return angular.forEach(t.where[e],function(e,t){r.or.push({title:{like:e,options:"i"}})}),r},t.generateWhere=function(){return new Promise(function(e,r){var n={and:[]};for(var o in t.where)0!==t.where[o].length&&(t.generateWhereOrList.includes(o)?n.and.push(t.generateWhereOr(o)):t.generateWhereCompareList.includes(o)?n.and.push(t.generateWhereCompare(o)):"keywords"===o?n.and.push(t.generateWhereKeywords(o)):n.and.push(t.generateWhereInq(o)));return n.and.length>0?t.filter.filter.where=n:t.filter.filter.where={},e(t.filter)})},e.putTags=t.putTags=function(e,r){if(t.generateWhereOrList.includes(e)){if(null==r.id||t.where[e].includes(r.id))return void(t.input[e]="");t.searchTools.list.push({group:e,name:r.name,id:r.id}),t.where[e].push(r.id)}else if(t.generateWhereCompareList.includes(e)){var n=e.split("_")[0],o=e.split("_")[1],a=r.split("_")[0],i=r.split("_")[1];angular.forEach(t.searchTools.list,function(r,n){return r.id==e?t.searchTools.list.splice(n,1):null}),t.where[e]=[],t.searchTools.list.push({group:e,name:a,id:e});var s={};s[n]={},s[n][o]=i,t.where[e].push(s)}else{if(t.where[e].includes(r))return;t.searchTools.list.push({group:e,name:r}),t.where[e].push(r)}t.input[e]="",t.contents=[],t.filter.filter.skip=0,t.loadMore()},e.removeTags=t.removeTags=function(e,r,n){t.contents=[],t.filter.filter.skip=0;var o=null==r?n:r;t.where[e].splice(t.where[e].indexOf(o),1),t.loadMore()},e.hotTags=t.hotTags=function(e,r,n){if(t.reset(),null!=e)var e=e.split(",");if(null!=r)var r=r.split(",");if(null!=n)var n=n.split(",");angular.forEach(e,function(e,o){null===r?t.putTags(e,n[o]):t.putTags(e,{id:r[o],name:n[o]})})},t.status={isopen:!1},t.saveFilter=function(e){if(t.searchTools.save){if(!t.filter.filter.where)return void alert("Sorry, you can't save an empty filter.");var r={name:t.searchTools.save,searchTools:t.searchTools.list,filter:t.where};null==u[e]&&(u[e]=[]),u[e].push(r),t.status.isopen=!1,t.reset()}},t.getSavedFilter=function(e){t.saved_filter=u[e]},t.removeSavedFilter=function(e,r){e.preventDefault(),e.stopPropagation(),t.saved_filter.splice(r,1)},t.selectSavedFilter=function(e,r){t.where=t.saved_filter[r].filter,t.searchTools.list=t.saved_filter[r].searchTools,t.contents=[],t.filter.filter.skip=0,t.loadMore()},t.searchAutoComplete=function(e,t,r,n,o){if("Company"===e)var e=c;if("Person"===e)var e=m;if("Product"===e)var e=f;if("Category"===e)var e=g;return e[t]({id:o,filter:{where:{name:{like:r,options:"i"}},order:"name ASC",limit:30}}).$promise.then(function(e){return e.map(function(e){return n?e.name:e})},function(e){alert(e.data.error.message)})},t.getCategory=function(e,r,n,o,a,i,s,p){var u="items_"+n;if(t[u]=[],"Company"===e)var e=c;if("Person"===e)var e=m;if("Product"===e)var e=f;if("Category"===e)var e=g;var l={fields:o.split(","),limit:a,order:i};null!=p&&(l.where={},l.where[p]=!0),e[r]({id:n,filter:l}).$promise.then(function(e){s?t[u]=t[u].concat(e):angular.forEach(e,function(e){t[u].push(e.name)})},function(e){alert(e.data.error.message)})},t.contents=[],"invest"==r.current.name?t.infiniteBreak1=!1:t.infiniteBreak1=!0,t.loadMore=function(){t.generateWhere().then(function(e){y.find(e).$promise.then(function(e){t.contents=t.contents.concat(e),0==e.length?t.infiniteBreak1=!0:t.infiniteBreak1=!1,t.filter.filter.skip+=30,alert(err.data.error.message)})})},t.loadEvents=function(){t.events=[],t.today=moment().format("YYYY-MM-DD"),h.find({filter:{where:{and:[{display:!0},{daybyday:{gte:t.today}},{daybyday:{lte:t.today}}]},order:"datetime DESC"}}).$promise.then(function(e){t.events=t.events.concat(e)},function(e){alert(e.data.error.message)})},t.loadEvents(),moment.locale("ko"),t.today=moment().format("YYYY-MM-DD"),t.yesterday=v.getYesterday(),t.beforeweeks=v.getBeforeWeek(),t.beforemonth=v.getBeforeMonth(),t.beforeyear=v.getBeforeYear(),t.sub_menu2=[{title:"투자유치",icon:"",link:"invest"},{title:"인수합병(M&A)",icon:"",link:"mna"},{title:"기업공개(IPO)",icon:"",link:"ipo"}],t.button1=l.confirm.sample()}]),angular.module("testApp").controller("NewsIpoCtrl",["$rootScope","$scope","$state","$filter","$location","$window","$timeout","$log","$http","$localStorage","NewsFactory","News","Company","Person","Product","Ipo","Event","Category","timeFactory",function(e,t,r,n,o,a,i,s,p,u,l,d,c,m,f,y,h,g,v){t.generateWhereOrList=["companyId"],t.generateWhereCompareList=["announcementDate_gte","announcementDate_lte","money_gte","money_lte"];n("date")(new Date,"yyyy-MM-dd");t.filter={filter:{include:[{relation:"company",scope:{fields:["id","name"]}}],where:{},order:"announcementDate DESC",limit:"30",skip:null}},t.reset=function(){t.where={announcementDate_gte:[],announcementDate_lte:[],money_gte:[],money_lte:[],field:[],market:[],keywords:[]},e.input=t.input={},t.searchTools={list:[],save:""}},t.reset(),t.generateWhereOr=function(e){var r={or:[]};return angular.forEach(t.where[e],function(t,n){var o={};o[e]=t,r.or.push(o)}),r},t.generateWhereInq=function(e){var r={};return r[e]={inq:t.where[e]},r},t.generateWhereCompare=function(e){return t.where[e][0]},t.generateWhereKeywords=function(e){var r={or:[]};return angular.forEach(t.where[e],function(e,t){r.or.push({title:{like:e,options:"i"}})}),r},t.generateWhere=function(){return new Promise(function(e,r){var n={and:[]};for(var o in t.where)0!==t.where[o].length&&(t.generateWhereOrList.includes(o)?n.and.push(t.generateWhereOr(o)):t.generateWhereCompareList.includes(o)?n.and.push(t.generateWhereCompare(o)):"keywords"===o?n.and.push(t.generateWhereKeywords(o)):n.and.push(t.generateWhereInq(o)));return n.and.length>0?t.filter.filter.where=n:t.filter.filter.where={},e(t.filter)})},e.putTags=t.putTags=function(e,r){if(t.generateWhereOrList.includes(e)){if(null==r.id||t.where[e].includes(r.id))return void(t.input[e]="");t.searchTools.list.push({group:e,name:r.name,id:r.id}),t.where[e].push(r.id)}else if(t.generateWhereCompareList.includes(e)){var n=e.split("_")[0],o=e.split("_")[1],a=r.split("_")[0],i=r.split("_")[1];angular.forEach(t.searchTools.list,function(r,n){return r.id==e?t.searchTools.list.splice(n,1):null}),t.where[e]=[],t.searchTools.list.push({group:e,name:a,id:e});var s={};s[n]={},s[n][o]=i,t.where[e].push(s)}else{if(t.where[e].includes(r))return;t.searchTools.list.push({group:e,name:r}),t.where[e].push(r)}t.input[e]="",t.contents=[],t.filter.filter.skip=0,t.loadMore()},e.removeTags=t.removeTags=function(e,r,n){t.contents=[],t.filter.filter.skip=0;var o=null==r?n:r;t.where[e].splice(t.where[e].indexOf(o),1),t.loadMore()},e.hotTags=t.hotTags=function(e,r,n){if(t.reset(),null!=e)var e=e.split(",");if(null!=r)var r=r.split(",");if(null!=n)var n=n.split(",");angular.forEach(e,function(e,o){null===r?t.putTags(e,n[o]):t.putTags(e,{id:r[o],name:n[o]})})},t.status={isopen:!1},t.saveFilter=function(e){if(t.searchTools.save){if(!t.filter.filter.where)return void alert("Sorry, you can't save an empty filter.");var r={name:t.searchTools.save,searchTools:t.searchTools.list,filter:t.where};null==u[e]&&(u[e]=[]),u[e].push(r),t.status.isopen=!1,t.reset()}},t.getSavedFilter=function(e){t.saved_filter=u[e]},t.removeSavedFilter=function(e,r){e.preventDefault(),e.stopPropagation(),t.saved_filter.splice(r,1)},t.selectSavedFilter=function(e,r){t.where=t.saved_filter[r].filter,t.searchTools.list=t.saved_filter[r].searchTools,t.contents=[],t.filter.filter.skip=0,t.loadMore()},t.searchAutoComplete=function(e,t,r,n,o){if("Company"===e)var e=c;if("Person"===e)var e=m;if("Product"===e)var e=f;if("Category"===e)var e=g;return e[t]({id:o,filter:{where:{name:{like:r,options:"i"}},order:"name ASC",limit:30}}).$promise.then(function(e){return e.map(function(e){return n?e.name:e})},function(e){alert(e.data.error.message)})},t.getCategory=function(e,r,n,o,a,i,s,p){var u="items_"+n;if(t[u]=[],"Company"===e)var e=c;if("Person"===e)var e=m;if("Product"===e)var e=f;if("Category"===e)var e=g;var l={fields:o.split(","),limit:a,order:i};null!=p&&(l.where={},l.where[p]=!0),e[r]({id:n,filter:l}).$promise.then(function(e){s?t[u]=t[u].concat(e):angular.forEach(e,function(e){t[u].push(e.name)})},function(e){alert(e.data.error.message)})},t.contents=[],"ipo"==r.current.name?t.infiniteBreak3=!1:t.infiniteBreak3=!0,t.loadMore=function(){t.generateWhere().then(function(e){y.find(e).$promise.then(function(e){t.contents=t.contents.concat(e),0==e.length?t.infiniteBreak3=!0:t.infiniteBreak3=!1,t.filter.filter.skip+=30,alert(err.data.error.message)})})},t.loadEvents=function(){t.events=[],t.today=moment().format("YYYY-MM-DD"),h.find({filter:{where:{and:[{display:!0},{daybyday:{gte:t.today}},{daybyday:{lte:t.today}}]},order:"datetime DESC"}}).$promise.then(function(e){t.events=t.events.concat(e)},function(e){alert(e.data.error.message)})},t.loadEvents(),moment.locale("ko"),t.today=moment().format("YYYY-MM-DD"),t.yesterday=v.getYesterday(),t.beforeweeks=v.getBeforeWeek(),t.beforemonth=v.getBeforeMonth(),t.beforeyear=v.getBeforeYear(),t.sub_menu1=[{title:"즐겨찾는 페이지",icon:"fa-star-o",link:"#"},{title:"뉴스 보관함",icon:"fa-bookmark-o",link:"#"}],t.sub_menu2=[{title:"투자유치",icon:"",link:"invest"},{title:"인수합병(M&A)",icon:"",link:"mna"},{title:"기업공개(IPO)",icon:"",link:"ipo"}],t.button1=l.confirm.sample()}]),angular.module("testApp").controller("NewsMnaCtrl",["$rootScope","$scope","$state","$filter","$location","$window","$timeout","$log","$http","$localStorage","NewsFactory","News","Company","Person","Product","Mna","Event","Category","timeFactory",function(e,t,r,n,o,a,i,s,p,u,l,d,c,m,f,y,h,g,v){t.generateWhereOrList=["takeoverId"],t.generateWhereCompareList=["announcementDate_gte","announcementDate_lte","money_gte","money_lte"];n("date")(new Date,"yyyy-MM-dd");t.filter={filter:{include:[{relation:"takeover",scope:{fields:["id","name"]}},{relation:"handover",scope:{fields:["id","name"]}}],where:{},order:"announcementDate DESC",limit:"30",skip:null}},t.reset=function(){t.where={announcementDate_gte:[],announcementDate_lte:[],money_gte:[],money_lte:[],field:[],takeoverId:[],keywords:[]},e.input=t.input={},t.searchTools={list:[],save:""}},t.reset(),t.generateWhereOr=function(e){var r={or:[]};return angular.forEach(t.where[e],function(t,n){var o={};o[e]=t,r.or.push(o)}),r},t.generateWhereInq=function(e){var r={};return r[e]={inq:t.where[e]},r},t.generateWhereCompare=function(e){return t.where[e][0]},t.generateWhereKeywords=function(e){var r={or:[]};return angular.forEach(t.where[e],function(e,t){r.or.push({title:{like:e,options:"i"}})}),r},t.generateWhere=function(){return new Promise(function(e,r){var n={and:[]};for(var o in t.where)0!==t.where[o].length&&(t.generateWhereOrList.includes(o)?n.and.push(t.generateWhereOr(o)):t.generateWhereCompareList.includes(o)?n.and.push(t.generateWhereCompare(o)):"keywords"===o?n.and.push(t.generateWhereKeywords(o)):n.and.push(t.generateWhereInq(o)));return n.and.length>0?t.filter.filter.where=n:t.filter.filter.where={},e(t.filter)})},e.putTags=t.putTags=function(e,r){if(t.generateWhereOrList.includes(e)){if(null==r.id||t.where[e].includes(r.id))return void(t.input[e]="");t.searchTools.list.push({group:e,name:r.name,id:r.id}),t.where[e].push(r.id)}else if(t.generateWhereCompareList.includes(e)){var n=e.split("_")[0],o=e.split("_")[1],a=r.split("_")[0],i=r.split("_")[1];angular.forEach(t.searchTools.list,function(r,n){return r.id==e?t.searchTools.list.splice(n,1):null}),t.where[e]=[],t.searchTools.list.push({group:e,name:a,id:e});var s={};s[n]={},s[n][o]=i,t.where[e].push(s)}else{if(t.where[e].includes(r))return;t.searchTools.list.push({group:e,name:r}),t.where[e].push(r)}t.input[e]="",t.contents=[],t.filter.filter.skip=0,t.loadMore()},e.removeTags=t.removeTags=function(e,r,n){t.contents=[],t.filter.filter.skip=0;var o=null==r?n:r;t.where[e].splice(t.where[e].indexOf(o),1),t.loadMore()},e.hotTags=t.hotTags=function(e,r,n){if(t.reset(),null!=e)var e=e.split(",");if(null!=r)var r=r.split(",");if(null!=n)var n=n.split(",");angular.forEach(e,function(e,o){null===r?t.putTags(e,n[o]):t.putTags(e,{id:r[o],name:n[o]})})},t.status={isopen:!1},t.saveFilter=function(e){if(t.searchTools.save){if(!t.filter.filter.where)return void alert("Sorry, you can't save an empty filter.");var r={name:t.searchTools.save,searchTools:t.searchTools.list,filter:t.where};null==u[e]&&(u[e]=[]),u[e].push(r),t.status.isopen=!1,t.reset()}},t.getSavedFilter=function(e){t.saved_filter=u[e]},t.removeSavedFilter=function(e,r){e.preventDefault(),e.stopPropagation(),t.saved_filter.splice(r,1)},t.selectSavedFilter=function(e,r){t.where=t.saved_filter[r].filter,t.searchTools.list=t.saved_filter[r].searchTools,t.contents=[],t.filter.filter.skip=0,t.loadMore()},t.searchAutoComplete=function(e,t,r,n,o){if("Company"===e)var e=c;if("Person"===e)var e=m;if("Product"===e)var e=f;if("Category"===e)var e=g;return e[t]({id:o,filter:{where:{name:{like:r,options:"i"}},order:"name ASC",limit:30}}).$promise.then(function(e){return e.map(function(e){return n?e.name:e})},function(e){alert(e.data.error.message)})},t.getCategory=function(e,r,n,o,a,i,s,p){var u="items_"+n;if(t[u]=[],"Company"===e)var e=c;if("Person"===e)var e=m;if("Product"===e)var e=f;if("Category"===e)var e=g;var l={fields:o.split(","),limit:a,order:i};null!=p&&(l.where={},l.where[p]=!0),e[r]({id:n,filter:l}).$promise.then(function(e){s?t[u]=t[u].concat(e):angular.forEach(e,function(e){t[u].push(e.name)})},function(e){alert(e.data.error.message)})},t.contents=[],"mna"==r.current.name?t.infiniteBreak2=!1:t.infiniteBreak2=!0,t.loadMore=function(){t.generateWhere().then(function(e){y.find(e).$promise.then(function(e){t.contents=t.contents.concat(e),0==e.length?t.infiniteBreak2=!0:t.infiniteBreak2=!1,t.filter.filter.skip+=30,alert(err.data.error.message)})})},t.loadEvents=function(){t.events=[],t.today=moment().format("YYYY-MM-DD"),h.find({filter:{where:{and:[{display:!0},{daybyday:{gte:t.today}},{daybyday:{lte:t.today}}]},order:"datetime DESC"}}).$promise.then(function(e){t.events=t.events.concat(e)},function(e){alert(e.data.error.message)})},t.loadEvents(),moment.locale("ko"),
t.today=moment().format("YYYY-MM-DD"),t.yesterday=v.getYesterday(),t.beforeweeks=v.getBeforeWeek(),t.beforemonth=v.getBeforeMonth(),t.beforeyear=v.getBeforeYear(),t.sub_menu1=[{title:"즐겨찾는 페이지",icon:"fa-star-o",link:"#"},{title:"뉴스 보관함",icon:"fa-bookmark-o",link:"#"}],t.sub_menu2=[{title:"투자유치",icon:"",link:"invest"},{title:"인수합병(M&A)",icon:"",link:"mna"},{title:"기업공개(IPO)",icon:"",link:"ipo"}],t.button1=l.confirm.sample()}]),angular.module("testApp").controller("PersonCtrl",["$rootScope","$scope","$state","$location","$window","$timeout","$log","$http","$localStorage","NewsFactory","News","Company","Person","Category",function(e,t,r,n,o,a,i,s,p,u,l,d,c,m){t.generateWhereOrList=["personIds","company"],t.generateWhereCompareList=["birth_gt","birth_lt"],t.filter={filter:{include:[{relation:"thumbnail"},{relation:"employee",scope:{include:[{relation:"company",scope:{fields:["id","name"]}}]}}],where:{},order:"created DESC",limit:"20",skip:null}},t.reset=function(){t.where={type:[],field:[],company:[],"education.school":[],"education.major":[],gender:[],birth_gt:[],birth_lt:[],keywords:[]},e.input=t.input={},t.searchTools={list:[],save:""}},t.reset(),t.generateWhereOr=function(e){var r={or:[]};return angular.forEach(t.where[e],function(t,n){var o={};o[e]=t,r.or.push(o)}),r},t.generateWhereInq=function(e){var r={};return r[e]={inq:t.where[e]},r},t.generateWhereCompare=function(e){return t.where[e][0]},t.generateWhereKeywords=function(e){var r={or:[]};return angular.forEach(t.where[e],function(e,t){r.or.push({name:{like:e,options:"i"}})}),r},t.generateWhere=function(){return new Promise(function(e,r){var n={and:[]};for(var o in t.where)0!==t.where[o].length&&(t.generateWhereOrList.includes(o)?n.and.push(t.generateWhereOr(o)):t.generateWhereCompareList.includes(o)?n.and.push(t.generateWhereCompare(o)):"keywords"===o?n.and.push(t.generateWhereKeywords(o)):n.and.push(t.generateWhereInq(o)));return n.and.length>0?t.filter.filter.where=n:t.filter.filter.where={},e(t.filter)})},t.contents=[],"news"==r.current.name?t.infiniteBreak0=!1:t.infiniteBreak0=!0,t.loadMore=function(){t.generateWhere().then(function(e){c.find(e).$promise.then(function(r){t.contents=t.contents.concat(r),0==r.length?t.infiniteBreak=!0:t.infiniteBreak=!1,e.filter.skip+=20},function(e){alert("PRO 구독자 전용 섹션입니다.")})})},e.putTags=t.putTags=function(e,r,n,o){if(t.generateWhereOrList.includes(e)){if(null==r.id||t.where[e].includes(r.id))return void(t.input[e]="");t.searchTools.list.push({group:e,name:r.name,id:r.id}),t.where[e].push(r.id)}else if(t.generateWhereCompareList.includes(e)){var a=e.split("_")[0],i=e.split("_")[1],s=r.split("_")[0],p=r.split("_")[1];angular.forEach(t.searchTools.list,function(r,n){return r.id==e?t.searchTools.list.splice(n,1):null}),t.where[e]=[],t.searchTools.list.push({group:e,name:s,id:e});var u={};u[a]={},u[a][i]=p,t.where[e].push(u)}else{if(t.where[e].includes(r))return;null!=n?(t.searchTools.list.push({group:e,id:r,name:n}),t.where[e].push(r)):(t.searchTools.list.push({group:e,name:r}),t.where[e].push(r))}t.input[e]="",t.contents=[],t.filter.filter.skip=0,o||t.loadMore()},e.removeTags=t.removeTags=function(e,r,n){t.contents=[],t.filter.filter.skip=0;var o=null==r?n:r;t.where[e].splice(t.where[e].indexOf(o),1),t.loadMore()},e.hotTags=t.hotTags=function(e,r,n,o){if(t.reset(),null!=e)var e=e.split(",");if(null!=r)var r=r.split(",");if(null!=n)var n=n.split(",");if(null!=o)var o=o.split(",");angular.forEach(e,function(a,i){var s=!0;e.length==i+1&&(s=null),null===r?null===o?t.putTags(a,n[i],null,s):t.putTags(a,n[i],o[i],s):t.putTags(a,{id:r[i],name:n[i]},null,s)})},t.status={isopen:!1},t.saveFilter=function(e){if(t.searchTools.save){if(!t.filter.filter.where)return void alert("Sorry, you can't save an empty filter.");var r={name:t.searchTools.save,searchTools:t.searchTools.list,filter:t.where};null==p[e]&&(p[e]=[]),p[e].push(r),t.status.isopen=!1,t.reset()}},t.getSavedFilter=function(e){t.saved_filter=p[e]},t.removeSavedFilter=function(e,r){e.preventDefault(),e.stopPropagation(),t.saved_filter.splice(r,1)},t.selectSavedFilter=function(e,r){t.where=t.saved_filter[r].filter,t.searchTools.list=t.saved_filter[r].searchTools,t.contents=[],t.filter.filter.skip=0,t.loadMore()},t.searchAutoComplete=function(e,t,r,n,o){if("Company"===e)var e=d;if("Person"===e)var e=c;if("Product"===e)var e=Product;if("Category"===e)var e=m;return e[t]({id:o,filter:{where:{name:{like:r,options:"i"}},order:"name ASC",limit:30}}).$promise.then(function(e){return e.map(function(e){return n?e.name:e})},function(e){alert(e.data.error.message)})},t.getCategory=function(e,r,n,o,a,i,s,p){var u="items_"+n;if(t[u]=[],"Company"===e)var e=d;if("Person"===e)var e=c;if("Product"===e)var e=Product;if("Category"===e)var e=m;var l={fields:o.split(","),limit:a,order:i};null!=p&&(l.where={},l.where[p]=!0),e[r]({id:n,filter:l}).$promise.then(function(e){s?t[u]=t[u].concat(e):angular.forEach(e,function(e){t[u].push(e.name)})},function(e){alert(e.data.error.message)})},moment.locale("ko"),t.today=moment().format("MM/DD (dddd)"),t.yesterday=moment().add(-1,"days").format("MM/DD (dddd)"),t.sub_menu1=[{title:"즐겨찾는 페이지",icon:"fa-star-o",link:"#"},{title:"뉴스 보관함",icon:"fa-bookmark-o",link:"#"}],t.sub_menu2=[],t.sub_menu3=[{title:"여성 창업자",font:"13",link:"#",group:"gender,type",id:null,name:"f,창업자",alias:"여성"},{title:"엔젤 투자자",font:"13",link:"#",group:"type",id:null,name:"엔젤투자자",alias:null}]}]),angular.module("testApp").config(["$stateProvider",function(e){e.state("person",{url:"/person",templateUrl:"app/person/person.html",controller:"PersonCtrl"}).state("persondetail",{url:"/person/:id",templateUrl:"app/person/person_detail.html",controller:"PersonDetailCtrl"})}]),angular.module("testApp").controller("PersonDetailCtrl",["$rootScope","$scope","$state","$stateParams","$location","$window","$timeout","$log","$http","$localStorage","NewsFactory","News","Company","Person","Category","Investment",function(e,t,r,n,o,a,i,s,p,u,l,d,c,m,f,y){t.where={state:[],field:[],totalMoney:[],founderIds:[],foundationDate:[],location:[],keywords:[]},e.input=t.input={},t.searchTools={list:[]},t.generateWhereOrList=["founderIds"],t.filter={filter:{include:[{relation:"thumbnail",scope:{fields:["id","medium"]}},{relation:"product",scope:{fields:["id","name"]}}],where:{},order:"created DESC",limit:"15",skip:null}},t.generateWhereOr=function(e){var r={or:[]};return angular.forEach(t.where[e],function(t,n){var o={};o[e]=t,r.or.push(o)}),r},t.generateWhereInq=function(e){var r={};return r[e]={inq:t.where[e]},r},t.generateWhereKeywords=function(e){var r={or:[]};return angular.forEach(t.where[e],function(e,t){r.or.push({name:{like:e}}),r.or.push({nameEng:{like:e}})}),r.or.push({nameTag:{inq:t.where[e]}}),r},t.generateWhere=function(){return new Promise(function(e,r){var n={and:[]};for(var o in t.where)0!==t.where[o].length&&(t.generateWhereOrList.includes(o)?n.and.push(t.generateWhereOr(o)):"keywords"===o?n.and.push(t.generateWhereKeywords(o)):n.and.push(t.generateWhereInq(o)));return n.and.length>0?t.filter.filter.where=n:t.filter.filter.where={},e(t.filter)})},m.findById({id:n.id,filter:{include:[{relation:"thumbnail"},{relation:"employee",scope:{include:[{relation:"company",scope:{fields:["id","name"]}}]}},{relation:"newsPerson",scope:{include:[{relation:"news",scope:{fields:["title","link","datetime"]}}]}}]}}).$promise.then(function(e){t.model=e,t.model.modified=new Date,null!=e.incubation&&(t.incubations=e.incubation,angular.forEach(t.incubations,function(e,t){e.company=[],angular.forEach(e.compaines,function(t,r){e.company.push({id:t.id,name:t.name})})})),t.inserted_tag=t.model.field},function(e){alert(e.data.error.message),t.cancel()}),y.find({filter:{include:[{relation:"investee",scope:{fields:["id","name"]}}],where:{personIds:n.id}}}).$promise.then(function(e){t.invModel=e,t.invModel.modified=new Date,alert(err.data.error.message)}),e.putTags=t.putTags=function(e,r){if(t.generateWhereOrList.includes(e)){if(null==r.id||t.where[e].includes(r.id))return void(t.input[e]="");t.searchTools.list.push({group:e,name:r.name,id:r.id}),t.where[e].push(r.id)}else{if(t.where[e].includes(r))return;t.searchTools.list.push({group:e,name:r}),t.where[e].push(r)}t.input[e]="",t.loadMore()},e.removeTags=t.removeTags=function(e,r,n){var o=null==r?n:r;t.where[e].splice(t.where[e].indexOf(o),1),t.loadMore()},t.searchAutoComplete=function(e,t,r){if("Company"===e)var e=c;if("Person"===e)var e=m;return e[t]({filter:{where:{name:{like:r}},order:"name ASC",limit:10}}).$promise.then(function(e){return e.map(function(e){return e})},function(e){alert(e.data.error.message)})},t.getCategory=function(e,r,n,o,a,i,s){var p="items_"+n;if(t[p]=[],"Company"===e)var e=c;if("Person"===e)var e=m;if("Category"===e)var e=f;e[r]({id:n,filter:{fields:o.split(","),limit:a,order:i}}).$promise.then(function(e){s?t[p]=t[p].concat(e):angular.forEach(e,function(e){t[p].push(e.name)})},function(e){alert(e.data.error.message)})},moment.locale("ko"),t.today=moment().format("MM/DD (dddd)"),t.yesterday=moment().add(-1,"days").format("MM/DD (dddd)"),t.sub_menu1=[{title:"즐겨찾는 페이지",icon:"fa-star-o",link:"#"},{title:"뉴스 보관함",icon:"fa-bookmark-o",link:"#"}],t.sub_menu2=[],t.sub_menu3=[]}]),angular.module("testApp").controller("LoginCtrl",["$scope","$window","$location","User","LoopBackAuth","$localStorage",function(e,t,r,n,o,a){e.user={},e.errors={},e.remeberMe="",e.login=function(o){e.submitted=!0,n.login({include:"user",rememberMe:e.remeberMe},e.user,function(e){return e.err?alert(e.message):null!=e.err||e.id?(null!=e.user.group?a.group=e.user.group:delete a.group,t.location.reload(),void r.path("/")):alert("로그인 정보가 올바르지 않습니다.")},function(e){return alert("로그인 정보가 올바르지 않습니다.")})}}]),angular.module("testApp").controller("MemberCtrl",["$scope","$http","$location","$localStorage","$window","User","Group","GroupMapping","LoopBackAuth",function(e,t,r,n,o,a,i,s,p){a.findById({id:p.currentUserId,filter:{fields:["userId"],include:{relation:"group",scope:{}}}}).$promise.then(function(t){e.groupLimit=t.group.limit},function(e){alert(e.data.error.message)}),e.filter={id:n.group.id,filter:{include:["user"],where:{principalType:"USER",available:null},order:"principalId DESC",limit:"30",skip:null}},e.contents=[],e.loadMore=function(){r.path().includes("all")&&(e.filter.filter.where.available=!0),r.path().includes("wait")&&(e.filter.filter.where.available=!1),i.members(e.filter).$promise.then(function(t){e.contents=e.contents.concat(t),0==t.length?e.infiniteBreak=!0:e.infiniteBreak=!1,e.filter.filter.skip+=30},function(e){alert(e.data.error.message)})},e.available=function(t,r,n,a,s){return a&&e.groupLimit<=e.count?(alert("승인 인원이 초과하였습니다."),!1):void i.permit({id:r,userId:n,available:a}).$promise.then(function(t){a&&e.sendEmail(s,"confirm"),o.location.reload()},function(e){alert(e.data.error.message)})},e.sendEmail=function(e,t){a.email({email:e,type:t}).$promise.then(function(e){},function(e){alert(e.data.error.message)})},e.getCount=function(t,r){null!=r&&i.members.count({id:n.group.id,where:{principalType:"USER",available:r}}).$promise.then(function(n){e.sub_menu1[t].count=n.count,r&&(e.count=n.count)},function(e){alert(e.data.error.message)})},e.sub_menu1=[{title:"등록된 구성원",icon:"",link:"member.all",count:0,type:!0},{title:"승인 대기",icon:"",link:"member.wait",count:0,type:!1},{title:"코드 관리",icon:"",link:"member.code",count:""}],e.codeContent={code:n.group.id,limit:e.groupLimit}}]),angular.module("testApp").controller("PaymentCtrl",["$scope","$http","Auth","User",function(e,t,r,n){e.sub_menu1=[{title:"결제 내역",icon:"",link:"payment.history"},{title:"결제 정보",icon:"",link:"payment.info"}],e.posts=[{userId:1,reg_date:"2017-01-11",name:"PRO 멤버십",money:"99,000원",status:"승인됨"},{userId:1,reg_date:"2016-12-11",name:"PRO 멤버십",money:"99,000원",status:"승인됨"}]}]),angular.module("testApp").controller("ProfileCtrl",["$scope","$window","$location","User","Auth","LoopBackAuth",function(e,t,r,n,o,a){e.errors={},e.LoopBackAuth=a,e.getCurrentUser=o.getCurrentUser,e.changePassword=function(t){e.submitted=!0,t.$valid&&o.changePassword(e.user.oldPassword,e.user.newPassword).then(function(){e.message="Password successfully changed."}).catch(function(){t.password.$setValidity("mongoose",!1),e.errors.other="Incorrect password",e.message=""})},e.user={},e.ProfileChange=function(){n.patchAttributes({id:a.currentUserId},e.user).$promise.then(function(r){e.message="Profile Updated",t.location.reload()},function(e){alert(e.data.error.message)})},e.UserLeave=function(){n.patchAttributes({id:a.currentUserId},{leave:!0}).$promise.then(function(e){o.logout(),r.path("/news")},function(e){alert(e.data.error.message)})},e.sub_menu2=[{title:"계정 정보",icon:"",link:"profile"},{title:"계정 해지",icon:"",link:"profile_out"}]}]),angular.module("testApp").controller("ProupCtrl",["$scope","Auth","$location","$window",function(e,t,r,n){e.user={},e.errors={},e.sub_menu2=[{title:"자주하는 검색",icon:"fa-search",link:"#"},{title:"즐겨찾는 페이지",icon:"fa-star-o",link:"#"},{title:"뉴스 보관함",icon:"fa-bookmark-o",link:"#"}]}]),angular.module("testApp").controller("SignupCtrl",["$scope","Auth","$location","$window",function(e,t,r,n){e.user={},e.errors={},e.register=function(n){e.submitted=!0,n.$valid&&t.createUser({name:e.user.name,email:e.user.email,password:e.user.password}).then(function(){r.path("/")}).catch(function(t){t=t.data,e.errors={},angular.forEach(t.errors,function(t,r){n[r].$setValidity("mongoose",!1),e.errors[r]=t.message})})},e.loginOauth=function(e){n.location.href="/auth/"+e}}]),angular.module("testApp").controller("SettingsCtrl",["$scope","$state","$stateParams","$http","$location","User","Auth",function(e,t,r,n,o,a,i){e.errors={},e.email=r.email,e.sendMail=function(t){e.submitted=!0,t.$valid&&a.resetPassword({email:e.email}).$promise.then(function(t){o.path("password_sended/"+e.email)},function(e){alert("등록되지 않은 이메일 주소입니다. 다시 확인해주세요.")})},e.changePassword=function(t){n.defaults.headers.common.Authorization=r.access_token,a.patchAttributes({id:r.user_id},{password:e.newPassword}).$promise.then(function(e){o.path("/password_change_done")},function(e){})}}]),angular.module("testApp").controller("SignupCtrl",["$scope","Auth","User","$location","$window","$state",function(e,t,r,n,o,a){e.user={},e.errors={},e.register=function(t){e.submitted=!0,t.$valid&&r.singUp(e.user).$promise.then(function(e){a.transitionTo("signup_done")},function(e){"code"==e.data.error.message?alert("그룹 코드가 존재하지 않습니다."):alert("아이디 또는 이메일이 사용중 입니다. 다른 정보를 입력하세요.")})}}]),$(document).ready(function(){setTimeout(function(){fixWrapperHeight()},300),setBodySmall()}),$(window).bind("load",function(){$(".splash").css("display","none")}),$(window).bind("resize click",function(){setBodySmall(),setTimeout(function(){fixWrapperHeight()},300)}),angular.module("testApp").factory("Auth",["$location","$rootScope","$http","User","$cookies","$q","LoopBackAuth",function(e,t,r,n,o,a,i){var s={};return null!==i.accessTokenId&&n.getCurrent({id:i.currentUserId},function(e){s=e},function(e){}),{logout:function(){n.logout({access_token:i.accessTokenId}).$promise.then(function(t,r){i.clearUser(),i.clearStorage();var n=e.nextAfterLogin||"/login";e.nextAfterLogin=null,e.path(n)},function(e){})},getCurrentUser:function(){return s},isLoggedIn:function(){return s.hasOwnProperty("type")},isLoggedInAsync:function(e){s=n.getCurrent({id:i.currentUserId}),s.hasOwnProperty("$promise")?s.$promise.then(function(){e(!0)}).catch(function(){e(!0)}):e(s.hasOwnProperty("type")?!0:!1)},isAdmin:function(){return"admin"===s.type},isGroupMember:function(){return"group"==s.type},getToken:function(){return o.get("token")}}}]),"undefined"!=typeof module&&"undefined"!=typeof exports&&module.exports===exports&&(module.exports="lbServices"),function(e,t,r){function n(e){var t=e.match(/^(?:https?:)?\/\/([^\/]+)/);return t?t[1]:null}var o="/api",a="authorization",i=n(o)||location.host,s=t.module("lbServices",["ngResource"]);s.factory("Email",["LoopBackResource","LoopBackAuth","$injector","$q",function(e,t,r,n){var a=e(o+"/Emails/:id",{id:"@id"},{});return a.modelName="Email",a}]),s.factory("RoleMapping",["LoopBackResource","LoopBackAuth","$injector","$q",function(e,t,r,n){var a=e(o+"/roleMappings/:id",{id:"@id"},{prototype$__get__role:{url:o+"/roleMappings/:id/role",method:"GET"},create:{url:o+"/roleMappings",method:"POST"},createMany:{isArray:!0,url:o+"/roleMappings",method:"POST"},upsert:{url:o+"/roleMappings",method:"PUT"},replaceOrCreate:{url:o+"/roleMappings/replaceOrCreate",method:"POST"},upsertWithWhere:{url:o+"/roleMappings/upsertWithWhere",method:"POST"},exists:{url:o+"/roleMappings/:id/exists",method:"GET"},findById:{url:o+"/roleMappings/:id",method:"GET"},replaceById:{url:o+"/roleMappings/:id/replace",method:"POST"},find:{isArray:!0,url:o+"/roleMappings",method:"GET"},findOne:{url:o+"/roleMappings/findOne",method:"GET"},updateAll:{url:o+"/roleMappings/update",method:"POST"},deleteById:{url:o+"/roleMappings/:id",method:"DELETE"},count:{url:o+"/roleMappings/count",method:"GET"},prototype$updateAttributes:{url:o+"/roleMappings/:id",method:"PUT"},createChangeStream:{url:o+"/roleMappings/change-stream",method:"POST"},"::findById::Role::principals":{params:{fk:"@fk"},url:o+"/roles/:id/principals/:fk",method:"GET"},"::destroyById::Role::principals":{params:{fk:"@fk"},url:o+"/roles/:id/principals/:fk",method:"DELETE"},"::updateById::Role::principals":{params:{fk:"@fk"},url:o+"/roles/:id/principals/:fk",method:"PUT"},"::get::Role::principals":{isArray:!0,url:o+"/roles/:id/principals",method:"GET"},"::create::Role::principals":{url:o+"/roles/:id/principals",method:"POST"},"::createMany::Role::principals":{isArray:!0,url:o+"/roles/:id/principals",method:"POST"},"::delete::Role::principals":{url:o+"/roles/:id/principals",method:"DELETE"},"::count::Role::principals":{url:o+"/roles/:id/principals/count",method:"GET"},"::findById::User::roleMapping":{params:{fk:"@fk"},url:o+"/users/:id/roleMapping/:fk",method:"GET"},"::destroyById::User::roleMapping":{params:{fk:"@fk"},url:o+"/users/:id/roleMapping/:fk",method:"DELETE"},"::updateById::User::roleMapping":{params:{fk:"@fk"},url:o+"/users/:id/roleMapping/:fk",method:"PUT"},"::get::User::roleMapping":{isArray:!0,url:o+"/users/:id/roleMapping",method:"GET"},"::create::User::roleMapping":{url:o+"/users/:id/roleMapping",method:"POST"},"::createMany::User::roleMapping":{isArray:!0,url:o+"/users/:id/roleMapping",method:"POST"},"::delete::User::roleMapping":{url:o+"/users/:id/roleMapping",method:"DELETE"},"::count::User::roleMapping":{url:o+"/users/:id/roleMapping/count",method:"GET"}});return a.patchOrCreate=a.upsert,a.updateOrCreate=a.upsert,a.patchOrCreateWithWhere=a.upsertWithWhere,a.update=a.updateAll,a.destroyById=a.deleteById,a.removeById=a.deleteById,a.patchAttributes=a.prototype$updateAttributes,a.modelName="RoleMapping",a.role=function(){var e=r.get("Role"),t=e["::get::RoleMapping::role"];return t.apply(a,arguments)},a}]),s.factory("Role",["LoopBackResource","LoopBackAuth","$injector","$q",function(e,t,r,n){var a=e(o+"/roles/:id",{id:"@id"},{prototype$__findById__principals:{params:{fk:"@fk"},url:o+"/roles/:id/principals/:fk",method:"GET"},prototype$__destroyById__principals:{params:{fk:"@fk"},url:o+"/roles/:id/principals/:fk",method:"DELETE"},prototype$__updateById__principals:{params:{fk:"@fk"},url:o+"/roles/:id/principals/:fk",method:"PUT"},prototype$__get__principals:{isArray:!0,url:o+"/roles/:id/principals",method:"GET"},prototype$__create__principals:{url:o+"/roles/:id/principals",method:"POST"},prototype$__delete__principals:{url:o+"/roles/:id/principals",method:"DELETE"},prototype$__count__principals:{url:o+"/roles/:id/principals/count",method:"GET"},create:{url:o+"/roles",method:"POST"},createMany:{isArray:!0,url:o+"/roles",method:"POST"},upsert:{url:o+"/roles",method:"PUT"},replaceOrCreate:{url:o+"/roles/replaceOrCreate",method:"POST"},upsertWithWhere:{url:o+"/roles/upsertWithWhere",method:"POST"},exists:{url:o+"/roles/:id/exists",method:"GET"},findById:{url:o+"/roles/:id",method:"GET"},replaceById:{url:o+"/roles/:id/replace",method:"POST"},find:{isArray:!0,url:o+"/roles",method:"GET"},findOne:{url:o+"/roles/findOne",method:"GET"},updateAll:{url:o+"/roles/update",method:"POST"},deleteById:{url:o+"/roles/:id",method:"DELETE"},count:{url:o+"/roles/count",method:"GET"},prototype$updateAttributes:{url:o+"/roles/:id",method:"PUT"},createChangeStream:{url:o+"/roles/change-stream",method:"POST"},grant:{url:o+"/roles/grant",method:"POST"},"::get::RoleMapping::role":{url:o+"/roleMappings/:id/role",method:"GET"}});return a.patchOrCreate=a.upsert,a.updateOrCreate=a.upsert,a.patchOrCreateWithWhere=a.upsertWithWhere,a.update=a.updateAll,a.destroyById=a.deleteById,a.removeById=a.deleteById,a.patchAttributes=a.prototype$updateAttributes,a.modelName="Role",a.principals=function(){var e=r.get("RoleMapping"),t=e["::get::Role::principals"];return t.apply(a,arguments)},a.principals.count=function(){var e=r.get("RoleMapping"),t=e["::count::Role::principals"];return t.apply(a,arguments)},a.principals.create=function(){var e=r.get("RoleMapping"),t=e["::create::Role::principals"];return t.apply(a,arguments)},a.principals.createMany=function(){var e=r.get("RoleMapping"),t=e["::createMany::Role::principals"];return t.apply(a,arguments)},a.principals.destroyAll=function(){var e=r.get("RoleMapping"),t=e["::delete::Role::principals"];return t.apply(a,arguments)},a.principals.destroyById=function(){var e=r.get("RoleMapping"),t=e["::destroyById::Role::principals"];return t.apply(a,arguments)},a.principals.findById=function(){var e=r.get("RoleMapping"),t=e["::findById::Role::principals"];return t.apply(a,arguments)},a.principals.updateById=function(){var e=r.get("RoleMapping"),t=e["::updateById::Role::principals"];return t.apply(a,arguments)},a}]),s.factory("Container",["LoopBackResource","LoopBackAuth","$injector","$q",function(e,t,r,n){var a=e(o+"/containers/:id",{id:"@id"},{getContainers:{isArray:!0,url:o+"/containers",method:"GET"},createContainer:{url:o+"/containers",method:"POST"},destroyContainer:{url:o+"/containers/:container",method:"DELETE"},getContainer:{url:o+"/containers/:container",method:"GET"},getFiles:{isArray:!0,url:o+"/containers/:container/files",method:"GET"},getFile:{url:o+"/containers/:container/files/:file",method:"GET"},removeFile:{url:o+"/containers/:container/files/:file",method:"DELETE"},upload:{url:o+"/containers/:container/upload",method:"POST"},download:{url:o+"/containers/:container/download/:file",method:"GET"}});return a.modelName="Container",a}]),s.factory("File",["LoopBackResource","LoopBackAuth","$injector","$q",function(e,t,r,n){var a=e(o+"/files/:id",{id:"@id"},{prototype$__get__person:{url:o+"/files/:id/person",method:"GET"},prototype$__get__company:{url:o+"/files/:id/company",method:"GET"},create:{url:o+"/files",method:"POST"},createMany:{isArray:!0,url:o+"/files",method:"POST"},upsert:{url:o+"/files",method:"PUT"},replaceOrCreate:{url:o+"/files/replaceOrCreate",method:"POST"},upsertWithWhere:{url:o+"/files/upsertWithWhere",method:"POST"},exists:{url:o+"/files/:id/exists",method:"GET"},findById:{url:o+"/files/:id",method:"GET"},replaceById:{url:o+"/files/:id/replace",method:"POST"},find:{isArray:!0,url:o+"/files",method:"GET"},findOne:{url:o+"/files/findOne",method:"GET"},updateAll:{url:o+"/files/update",method:"POST"},deleteById:{url:o+"/files/:id",method:"DELETE"},count:{url:o+"/files/count",method:"GET"},prototype$updateAttributes:{url:o+"/files/:id",method:"PUT"},createChangeStream:{url:o+"/files/change-stream",method:"POST"},upload:{url:o+"/files/upload",method:"POST"},"::get::Banner::file":{url:o+"/banners/:id/file",method:"GET"},"::create::Banner::file":{url:o+"/banners/:id/file",method:"POST"},"::createMany::Banner::file":{isArray:!0,url:o+"/banners/:id/file",method:"POST"},"::update::Banner::file":{url:o+"/banners/:id/file",method:"PUT"},"::destroy::Banner::file":{url:o+"/banners/:id/file",method:"DELETE"},"::findById::Person::file":{params:{fk:"@fk"},url:o+"/people/:id/file/:fk",method:"GET"},"::destroyById::Person::file":{params:{fk:"@fk"},url:o+"/people/:id/file/:fk",method:"DELETE"},"::updateById::Person::file":{params:{fk:"@fk"},url:o+"/people/:id/file/:fk",method:"PUT"},"::get::Person::file":{isArray:!0,url:o+"/people/:id/file",method:"GET"},"::create::Person::file":{url:o+"/people/:id/file",method:"POST"},"::createMany::Person::file":{isArray:!0,url:o+"/people/:id/file",method:"POST"},"::delete::Person::file":{url:o+"/people/:id/file",method:"DELETE"},"::count::Person::file":{url:o+"/people/:id/file/count",method:"GET"},"::findById::Company::file":{params:{fk:"@fk"},url:o+"/companies/:id/file/:fk",method:"GET"},"::destroyById::Company::file":{params:{fk:"@fk"},url:o+"/companies/:id/file/:fk",method:"DELETE"},"::updateById::Company::file":{params:{fk:"@fk"},url:o+"/companies/:id/file/:fk",method:"PUT"},"::get::Company::file":{isArray:!0,url:o+"/companies/:id/file",method:"GET"},"::create::Company::file":{url:o+"/companies/:id/file",method:"POST"},"::createMany::Company::file":{isArray:!0,url:o+"/companies/:id/file",method:"POST"},"::delete::Company::file":{url:o+"/companies/:id/file",method:"DELETE"},"::count::Company::file":{url:o+"/companies/:id/file/count",method:"GET"}});return a.patchOrCreate=a.upsert,a.updateOrCreate=a.upsert,a.patchOrCreateWithWhere=a.upsertWithWhere,a.update=a.updateAll,a.destroyById=a.deleteById,a.removeById=a.deleteById,a.patchAttributes=a.prototype$updateAttributes,a.modelName="File",a.person=function(){var e=r.get("Person"),t=e["::get::File::person"];return t.apply(a,arguments)},a.company=function(){var e=r.get("Company"),t=e["::get::File::company"];return t.apply(a,arguments)},a}]),s.factory("User",["LoopBackResource","LoopBackAuth","$injector","$q",function(e,t,r,n){var a=e(o+"/users/:id",{id:"@id"},{prototype$__findById__accessTokens:{params:{fk:"@fk"},url:o+"/users/:id/accessTokens/:fk",method:"GET"},prototype$__destroyById__accessTokens:{params:{fk:"@fk"},url:o+"/users/:id/accessTokens/:fk",method:"DELETE"},prototype$__updateById__accessTokens:{params:{fk:"@fk"},url:o+"/users/:id/accessTokens/:fk",method:"PUT"},prototype$__findById__roleMapping:{params:{fk:"@fk"},url:o+"/users/:id/roleMapping/:fk",method:"GET"},prototype$__destroyById__roleMapping:{params:{fk:"@fk"},url:o+"/users/:id/roleMapping/:fk",method:"DELETE"},prototype$__updateById__roleMapping:{params:{fk:"@fk"},url:o+"/users/:id/roleMapping/:fk",method:"PUT"},prototype$__findById__event:{params:{fk:"@fk"},url:o+"/users/:id/event/:fk",method:"GET"},prototype$__destroyById__event:{params:{fk:"@fk"},url:o+"/users/:id/event/:fk",method:"DELETE"},prototype$__updateById__event:{params:{fk:"@fk"},url:o+"/users/:id/event/:fk",method:"PUT"},prototype$__findById__business:{params:{fk:"@fk"},url:o+"/users/:id/business/:fk",method:"GET"},prototype$__destroyById__business:{params:{fk:"@fk"},url:o+"/users/:id/business/:fk",method:"DELETE"},prototype$__updateById__business:{params:{fk:"@fk"},url:o+"/users/:id/business/:fk",method:"PUT"},prototype$__findById__news:{params:{fk:"@fk"},url:o+"/users/:id/news/:fk",method:"GET"},prototype$__destroyById__news:{params:{fk:"@fk"},url:o+"/users/:id/news/:fk",method:"DELETE"},prototype$__updateById__news:{params:{fk:"@fk"},url:o+"/users/:id/news/:fk",method:"PUT"},prototype$__get__group:{url:o+"/users/:id/group",method:"GET"},prototype$__create__group:{url:o+"/users/:id/group",method:"POST"},prototype$__update__group:{url:o+"/users/:id/group",method:"PUT"},prototype$__destroy__group:{url:o+"/users/:id/group",method:"DELETE"},prototype$__get__groupMapping:{url:o+"/users/:id/groupMapping",method:"GET"},prototype$__create__groupMapping:{url:o+"/users/:id/groupMapping",method:"POST"},prototype$__update__groupMapping:{url:o+"/users/:id/groupMapping",method:"PUT"},prototype$__destroy__groupMapping:{url:o+"/users/:id/groupMapping",method:"DELETE"},prototype$__get__accessTokens:{isArray:!0,url:o+"/users/:id/accessTokens",method:"GET"},prototype$__create__accessTokens:{url:o+"/users/:id/accessTokens",method:"POST"},prototype$__delete__accessTokens:{url:o+"/users/:id/accessTokens",method:"DELETE"},prototype$__count__accessTokens:{url:o+"/users/:id/accessTokens/count",method:"GET"},prototype$__get__roleMapping:{isArray:!0,url:o+"/users/:id/roleMapping",method:"GET"},prototype$__create__roleMapping:{url:o+"/users/:id/roleMapping",method:"POST"},prototype$__delete__roleMapping:{url:o+"/users/:id/roleMapping",method:"DELETE"},prototype$__count__roleMapping:{url:o+"/users/:id/roleMapping/count",method:"GET"},prototype$__get__event:{isArray:!0,url:o+"/users/:id/event",method:"GET"},prototype$__create__event:{url:o+"/users/:id/event",method:"POST"},prototype$__delete__event:{url:o+"/users/:id/event",method:"DELETE"},prototype$__count__event:{url:o+"/users/:id/event/count",method:"GET"},prototype$__get__business:{isArray:!0,url:o+"/users/:id/business",method:"GET"},prototype$__create__business:{url:o+"/users/:id/business",method:"POST"},prototype$__delete__business:{url:o+"/users/:id/business",method:"DELETE"},prototype$__count__business:{url:o+"/users/:id/business/count",method:"GET"},prototype$__get__news:{isArray:!0,url:o+"/users/:id/news",method:"GET"},prototype$__create__news:{url:o+"/users/:id/news",method:"POST"},prototype$__delete__news:{url:o+"/users/:id/news",method:"DELETE"},prototype$__count__news:{url:o+"/users/:id/news/count",method:"GET"},create:{url:o+"/users",method:"POST"},createMany:{isArray:!0,url:o+"/users",method:"POST"},upsert:{url:o+"/users",method:"PUT"},replaceOrCreate:{url:o+"/users/replaceOrCreate",method:"POST"},upsertWithWhere:{url:o+"/users/upsertWithWhere",method:"POST"},exists:{url:o+"/users/:id/exists",method:"GET"},findById:{url:o+"/users/:id",method:"GET"},replaceById:{url:o+"/users/:id/replace",method:"POST"},find:{isArray:!0,url:o+"/users",method:"GET"},findOne:{url:o+"/users/findOne",method:"GET"},updateAll:{url:o+"/users/update",method:"POST"},deleteById:{url:o+"/users/:id",method:"DELETE"},count:{url:o+"/users/count",method:"GET"},prototype$updateAttributes:{url:o+"/users/:id",method:"PUT"},createChangeStream:{url:o+"/users/change-stream",method:"POST"},login:{params:{include:"user"},interceptor:{response:function(e){var r=e.data;return t.setUser(r.id,r.userId,r.user),t.rememberMe=e.config.params.rememberMe!==!1,t.save(),e.resource}},url:o+"/users/login",method:"POST"},logout:{interceptor:{response:function(e){return t.clearUser(),t.clearStorage(),e.resource},responseError:function(e){return t.clearUser(),t.clearStorage(),e.resource}},url:o+"/users/logout",method:"POST"},confirm:{url:o+"/users/confirm",method:"GET"},resetPassword:{url:o+"/users/reset",method:"POST"},singUp:{url:o+"/users/singUp",method:"POST"},login:{params:{include:"user"},interceptor:{response:function(e){var r=e.data;return t.setUser(r.id,r.userId,r.user),t.rememberMe=e.config.params.rememberMe!==!1,t.save(),e.resource}},url:o+"/users/login",method:"POST"},roles:{url:o+"/users/:id/roles",method:"GET"},roleNames:{url:o+"/users/:id/roleNames",method:"GET"},email:{url:o+"/users/email/:email/:type",method:"GET"},"::get::Event::user":{url:o+"/events/:id/user",method:"GET"},"::get::Business::user":{url:o+"/businesses/:id/user",method:"GET"},"::get::News::user":{url:o+"/news/:id/user",method:"GET"},"::get::Group::user":{url:o+"/groups/:id/user",method:"GET"},"::get::GroupMapping::user":{url:o+"/groupMappings/:id/user",method:"GET"},getCurrent:{url:o+"/users/:id",method:"GET",params:{id:function(){var e=t.currentUserId;return null==e&&(e="__anonymous__"),e}},interceptor:{response:function(e){return t.currentUserData=e.data,e.resource},responseError:function(e){return t.clearUser(),t.clearStorage(),n.reject(e)}},__isGetCurrentUser__:!0}});return a.patchOrCreate=a.upsert,a.updateOrCreate=a.upsert,a.patchOrCreateWithWhere=a.upsertWithWhere,a.update=a.updateAll,a.destroyById=a.deleteById,a.removeById=a.deleteById,a.patchAttributes=a.prototype$updateAttributes,a.getCachedCurrent=function(){var e=t.currentUserData;return e?new a(e):null;
},a.isAuthenticated=function(){return null!=this.getCurrentId()},a.getCurrentId=function(){return t.currentUserId},a.modelName="User",a.roleMapping=function(){var e=r.get("RoleMapping"),t=e["::get::User::roleMapping"];return t.apply(a,arguments)},a.roleMapping.count=function(){var e=r.get("RoleMapping"),t=e["::count::User::roleMapping"];return t.apply(a,arguments)},a.roleMapping.create=function(){var e=r.get("RoleMapping"),t=e["::create::User::roleMapping"];return t.apply(a,arguments)},a.roleMapping.createMany=function(){var e=r.get("RoleMapping"),t=e["::createMany::User::roleMapping"];return t.apply(a,arguments)},a.roleMapping.destroyAll=function(){var e=r.get("RoleMapping"),t=e["::delete::User::roleMapping"];return t.apply(a,arguments)},a.roleMapping.destroyById=function(){var e=r.get("RoleMapping"),t=e["::destroyById::User::roleMapping"];return t.apply(a,arguments)},a.roleMapping.findById=function(){var e=r.get("RoleMapping"),t=e["::findById::User::roleMapping"];return t.apply(a,arguments)},a.roleMapping.updateById=function(){var e=r.get("RoleMapping"),t=e["::updateById::User::roleMapping"];return t.apply(a,arguments)},a.event=function(){var e=r.get("Event"),t=e["::get::User::event"];return t.apply(a,arguments)},a.event.count=function(){var e=r.get("Event"),t=e["::count::User::event"];return t.apply(a,arguments)},a.event.create=function(){var e=r.get("Event"),t=e["::create::User::event"];return t.apply(a,arguments)},a.event.createMany=function(){var e=r.get("Event"),t=e["::createMany::User::event"];return t.apply(a,arguments)},a.event.destroyAll=function(){var e=r.get("Event"),t=e["::delete::User::event"];return t.apply(a,arguments)},a.event.destroyById=function(){var e=r.get("Event"),t=e["::destroyById::User::event"];return t.apply(a,arguments)},a.event.findById=function(){var e=r.get("Event"),t=e["::findById::User::event"];return t.apply(a,arguments)},a.event.updateById=function(){var e=r.get("Event"),t=e["::updateById::User::event"];return t.apply(a,arguments)},a.business=function(){var e=r.get("Business"),t=e["::get::User::business"];return t.apply(a,arguments)},a.business.count=function(){var e=r.get("Business"),t=e["::count::User::business"];return t.apply(a,arguments)},a.business.create=function(){var e=r.get("Business"),t=e["::create::User::business"];return t.apply(a,arguments)},a.business.createMany=function(){var e=r.get("Business"),t=e["::createMany::User::business"];return t.apply(a,arguments)},a.business.destroyAll=function(){var e=r.get("Business"),t=e["::delete::User::business"];return t.apply(a,arguments)},a.business.destroyById=function(){var e=r.get("Business"),t=e["::destroyById::User::business"];return t.apply(a,arguments)},a.business.findById=function(){var e=r.get("Business"),t=e["::findById::User::business"];return t.apply(a,arguments)},a.business.updateById=function(){var e=r.get("Business"),t=e["::updateById::User::business"];return t.apply(a,arguments)},a.news=function(){var e=r.get("News"),t=e["::get::User::news"];return t.apply(a,arguments)},a.news.count=function(){var e=r.get("News"),t=e["::count::User::news"];return t.apply(a,arguments)},a.news.create=function(){var e=r.get("News"),t=e["::create::User::news"];return t.apply(a,arguments)},a.news.createMany=function(){var e=r.get("News"),t=e["::createMany::User::news"];return t.apply(a,arguments)},a.news.destroyAll=function(){var e=r.get("News"),t=e["::delete::User::news"];return t.apply(a,arguments)},a.news.destroyById=function(){var e=r.get("News"),t=e["::destroyById::User::news"];return t.apply(a,arguments)},a.news.findById=function(){var e=r.get("News"),t=e["::findById::User::news"];return t.apply(a,arguments)},a.news.updateById=function(){var e=r.get("News"),t=e["::updateById::User::news"];return t.apply(a,arguments)},a.group=function(){var e=r.get("Group"),t=e["::get::User::group"];return t.apply(a,arguments)},a.group.create=function(){var e=r.get("Group"),t=e["::create::User::group"];return t.apply(a,arguments)},a.group.createMany=function(){var e=r.get("Group"),t=e["::createMany::User::group"];return t.apply(a,arguments)},a.group.destroy=function(){var e=r.get("Group"),t=e["::destroy::User::group"];return t.apply(a,arguments)},a.group.update=function(){var e=r.get("Group"),t=e["::update::User::group"];return t.apply(a,arguments)},a.groupMapping=function(){var e=r.get("GroupMapping"),t=e["::get::User::groupMapping"];return t.apply(a,arguments)},a.groupMapping.create=function(){var e=r.get("GroupMapping"),t=e["::create::User::groupMapping"];return t.apply(a,arguments)},a.groupMapping.createMany=function(){var e=r.get("GroupMapping"),t=e["::createMany::User::groupMapping"];return t.apply(a,arguments)},a.groupMapping.destroy=function(){var e=r.get("GroupMapping"),t=e["::destroy::User::groupMapping"];return t.apply(a,arguments)},a.groupMapping.update=function(){var e=r.get("GroupMapping"),t=e["::update::User::groupMapping"];return t.apply(a,arguments)},a}]),s.factory("Event",["LoopBackResource","LoopBackAuth","$injector","$q",function(e,t,r,n){var a=e(o+"/events/:id",{id:"@id"},{prototype$__get__user:{url:o+"/events/:id/user",method:"GET"},create:{url:o+"/events",method:"POST"},createMany:{isArray:!0,url:o+"/events",method:"POST"},upsert:{url:o+"/events",method:"PUT"},replaceOrCreate:{url:o+"/events/replaceOrCreate",method:"POST"},upsertWithWhere:{url:o+"/events/upsertWithWhere",method:"POST"},exists:{url:o+"/events/:id/exists",method:"GET"},findById:{url:o+"/events/:id",method:"GET"},replaceById:{url:o+"/events/:id/replace",method:"POST"},find:{isArray:!0,url:o+"/events",method:"GET"},findOne:{url:o+"/events/findOne",method:"GET"},updateAll:{url:o+"/events/update",method:"POST"},deleteById:{url:o+"/events/:id",method:"DELETE"},count:{url:o+"/events/count",method:"GET"},prototype$updateAttributes:{url:o+"/events/:id",method:"PUT"},createChangeStream:{url:o+"/events/change-stream",method:"POST"},"::findById::User::event":{params:{fk:"@fk"},url:o+"/users/:id/event/:fk",method:"GET"},"::destroyById::User::event":{params:{fk:"@fk"},url:o+"/users/:id/event/:fk",method:"DELETE"},"::updateById::User::event":{params:{fk:"@fk"},url:o+"/users/:id/event/:fk",method:"PUT"},"::get::User::event":{isArray:!0,url:o+"/users/:id/event",method:"GET"},"::create::User::event":{url:o+"/users/:id/event",method:"POST"},"::createMany::User::event":{isArray:!0,url:o+"/users/:id/event",method:"POST"},"::delete::User::event":{url:o+"/users/:id/event",method:"DELETE"},"::count::User::event":{url:o+"/users/:id/event/count",method:"GET"}});return a.patchOrCreate=a.upsert,a.updateOrCreate=a.upsert,a.patchOrCreateWithWhere=a.upsertWithWhere,a.update=a.updateAll,a.destroyById=a.deleteById,a.removeById=a.deleteById,a.patchAttributes=a.prototype$updateAttributes,a.modelName="Event",a.user=function(){var e=r.get("User"),t=e["::get::Event::user"];return t.apply(a,arguments)},a}]),s.factory("Business",["LoopBackResource","LoopBackAuth","$injector","$q",function(e,t,r,n){var a=e(o+"/businesses/:id",{id:"@id"},{prototype$__get__user:{url:o+"/businesses/:id/user",method:"GET"},prototype$__findById__organizations:{params:{fk:"@fk"},url:o+"/businesses/:id/organizations/:fk",method:"GET"},prototype$__destroyById__organizations:{params:{fk:"@fk"},url:o+"/businesses/:id/organizations/:fk",method:"DELETE"},prototype$__updateById__organizations:{params:{fk:"@fk"},url:o+"/businesses/:id/organizations/:fk",method:"PUT"},prototype$__link__organizations:{params:{fk:"@fk"},url:o+"/businesses/:id/organizations/rel/:fk",method:"PUT"},prototype$__unlink__organizations:{params:{fk:"@fk"},url:o+"/businesses/:id/organizations/rel/:fk",method:"DELETE"},prototype$__exists__organizations:{params:{fk:"@fk"},url:o+"/businesses/:id/organizations/rel/:fk",method:"HEAD"},prototype$__get__organizations:{isArray:!0,url:o+"/businesses/:id/organizations",method:"GET"},prototype$__create__organizations:{url:o+"/businesses/:id/organizations",method:"POST"},prototype$__delete__organizations:{url:o+"/businesses/:id/organizations",method:"DELETE"},prototype$__count__organizations:{url:o+"/businesses/:id/organizations/count",method:"GET"},create:{url:o+"/businesses",method:"POST"},createMany:{isArray:!0,url:o+"/businesses",method:"POST"},upsert:{url:o+"/businesses",method:"PUT"},replaceOrCreate:{url:o+"/businesses/replaceOrCreate",method:"POST"},upsertWithWhere:{url:o+"/businesses/upsertWithWhere",method:"POST"},exists:{url:o+"/businesses/:id/exists",method:"GET"},findById:{url:o+"/businesses/:id",method:"GET"},replaceById:{url:o+"/businesses/:id/replace",method:"POST"},find:{isArray:!0,url:o+"/businesses",method:"GET"},findOne:{url:o+"/businesses/findOne",method:"GET"},updateAll:{url:o+"/businesses/update",method:"POST"},deleteById:{url:o+"/businesses/:id",method:"DELETE"},count:{url:o+"/businesses/count",method:"GET"},prototype$updateAttributes:{url:o+"/businesses/:id",method:"PUT"},createChangeStream:{url:o+"/businesses/change-stream",method:"POST"},"::findById::User::business":{params:{fk:"@fk"},url:o+"/users/:id/business/:fk",method:"GET"},"::destroyById::User::business":{params:{fk:"@fk"},url:o+"/users/:id/business/:fk",method:"DELETE"},"::updateById::User::business":{params:{fk:"@fk"},url:o+"/users/:id/business/:fk",method:"PUT"},"::get::User::business":{isArray:!0,url:o+"/users/:id/business",method:"GET"},"::create::User::business":{url:o+"/users/:id/business",method:"POST"},"::createMany::User::business":{isArray:!0,url:o+"/users/:id/business",method:"POST"},"::delete::User::business":{url:o+"/users/:id/business",method:"DELETE"},"::count::User::business":{url:o+"/users/:id/business/count",method:"GET"}});return a.patchOrCreate=a.upsert,a.updateOrCreate=a.upsert,a.patchOrCreateWithWhere=a.upsertWithWhere,a.update=a.updateAll,a.destroyById=a.deleteById,a.removeById=a.deleteById,a.patchAttributes=a.prototype$updateAttributes,a.modelName="Business",a.user=function(){var e=r.get("User"),t=e["::get::Business::user"];return t.apply(a,arguments)},a.organizations=function(){var e=r.get("Company"),t=e["::get::Business::organizations"];return t.apply(a,arguments)},a.organizations.count=function(){var e=r.get("Company"),t=e["::count::Business::organizations"];return t.apply(a,arguments)},a.organizations.create=function(){var e=r.get("Company"),t=e["::create::Business::organizations"];return t.apply(a,arguments)},a.organizations.createMany=function(){var e=r.get("Company"),t=e["::createMany::Business::organizations"];return t.apply(a,arguments)},a.organizations.destroyAll=function(){var e=r.get("Company"),t=e["::delete::Business::organizations"];return t.apply(a,arguments)},a.organizations.destroyById=function(){var e=r.get("Company"),t=e["::destroyById::Business::organizations"];return t.apply(a,arguments)},a.organizations.exists=function(){var e=r.get("Company"),t=e["::exists::Business::organizations"];return t.apply(a,arguments)},a.organizations.findById=function(){var e=r.get("Company"),t=e["::findById::Business::organizations"];return t.apply(a,arguments)},a.organizations.link=function(){var e=r.get("Company"),t=e["::link::Business::organizations"];return t.apply(a,arguments)},a.organizations.unlink=function(){var e=r.get("Company"),t=e["::unlink::Business::organizations"];return t.apply(a,arguments)},a.organizations.updateById=function(){var e=r.get("Company"),t=e["::updateById::Business::organizations"];return t.apply(a,arguments)},a}]),s.factory("News",["LoopBackResource","LoopBackAuth","$injector","$q",function(e,t,r,n){var a=e(o+"/news/:id",{id:"@id"},{prototype$__get__user:{url:o+"/news/:id/user",method:"GET"},prototype$__get__ipo:{url:o+"/news/:id/ipo",method:"GET"},prototype$__create__ipo:{url:o+"/news/:id/ipo",method:"POST"},prototype$__update__ipo:{url:o+"/news/:id/ipo",method:"PUT"},prototype$__destroy__ipo:{url:o+"/news/:id/ipo",method:"DELETE"},prototype$__get__mna:{url:o+"/news/:id/mna",method:"GET"},prototype$__create__mna:{url:o+"/news/:id/mna",method:"POST"},prototype$__update__mna:{url:o+"/news/:id/mna",method:"PUT"},prototype$__destroy__mna:{url:o+"/news/:id/mna",method:"DELETE"},prototype$__get__investment:{url:o+"/news/:id/investment",method:"GET"},prototype$__create__investment:{url:o+"/news/:id/investment",method:"POST"},prototype$__update__investment:{url:o+"/news/:id/investment",method:"PUT"},prototype$__destroy__investment:{url:o+"/news/:id/investment",method:"DELETE"},prototype$__findById__product:{params:{fk:"@fk"},url:o+"/news/:id/product/:fk",method:"GET"},prototype$__destroyById__product:{params:{fk:"@fk"},url:o+"/news/:id/product/:fk",method:"DELETE"},prototype$__updateById__product:{params:{fk:"@fk"},url:o+"/news/:id/product/:fk",method:"PUT"},prototype$__link__product:{params:{fk:"@fk"},url:o+"/news/:id/product/rel/:fk",method:"PUT"},prototype$__unlink__product:{params:{fk:"@fk"},url:o+"/news/:id/product/rel/:fk",method:"DELETE"},prototype$__exists__product:{params:{fk:"@fk"},url:o+"/news/:id/product/rel/:fk",method:"HEAD"},prototype$__findById__person:{params:{fk:"@fk"},url:o+"/news/:id/person/:fk",method:"GET"},prototype$__destroyById__person:{params:{fk:"@fk"},url:o+"/news/:id/person/:fk",method:"DELETE"},prototype$__updateById__person:{params:{fk:"@fk"},url:o+"/news/:id/person/:fk",method:"PUT"},prototype$__link__person:{params:{fk:"@fk"},url:o+"/news/:id/person/rel/:fk",method:"PUT"},prototype$__unlink__person:{params:{fk:"@fk"},url:o+"/news/:id/person/rel/:fk",method:"DELETE"},prototype$__exists__person:{params:{fk:"@fk"},url:o+"/news/:id/person/rel/:fk",method:"HEAD"},prototype$__findById__company:{params:{fk:"@fk"},url:o+"/news/:id/company/:fk",method:"GET"},prototype$__destroyById__company:{params:{fk:"@fk"},url:o+"/news/:id/company/:fk",method:"DELETE"},prototype$__updateById__company:{params:{fk:"@fk"},url:o+"/news/:id/company/:fk",method:"PUT"},prototype$__link__company:{params:{fk:"@fk"},url:o+"/news/:id/company/rel/:fk",method:"PUT"},prototype$__unlink__company:{params:{fk:"@fk"},url:o+"/news/:id/company/rel/:fk",method:"DELETE"},prototype$__exists__company:{params:{fk:"@fk"},url:o+"/news/:id/company/rel/:fk",method:"HEAD"},prototype$__findById__newsCompany:{params:{fk:"@fk"},url:o+"/news/:id/newsCompany/:fk",method:"GET"},prototype$__destroyById__newsCompany:{params:{fk:"@fk"},url:o+"/news/:id/newsCompany/:fk",method:"DELETE"},prototype$__updateById__newsCompany:{params:{fk:"@fk"},url:o+"/news/:id/newsCompany/:fk",method:"PUT"},prototype$__findById__newsPerson:{params:{fk:"@fk"},url:o+"/news/:id/newsPerson/:fk",method:"GET"},prototype$__destroyById__newsPerson:{params:{fk:"@fk"},url:o+"/news/:id/newsPerson/:fk",method:"DELETE"},prototype$__updateById__newsPerson:{params:{fk:"@fk"},url:o+"/news/:id/newsPerson/:fk",method:"PUT"},prototype$__get__product:{isArray:!0,url:o+"/news/:id/product",method:"GET"},prototype$__create__product:{url:o+"/news/:id/product",method:"POST"},prototype$__delete__product:{url:o+"/news/:id/product",method:"DELETE"},prototype$__count__product:{url:o+"/news/:id/product/count",method:"GET"},prototype$__get__person:{isArray:!0,url:o+"/news/:id/person",method:"GET"},prototype$__create__person:{url:o+"/news/:id/person",method:"POST"},prototype$__delete__person:{url:o+"/news/:id/person",method:"DELETE"},prototype$__count__person:{url:o+"/news/:id/person/count",method:"GET"},prototype$__get__company:{isArray:!0,url:o+"/news/:id/company",method:"GET"},prototype$__create__company:{url:o+"/news/:id/company",method:"POST"},prototype$__delete__company:{url:o+"/news/:id/company",method:"DELETE"},prototype$__count__company:{url:o+"/news/:id/company/count",method:"GET"},prototype$__get__newsCompany:{isArray:!0,url:o+"/news/:id/newsCompany",method:"GET"},prototype$__create__newsCompany:{url:o+"/news/:id/newsCompany",method:"POST"},prototype$__delete__newsCompany:{url:o+"/news/:id/newsCompany",method:"DELETE"},prototype$__count__newsCompany:{url:o+"/news/:id/newsCompany/count",method:"GET"},prototype$__get__newsPerson:{isArray:!0,url:o+"/news/:id/newsPerson",method:"GET"},prototype$__create__newsPerson:{url:o+"/news/:id/newsPerson",method:"POST"},prototype$__delete__newsPerson:{url:o+"/news/:id/newsPerson",method:"DELETE"},prototype$__count__newsPerson:{url:o+"/news/:id/newsPerson/count",method:"GET"},create:{url:o+"/news",method:"POST"},createMany:{isArray:!0,url:o+"/news",method:"POST"},upsert:{url:o+"/news",method:"PUT"},replaceOrCreate:{url:o+"/news/replaceOrCreate",method:"POST"},upsertWithWhere:{url:o+"/news/upsertWithWhere",method:"POST"},exists:{url:o+"/news/:id/exists",method:"GET"},findById:{url:o+"/news/:id",method:"GET"},replaceById:{url:o+"/news/:id/replace",method:"POST"},find:{isArray:!0,url:o+"/news",method:"GET"},findOne:{url:o+"/news/findOne",method:"GET"},updateAll:{url:o+"/news/update",method:"POST"},deleteById:{url:o+"/news/:id",method:"DELETE"},count:{url:o+"/news/count",method:"GET"},prototype$updateAttributes:{url:o+"/news/:id",method:"PUT"},createChangeStream:{url:o+"/news/change-stream",method:"POST"},"::findById::User::news":{params:{fk:"@fk"},url:o+"/users/:id/news/:fk",method:"GET"},"::destroyById::User::news":{params:{fk:"@fk"},url:o+"/users/:id/news/:fk",method:"DELETE"},"::updateById::User::news":{params:{fk:"@fk"},url:o+"/users/:id/news/:fk",method:"PUT"},"::get::User::news":{isArray:!0,url:o+"/users/:id/news",method:"GET"},"::create::User::news":{url:o+"/users/:id/news",method:"POST"},"::createMany::User::news":{isArray:!0,url:o+"/users/:id/news",method:"POST"},"::delete::User::news":{url:o+"/users/:id/news",method:"DELETE"},"::count::User::news":{url:o+"/users/:id/news/count",method:"GET"},"::get::Ipo::news":{url:o+"/ipos/:id/news",method:"GET"},"::get::Mna::news":{url:o+"/mnas/:id/news",method:"GET"},"::get::Investment::news":{url:o+"/investments/:id/news",method:"GET"},"::get::NewsCompany::news":{url:o+"/newsCompanies/:id/news",method:"GET"},"::get::NewsPerson::news":{url:o+"/newsPeople/:id/news",method:"GET"}});return a.patchOrCreate=a.upsert,a.updateOrCreate=a.upsert,a.patchOrCreateWithWhere=a.upsertWithWhere,a.update=a.updateAll,a.destroyById=a.deleteById,a.removeById=a.deleteById,a.patchAttributes=a.prototype$updateAttributes,a.modelName="News",a.user=function(){var e=r.get("User"),t=e["::get::News::user"];return t.apply(a,arguments)},a.ipo=function(){var e=r.get("Ipo"),t=e["::get::News::ipo"];return t.apply(a,arguments)},a.ipo.create=function(){var e=r.get("Ipo"),t=e["::create::News::ipo"];return t.apply(a,arguments)},a.ipo.createMany=function(){var e=r.get("Ipo"),t=e["::createMany::News::ipo"];return t.apply(a,arguments)},a.ipo.destroy=function(){var e=r.get("Ipo"),t=e["::destroy::News::ipo"];return t.apply(a,arguments)},a.ipo.update=function(){var e=r.get("Ipo"),t=e["::update::News::ipo"];return t.apply(a,arguments)},a.mna=function(){var e=r.get("Mna"),t=e["::get::News::mna"];return t.apply(a,arguments)},a.mna.create=function(){var e=r.get("Mna"),t=e["::create::News::mna"];return t.apply(a,arguments)},a.mna.createMany=function(){var e=r.get("Mna"),t=e["::createMany::News::mna"];return t.apply(a,arguments)},a.mna.destroy=function(){var e=r.get("Mna"),t=e["::destroy::News::mna"];return t.apply(a,arguments)},a.mna.update=function(){var e=r.get("Mna"),t=e["::update::News::mna"];return t.apply(a,arguments)},a.investment=function(){var e=r.get("Investment"),t=e["::get::News::investment"];return t.apply(a,arguments)},a.investment.create=function(){var e=r.get("Investment"),t=e["::create::News::investment"];return t.apply(a,arguments)},a.investment.createMany=function(){var e=r.get("Investment"),t=e["::createMany::News::investment"];return t.apply(a,arguments)},a.investment.destroy=function(){var e=r.get("Investment"),t=e["::destroy::News::investment"];return t.apply(a,arguments)},a.investment.update=function(){var e=r.get("Investment"),t=e["::update::News::investment"];return t.apply(a,arguments)},a.product=function(){var e=r.get("Product"),t=e["::get::News::product"];return t.apply(a,arguments)},a.product.count=function(){var e=r.get("Product"),t=e["::count::News::product"];return t.apply(a,arguments)},a.product.create=function(){var e=r.get("Product"),t=e["::create::News::product"];return t.apply(a,arguments)},a.product.createMany=function(){var e=r.get("Product"),t=e["::createMany::News::product"];return t.apply(a,arguments)},a.product.destroyAll=function(){var e=r.get("Product"),t=e["::delete::News::product"];return t.apply(a,arguments)},a.product.destroyById=function(){var e=r.get("Product"),t=e["::destroyById::News::product"];return t.apply(a,arguments)},a.product.exists=function(){var e=r.get("Product"),t=e["::exists::News::product"];return t.apply(a,arguments)},a.product.findById=function(){var e=r.get("Product"),t=e["::findById::News::product"];return t.apply(a,arguments)},a.product.link=function(){var e=r.get("Product"),t=e["::link::News::product"];return t.apply(a,arguments)},a.product.unlink=function(){var e=r.get("Product"),t=e["::unlink::News::product"];return t.apply(a,arguments)},a.product.updateById=function(){var e=r.get("Product"),t=e["::updateById::News::product"];return t.apply(a,arguments)},a.person=function(){var e=r.get("Person"),t=e["::get::News::person"];return t.apply(a,arguments)},a.person.count=function(){var e=r.get("Person"),t=e["::count::News::person"];return t.apply(a,arguments)},a.person.create=function(){var e=r.get("Person"),t=e["::create::News::person"];return t.apply(a,arguments)},a.person.createMany=function(){var e=r.get("Person"),t=e["::createMany::News::person"];return t.apply(a,arguments)},a.person.destroyAll=function(){var e=r.get("Person"),t=e["::delete::News::person"];return t.apply(a,arguments)},a.person.destroyById=function(){var e=r.get("Person"),t=e["::destroyById::News::person"];return t.apply(a,arguments)},a.person.exists=function(){var e=r.get("Person"),t=e["::exists::News::person"];return t.apply(a,arguments)},a.person.findById=function(){var e=r.get("Person"),t=e["::findById::News::person"];return t.apply(a,arguments)},a.person.link=function(){var e=r.get("Person"),t=e["::link::News::person"];return t.apply(a,arguments)},a.person.unlink=function(){var e=r.get("Person"),t=e["::unlink::News::person"];return t.apply(a,arguments)},a.person.updateById=function(){var e=r.get("Person"),t=e["::updateById::News::person"];return t.apply(a,arguments)},a.company=function(){var e=r.get("Company"),t=e["::get::News::company"];return t.apply(a,arguments)},a.company.count=function(){var e=r.get("Company"),t=e["::count::News::company"];return t.apply(a,arguments)},a.company.create=function(){var e=r.get("Company"),t=e["::create::News::company"];return t.apply(a,arguments)},a.company.createMany=function(){var e=r.get("Company"),t=e["::createMany::News::company"];return t.apply(a,arguments)},a.company.destroyAll=function(){var e=r.get("Company"),t=e["::delete::News::company"];return t.apply(a,arguments)},a.company.destroyById=function(){var e=r.get("Company"),t=e["::destroyById::News::company"];return t.apply(a,arguments)},a.company.exists=function(){var e=r.get("Company"),t=e["::exists::News::company"];return t.apply(a,arguments)},a.company.findById=function(){var e=r.get("Company"),t=e["::findById::News::company"];return t.apply(a,arguments)},a.company.link=function(){var e=r.get("Company"),t=e["::link::News::company"];return t.apply(a,arguments)},a.company.unlink=function(){var e=r.get("Company"),t=e["::unlink::News::company"];return t.apply(a,arguments)},a.company.updateById=function(){var e=r.get("Company"),t=e["::updateById::News::company"];return t.apply(a,arguments)},a.newsCompany=function(){var e=r.get("NewsCompany"),t=e["::get::News::newsCompany"];return t.apply(a,arguments)},a.newsCompany.count=function(){var e=r.get("NewsCompany"),t=e["::count::News::newsCompany"];return t.apply(a,arguments)},a.newsCompany.create=function(){var e=r.get("NewsCompany"),t=e["::create::News::newsCompany"];return t.apply(a,arguments)},a.newsCompany.createMany=function(){var e=r.get("NewsCompany"),t=e["::createMany::News::newsCompany"];return t.apply(a,arguments)},a.newsCompany.destroyAll=function(){var e=r.get("NewsCompany"),t=e["::delete::News::newsCompany"];return t.apply(a,arguments)},a.newsCompany.destroyById=function(){var e=r.get("NewsCompany"),t=e["::destroyById::News::newsCompany"];return t.apply(a,arguments)},a.newsCompany.findById=function(){var e=r.get("NewsCompany"),t=e["::findById::News::newsCompany"];return t.apply(a,arguments)},a.newsCompany.updateById=function(){var e=r.get("NewsCompany"),t=e["::updateById::News::newsCompany"];return t.apply(a,arguments)},a.newsPerson=function(){var e=r.get("NewsPerson"),t=e["::get::News::newsPerson"];return t.apply(a,arguments)},a.newsPerson.count=function(){var e=r.get("NewsPerson"),t=e["::count::News::newsPerson"];return t.apply(a,arguments)},a.newsPerson.create=function(){var e=r.get("NewsPerson"),t=e["::create::News::newsPerson"];return t.apply(a,arguments)},a.newsPerson.createMany=function(){var e=r.get("NewsPerson"),t=e["::createMany::News::newsPerson"];return t.apply(a,arguments)},a.newsPerson.destroyAll=function(){var e=r.get("NewsPerson"),t=e["::delete::News::newsPerson"];return t.apply(a,arguments)},a.newsPerson.destroyById=function(){var e=r.get("NewsPerson"),t=e["::destroyById::News::newsPerson"];return t.apply(a,arguments)},a.newsPerson.findById=function(){var e=r.get("NewsPerson"),t=e["::findById::News::newsPerson"];return t.apply(a,arguments)},a.newsPerson.updateById=function(){var e=r.get("NewsPerson"),t=e["::updateById::News::newsPerson"];return t.apply(a,arguments)},a}]),s.factory("Ipo",["LoopBackResource","LoopBackAuth","$injector","$q",function(e,t,r,n){var a=e(o+"/ipos/:id",{id:"@id"},{prototype$__get__news:{url:o+"/ipos/:id/news",method:"GET"},prototype$__get__company:{url:o+"/ipos/:id/company",method:"GET"},create:{url:o+"/ipos",method:"POST"},createMany:{isArray:!0,url:o+"/ipos",method:"POST"},upsert:{url:o+"/ipos",method:"PUT"},replaceOrCreate:{url:o+"/ipos/replaceOrCreate",method:"POST"},upsertWithWhere:{url:o+"/ipos/upsertWithWhere",method:"POST"},exists:{url:o+"/ipos/:id/exists",method:"GET"},findById:{url:o+"/ipos/:id",method:"GET"},replaceById:{url:o+"/ipos/:id/replace",method:"POST"},find:{isArray:!0,url:o+"/ipos",method:"GET"},findOne:{url:o+"/ipos/findOne",method:"GET"},updateAll:{url:o+"/ipos/update",method:"POST"},deleteById:{url:o+"/ipos/:id",method:"DELETE"},count:{url:o+"/ipos/count",method:"GET"},prototype$updateAttributes:{url:o+"/ipos/:id",method:"PUT"},createChangeStream:{url:o+"/ipos/change-stream",method:"POST"},"::get::News::ipo":{url:o+"/news/:id/ipo",method:"GET"},"::create::News::ipo":{url:o+"/news/:id/ipo",method:"POST"},"::createMany::News::ipo":{isArray:!0,url:o+"/news/:id/ipo",method:"POST"},"::update::News::ipo":{url:o+"/news/:id/ipo",method:"PUT"},"::destroy::News::ipo":{url:o+"/news/:id/ipo",method:"DELETE"},"::findById::Company::ipos":{params:{fk:"@fk"},url:o+"/companies/:id/ipos/:fk",method:"GET"},"::destroyById::Company::ipos":{params:{fk:"@fk"},url:o+"/companies/:id/ipos/:fk",method:"DELETE"},"::updateById::Company::ipos":{params:{fk:"@fk"},url:o+"/companies/:id/ipos/:fk",method:"PUT"},"::get::Company::ipos":{isArray:!0,url:o+"/companies/:id/ipos",method:"GET"},"::create::Company::ipos":{url:o+"/companies/:id/ipos",method:"POST"},"::createMany::Company::ipos":{isArray:!0,url:o+"/companies/:id/ipos",method:"POST"},"::delete::Company::ipos":{url:o+"/companies/:id/ipos",method:"DELETE"},"::count::Company::ipos":{url:o+"/companies/:id/ipos/count",method:"GET"}});return a.patchOrCreate=a.upsert,a.updateOrCreate=a.upsert,a.patchOrCreateWithWhere=a.upsertWithWhere,a.update=a.updateAll,a.destroyById=a.deleteById,a.removeById=a.deleteById,a.patchAttributes=a.prototype$updateAttributes,a.modelName="Ipo",a.news=function(){var e=r.get("News"),t=e["::get::Ipo::news"];return t.apply(a,arguments)},a.company=function(){var e=r.get("Company"),t=e["::get::Ipo::company"];return t.apply(a,arguments)},a}]),s.factory("Mna",["LoopBackResource","LoopBackAuth","$injector","$q",function(e,t,r,n){var a=e(o+"/mnas/:id",{id:"@id"},{prototype$__get__news:{url:o+"/mnas/:id/news",method:"GET"},prototype$__get__takeover:{url:o+"/mnas/:id/takeover",method:"GET"},prototype$__get__handover:{url:o+"/mnas/:id/handover",method:"GET"},create:{url:o+"/mnas",method:"POST"},createMany:{isArray:!0,url:o+"/mnas",method:"POST"},upsert:{url:o+"/mnas",method:"PUT"},replaceOrCreate:{url:o+"/mnas/replaceOrCreate",method:"POST"},upsertWithWhere:{url:o+"/mnas/upsertWithWhere",method:"POST"},exists:{url:o+"/mnas/:id/exists",method:"GET"},findById:{url:o+"/mnas/:id",method:"GET"},replaceById:{url:o+"/mnas/:id/replace",method:"POST"},find:{isArray:!0,url:o+"/mnas",method:"GET"},findOne:{url:o+"/mnas/findOne",method:"GET"},updateAll:{url:o+"/mnas/update",method:"POST"},deleteById:{url:o+"/mnas/:id",method:"DELETE"},count:{url:o+"/mnas/count",method:"GET"},prototype$updateAttributes:{url:o+"/mnas/:id",method:"PUT"},createChangeStream:{url:o+"/mnas/change-stream",method:"POST"},"::get::News::mna":{url:o+"/news/:id/mna",method:"GET"},"::create::News::mna":{url:o+"/news/:id/mna",method:"POST"},"::createMany::News::mna":{isArray:!0,url:o+"/news/:id/mna",method:"POST"},"::update::News::mna":{url:o+"/news/:id/mna",method:"PUT"},"::destroy::News::mna":{url:o+"/news/:id/mna",method:"DELETE"},"::findById::Company::handover":{params:{fk:"@fk"},url:o+"/companies/:id/handover/:fk",method:"GET"},"::destroyById::Company::handover":{params:{fk:"@fk"},url:o+"/companies/:id/handover/:fk",method:"DELETE"},"::updateById::Company::handover":{params:{fk:"@fk"},url:o+"/companies/:id/handover/:fk",method:"PUT"},"::findById::Company::takeover":{params:{fk:"@fk"},url:o+"/companies/:id/takeover/:fk",method:"GET"},"::destroyById::Company::takeover":{params:{fk:"@fk"},url:o+"/companies/:id/takeover/:fk",method:"DELETE"},"::updateById::Company::takeover":{params:{fk:"@fk"},url:o+"/companies/:id/takeover/:fk",method:"PUT"},"::get::Company::handover":{isArray:!0,url:o+"/companies/:id/handover",method:"GET"},"::create::Company::handover":{url:o+"/companies/:id/handover",method:"POST"},"::createMany::Company::handover":{isArray:!0,url:o+"/companies/:id/handover",method:"POST"},"::delete::Company::handover":{url:o+"/companies/:id/handover",method:"DELETE"},"::count::Company::handover":{url:o+"/companies/:id/handover/count",method:"GET"},"::get::Company::takeover":{isArray:!0,url:o+"/companies/:id/takeover",method:"GET"},"::create::Company::takeover":{url:o+"/companies/:id/takeover",method:"POST"},"::createMany::Company::takeover":{isArray:!0,url:o+"/companies/:id/takeover",method:"POST"},"::delete::Company::takeover":{url:o+"/companies/:id/takeover",method:"DELETE"},"::count::Company::takeover":{url:o+"/companies/:id/takeover/count",method:"GET"}});return a.patchOrCreate=a.upsert,a.updateOrCreate=a.upsert,a.patchOrCreateWithWhere=a.upsertWithWhere,a.update=a.updateAll,a.destroyById=a.deleteById,a.removeById=a.deleteById,a.patchAttributes=a.prototype$updateAttributes,a.modelName="Mna",a.news=function(){var e=r.get("News"),t=e["::get::Mna::news"];return t.apply(a,arguments)},a.takeover=function(){var e=r.get("Company"),t=e["::get::Mna::takeover"];return t.apply(a,arguments)},a.handover=function(){var e=r.get("Company"),t=e["::get::Mna::handover"];return t.apply(a,arguments)},a}]),s.factory("Investment",["LoopBackResource","LoopBackAuth","$injector","$q",function(e,t,r,n){var a=e(o+"/investments/:id",{id:"@id"},{prototype$__get__news:{url:o+"/investments/:id/news",method:"GET"},prototype$__findById__investorPerson:{params:{fk:"@fk"},url:o+"/investments/:id/investorPerson/:fk",method:"GET"},prototype$__destroyById__investorPerson:{params:{fk:"@fk"},url:o+"/investments/:id/investorPerson/:fk",method:"DELETE"},prototype$__updateById__investorPerson:{params:{fk:"@fk"},url:o+"/investments/:id/investorPerson/:fk",method:"PUT"},prototype$__link__investorPerson:{params:{fk:"@fk"},url:o+"/investments/:id/investorPerson/rel/:fk",method:"PUT"},prototype$__unlink__investorPerson:{params:{fk:"@fk"},url:o+"/investments/:id/investorPerson/rel/:fk",method:"DELETE"
},prototype$__exists__investorPerson:{params:{fk:"@fk"},url:o+"/investments/:id/investorPerson/rel/:fk",method:"HEAD"},prototype$__get__investee:{url:o+"/investments/:id/investee",method:"GET"},prototype$__findById__investorCompany:{params:{fk:"@fk"},url:o+"/investments/:id/investorCompany/:fk",method:"GET"},prototype$__destroyById__investorCompany:{params:{fk:"@fk"},url:o+"/investments/:id/investorCompany/:fk",method:"DELETE"},prototype$__updateById__investorCompany:{params:{fk:"@fk"},url:o+"/investments/:id/investorCompany/:fk",method:"PUT"},prototype$__link__investorCompany:{params:{fk:"@fk"},url:o+"/investments/:id/investorCompany/rel/:fk",method:"PUT"},prototype$__unlink__investorCompany:{params:{fk:"@fk"},url:o+"/investments/:id/investorCompany/rel/:fk",method:"DELETE"},prototype$__exists__investorCompany:{params:{fk:"@fk"},url:o+"/investments/:id/investorCompany/rel/:fk",method:"HEAD"},prototype$__get__investorPerson:{isArray:!0,url:o+"/investments/:id/investorPerson",method:"GET"},prototype$__create__investorPerson:{url:o+"/investments/:id/investorPerson",method:"POST"},prototype$__delete__investorPerson:{url:o+"/investments/:id/investorPerson",method:"DELETE"},prototype$__count__investorPerson:{url:o+"/investments/:id/investorPerson/count",method:"GET"},prototype$__get__investorCompany:{isArray:!0,url:o+"/investments/:id/investorCompany",method:"GET"},prototype$__create__investorCompany:{url:o+"/investments/:id/investorCompany",method:"POST"},prototype$__delete__investorCompany:{url:o+"/investments/:id/investorCompany",method:"DELETE"},prototype$__count__investorCompany:{url:o+"/investments/:id/investorCompany/count",method:"GET"},create:{url:o+"/investments",method:"POST"},createMany:{isArray:!0,url:o+"/investments",method:"POST"},upsert:{url:o+"/investments",method:"PUT"},replaceOrCreate:{url:o+"/investments/replaceOrCreate",method:"POST"},upsertWithWhere:{url:o+"/investments/upsertWithWhere",method:"POST"},exists:{url:o+"/investments/:id/exists",method:"GET"},findById:{url:o+"/investments/:id",method:"GET"},replaceById:{url:o+"/investments/:id/replace",method:"POST"},find:{isArray:!0,url:o+"/investments",method:"GET"},findOne:{url:o+"/investments/findOne",method:"GET"},updateAll:{url:o+"/investments/update",method:"POST"},deleteById:{url:o+"/investments/:id",method:"DELETE"},count:{url:o+"/investments/count",method:"GET"},prototype$updateAttributes:{url:o+"/investments/:id",method:"PUT"},createChangeStream:{url:o+"/investments/change-stream",method:"POST"},"::get::News::investment":{url:o+"/news/:id/investment",method:"GET"},"::create::News::investment":{url:o+"/news/:id/investment",method:"POST"},"::createMany::News::investment":{isArray:!0,url:o+"/news/:id/investment",method:"POST"},"::update::News::investment":{url:o+"/news/:id/investment",method:"PUT"},"::destroy::News::investment":{url:o+"/news/:id/investment",method:"DELETE"},"::findById::Person::investorPerson":{params:{fk:"@fk"},url:o+"/people/:id/investorPerson/:fk",method:"GET"},"::destroyById::Person::investorPerson":{params:{fk:"@fk"},url:o+"/people/:id/investorPerson/:fk",method:"DELETE"},"::updateById::Person::investorPerson":{params:{fk:"@fk"},url:o+"/people/:id/investorPerson/:fk",method:"PUT"},"::get::Person::investorPerson":{isArray:!0,url:o+"/people/:id/investorPerson",method:"GET"},"::create::Person::investorPerson":{url:o+"/people/:id/investorPerson",method:"POST"},"::createMany::Person::investorPerson":{isArray:!0,url:o+"/people/:id/investorPerson",method:"POST"},"::delete::Person::investorPerson":{url:o+"/people/:id/investorPerson",method:"DELETE"},"::count::Person::investorPerson":{url:o+"/people/:id/investorPerson/count",method:"GET"},"::findById::Company::investee":{params:{fk:"@fk"},url:o+"/companies/:id/investee/:fk",method:"GET"},"::destroyById::Company::investee":{params:{fk:"@fk"},url:o+"/companies/:id/investee/:fk",method:"DELETE"},"::updateById::Company::investee":{params:{fk:"@fk"},url:o+"/companies/:id/investee/:fk",method:"PUT"},"::get::Company::investee":{isArray:!0,url:o+"/companies/:id/investee",method:"GET"},"::create::Company::investee":{url:o+"/companies/:id/investee",method:"POST"},"::createMany::Company::investee":{isArray:!0,url:o+"/companies/:id/investee",method:"POST"},"::delete::Company::investee":{url:o+"/companies/:id/investee",method:"DELETE"},"::count::Company::investee":{url:o+"/companies/:id/investee/count",method:"GET"}});return a.patchOrCreate=a.upsert,a.updateOrCreate=a.upsert,a.patchOrCreateWithWhere=a.upsertWithWhere,a.update=a.updateAll,a.destroyById=a.deleteById,a.removeById=a.deleteById,a.patchAttributes=a.prototype$updateAttributes,a.modelName="Investment",a.news=function(){var e=r.get("News"),t=e["::get::Investment::news"];return t.apply(a,arguments)},a.investorPerson=function(){var e=r.get("Person"),t=e["::get::Investment::investorPerson"];return t.apply(a,arguments)},a.investorPerson.count=function(){var e=r.get("Person"),t=e["::count::Investment::investorPerson"];return t.apply(a,arguments)},a.investorPerson.create=function(){var e=r.get("Person"),t=e["::create::Investment::investorPerson"];return t.apply(a,arguments)},a.investorPerson.createMany=function(){var e=r.get("Person"),t=e["::createMany::Investment::investorPerson"];return t.apply(a,arguments)},a.investorPerson.destroyAll=function(){var e=r.get("Person"),t=e["::delete::Investment::investorPerson"];return t.apply(a,arguments)},a.investorPerson.destroyById=function(){var e=r.get("Person"),t=e["::destroyById::Investment::investorPerson"];return t.apply(a,arguments)},a.investorPerson.exists=function(){var e=r.get("Person"),t=e["::exists::Investment::investorPerson"];return t.apply(a,arguments)},a.investorPerson.findById=function(){var e=r.get("Person"),t=e["::findById::Investment::investorPerson"];return t.apply(a,arguments)},a.investorPerson.link=function(){var e=r.get("Person"),t=e["::link::Investment::investorPerson"];return t.apply(a,arguments)},a.investorPerson.unlink=function(){var e=r.get("Person"),t=e["::unlink::Investment::investorPerson"];return t.apply(a,arguments)},a.investorPerson.updateById=function(){var e=r.get("Person"),t=e["::updateById::Investment::investorPerson"];return t.apply(a,arguments)},a.investee=function(){var e=r.get("Company"),t=e["::get::Investment::investee"];return t.apply(a,arguments)},a.investorCompany=function(){var e=r.get("Company"),t=e["::get::Investment::investorCompany"];return t.apply(a,arguments)},a.investorCompany.count=function(){var e=r.get("Company"),t=e["::count::Investment::investorCompany"];return t.apply(a,arguments)},a.investorCompany.create=function(){var e=r.get("Company"),t=e["::create::Investment::investorCompany"];return t.apply(a,arguments)},a.investorCompany.createMany=function(){var e=r.get("Company"),t=e["::createMany::Investment::investorCompany"];return t.apply(a,arguments)},a.investorCompany.destroyAll=function(){var e=r.get("Company"),t=e["::delete::Investment::investorCompany"];return t.apply(a,arguments)},a.investorCompany.destroyById=function(){var e=r.get("Company"),t=e["::destroyById::Investment::investorCompany"];return t.apply(a,arguments)},a.investorCompany.exists=function(){var e=r.get("Company"),t=e["::exists::Investment::investorCompany"];return t.apply(a,arguments)},a.investorCompany.findById=function(){var e=r.get("Company"),t=e["::findById::Investment::investorCompany"];return t.apply(a,arguments)},a.investorCompany.link=function(){var e=r.get("Company"),t=e["::link::Investment::investorCompany"];return t.apply(a,arguments)},a.investorCompany.unlink=function(){var e=r.get("Company"),t=e["::unlink::Investment::investorCompany"];return t.apply(a,arguments)},a.investorCompany.updateById=function(){var e=r.get("Company"),t=e["::updateById::Investment::investorCompany"];return t.apply(a,arguments)},a}]),s.factory("Category",["LoopBackResource","LoopBackAuth","$injector","$q",function(e,t,r,n){var a=e(o+"/categories/:id",{id:"@id"},{prototype$__findById__categoryChild:{params:{fk:"@fk"},url:o+"/categories/:id/categoryChild/:fk",method:"GET"},prototype$__destroyById__categoryChild:{params:{fk:"@fk"},url:o+"/categories/:id/categoryChild/:fk",method:"DELETE"},prototype$__updateById__categoryChild:{params:{fk:"@fk"},url:o+"/categories/:id/categoryChild/:fk",method:"PUT"},prototype$__get__categoryChild:{isArray:!0,url:o+"/categories/:id/categoryChild",method:"GET"},prototype$__create__categoryChild:{url:o+"/categories/:id/categoryChild",method:"POST"},prototype$__delete__categoryChild:{url:o+"/categories/:id/categoryChild",method:"DELETE"},prototype$__count__categoryChild:{url:o+"/categories/:id/categoryChild/count",method:"GET"},create:{url:o+"/categories",method:"POST"},createMany:{isArray:!0,url:o+"/categories",method:"POST"},upsert:{url:o+"/categories",method:"PUT"},replaceOrCreate:{url:o+"/categories/replaceOrCreate",method:"POST"},upsertWithWhere:{url:o+"/categories/upsertWithWhere",method:"POST"},exists:{url:o+"/categories/:id/exists",method:"GET"},findById:{url:o+"/categories/:id",method:"GET"},replaceById:{url:o+"/categories/:id/replace",method:"POST"},find:{isArray:!0,url:o+"/categories",method:"GET"},findOne:{url:o+"/categories/findOne",method:"GET"},updateAll:{url:o+"/categories/update",method:"POST"},deleteById:{url:o+"/categories/:id",method:"DELETE"},count:{url:o+"/categories/count",method:"GET"},prototype$updateAttributes:{url:o+"/categories/:id",method:"PUT"},createChangeStream:{url:o+"/categories/change-stream",method:"POST"},search:{isArray:!0,url:o+"/categories/search",method:"GET"},"::get::CategoryChild::category":{url:o+"/categoryChildren/:id/category",method:"GET"}});return a.patchOrCreate=a.upsert,a.updateOrCreate=a.upsert,a.patchOrCreateWithWhere=a.upsertWithWhere,a.update=a.updateAll,a.destroyById=a.deleteById,a.removeById=a.deleteById,a.patchAttributes=a.prototype$updateAttributes,a.modelName="Category",a.categoryChild=function(){var e=r.get("CategoryChild"),t=e["::get::Category::categoryChild"];return t.apply(a,arguments)},a.categoryChild.count=function(){var e=r.get("CategoryChild"),t=e["::count::Category::categoryChild"];return t.apply(a,arguments)},a.categoryChild.create=function(){var e=r.get("CategoryChild"),t=e["::create::Category::categoryChild"];return t.apply(a,arguments)},a.categoryChild.createMany=function(){var e=r.get("CategoryChild"),t=e["::createMany::Category::categoryChild"];return t.apply(a,arguments)},a.categoryChild.destroyAll=function(){var e=r.get("CategoryChild"),t=e["::delete::Category::categoryChild"];return t.apply(a,arguments)},a.categoryChild.destroyById=function(){var e=r.get("CategoryChild"),t=e["::destroyById::Category::categoryChild"];return t.apply(a,arguments)},a.categoryChild.findById=function(){var e=r.get("CategoryChild"),t=e["::findById::Category::categoryChild"];return t.apply(a,arguments)},a.categoryChild.updateById=function(){var e=r.get("CategoryChild"),t=e["::updateById::Category::categoryChild"];return t.apply(a,arguments)},a}]),s.factory("CategoryChild",["LoopBackResource","LoopBackAuth","$injector","$q",function(e,t,r,n){var a=e(o+"/categoryChildren/:id",{id:"@id"},{prototype$__get__category:{url:o+"/categoryChildren/:id/category",method:"GET"},create:{url:o+"/categoryChildren",method:"POST"},createMany:{isArray:!0,url:o+"/categoryChildren",method:"POST"},upsert:{url:o+"/categoryChildren",method:"PUT"},replaceOrCreate:{url:o+"/categoryChildren/replaceOrCreate",method:"POST"},upsertWithWhere:{url:o+"/categoryChildren/upsertWithWhere",method:"POST"},exists:{url:o+"/categoryChildren/:id/exists",method:"GET"},findById:{url:o+"/categoryChildren/:id",method:"GET"},replaceById:{url:o+"/categoryChildren/:id/replace",method:"POST"},find:{isArray:!0,url:o+"/categoryChildren",method:"GET"},findOne:{url:o+"/categoryChildren/findOne",method:"GET"},updateAll:{url:o+"/categoryChildren/update",method:"POST"},deleteById:{url:o+"/categoryChildren/:id",method:"DELETE"},count:{url:o+"/categoryChildren/count",method:"GET"},prototype$updateAttributes:{url:o+"/categoryChildren/:id",method:"PUT"},createChangeStream:{url:o+"/categoryChildren/change-stream",method:"POST"},"::findById::Category::categoryChild":{params:{fk:"@fk"},url:o+"/categories/:id/categoryChild/:fk",method:"GET"},"::destroyById::Category::categoryChild":{params:{fk:"@fk"},url:o+"/categories/:id/categoryChild/:fk",method:"DELETE"},"::updateById::Category::categoryChild":{params:{fk:"@fk"},url:o+"/categories/:id/categoryChild/:fk",method:"PUT"},"::get::Category::categoryChild":{isArray:!0,url:o+"/categories/:id/categoryChild",method:"GET"},"::create::Category::categoryChild":{url:o+"/categories/:id/categoryChild",method:"POST"},"::createMany::Category::categoryChild":{isArray:!0,url:o+"/categories/:id/categoryChild",method:"POST"},"::delete::Category::categoryChild":{url:o+"/categories/:id/categoryChild",method:"DELETE"},"::count::Category::categoryChild":{url:o+"/categories/:id/categoryChild/count",method:"GET"}});return a.patchOrCreate=a.upsert,a.updateOrCreate=a.upsert,a.patchOrCreateWithWhere=a.upsertWithWhere,a.update=a.updateAll,a.destroyById=a.deleteById,a.removeById=a.deleteById,a.patchAttributes=a.prototype$updateAttributes,a.modelName="CategoryChild",a.category=function(){var e=r.get("Category"),t=e["::get::CategoryChild::category"];return t.apply(a,arguments)},a}]),s.factory("Banner",["LoopBackResource","LoopBackAuth","$injector","$q",function(e,t,r,n){var a=e(o+"/banners/:id",{id:"@id"},{prototype$__get__file:{url:o+"/banners/:id/file",method:"GET"},prototype$__create__file:{url:o+"/banners/:id/file",method:"POST"},prototype$__update__file:{url:o+"/banners/:id/file",method:"PUT"},prototype$__destroy__file:{url:o+"/banners/:id/file",method:"DELETE"},create:{url:o+"/banners",method:"POST"},createMany:{isArray:!0,url:o+"/banners",method:"POST"},upsert:{url:o+"/banners",method:"PUT"},replaceOrCreate:{url:o+"/banners/replaceOrCreate",method:"POST"},upsertWithWhere:{url:o+"/banners/upsertWithWhere",method:"POST"},exists:{url:o+"/banners/:id/exists",method:"GET"},findById:{url:o+"/banners/:id",method:"GET"},replaceById:{url:o+"/banners/:id/replace",method:"POST"},find:{isArray:!0,url:o+"/banners",method:"GET"},findOne:{url:o+"/banners/findOne",method:"GET"},updateAll:{url:o+"/banners/update",method:"POST"},deleteById:{url:o+"/banners/:id",method:"DELETE"},count:{url:o+"/banners/count",method:"GET"},prototype$updateAttributes:{url:o+"/banners/:id",method:"PUT"},createChangeStream:{url:o+"/banners/change-stream",method:"POST"}});return a.patchOrCreate=a.upsert,a.updateOrCreate=a.upsert,a.patchOrCreateWithWhere=a.upsertWithWhere,a.update=a.updateAll,a.destroyById=a.deleteById,a.removeById=a.deleteById,a.patchAttributes=a.prototype$updateAttributes,a.modelName="Banner",a.file=function(){var e=r.get("File"),t=e["::get::Banner::file"];return t.apply(a,arguments)},a.file.create=function(){var e=r.get("File"),t=e["::create::Banner::file"];return t.apply(a,arguments)},a.file.createMany=function(){var e=r.get("File"),t=e["::createMany::Banner::file"];return t.apply(a,arguments)},a.file.destroy=function(){var e=r.get("File"),t=e["::destroy::Banner::file"];return t.apply(a,arguments)},a.file.update=function(){var e=r.get("File"),t=e["::update::Banner::file"];return t.apply(a,arguments)},a}]),s.factory("Product",["LoopBackResource","LoopBackAuth","$injector","$q",function(e,t,r,n){var a=e(o+"/products/:id",{id:"@id"},{prototype$__get__company:{url:o+"/products/:id/company",method:"GET"},create:{url:o+"/products",method:"POST"},createMany:{isArray:!0,url:o+"/products",method:"POST"},upsert:{url:o+"/products",method:"PUT"},replaceOrCreate:{url:o+"/products/replaceOrCreate",method:"POST"},upsertWithWhere:{url:o+"/products/upsertWithWhere",method:"POST"},exists:{url:o+"/products/:id/exists",method:"GET"},findById:{url:o+"/products/:id",method:"GET"},replaceById:{url:o+"/products/:id/replace",method:"POST"},find:{isArray:!0,url:o+"/products",method:"GET"},findOne:{url:o+"/products/findOne",method:"GET"},updateAll:{url:o+"/products/update",method:"POST"},deleteById:{url:o+"/products/:id",method:"DELETE"},count:{url:o+"/products/count",method:"GET"},prototype$updateAttributes:{url:o+"/products/:id",method:"PUT"},createChangeStream:{url:o+"/products/change-stream",method:"POST"},search:{isArray:!0,url:o+"/products/search",method:"GET"},"::findById::News::product":{params:{fk:"@fk"},url:o+"/news/:id/product/:fk",method:"GET"},"::destroyById::News::product":{params:{fk:"@fk"},url:o+"/news/:id/product/:fk",method:"DELETE"},"::updateById::News::product":{params:{fk:"@fk"},url:o+"/news/:id/product/:fk",method:"PUT"},"::link::News::product":{params:{fk:"@fk"},url:o+"/news/:id/product/rel/:fk",method:"PUT"},"::unlink::News::product":{params:{fk:"@fk"},url:o+"/news/:id/product/rel/:fk",method:"DELETE"},"::exists::News::product":{params:{fk:"@fk"},url:o+"/news/:id/product/rel/:fk",method:"HEAD"},"::get::News::product":{isArray:!0,url:o+"/news/:id/product",method:"GET"},"::create::News::product":{url:o+"/news/:id/product",method:"POST"},"::createMany::News::product":{isArray:!0,url:o+"/news/:id/product",method:"POST"},"::delete::News::product":{url:o+"/news/:id/product",method:"DELETE"},"::count::News::product":{url:o+"/news/:id/product/count",method:"GET"},"::findById::Company::product":{params:{fk:"@fk"},url:o+"/companies/:id/product/:fk",method:"GET"},"::destroyById::Company::product":{params:{fk:"@fk"},url:o+"/companies/:id/product/:fk",method:"DELETE"},"::updateById::Company::product":{params:{fk:"@fk"},url:o+"/companies/:id/product/:fk",method:"PUT"},"::get::Company::product":{isArray:!0,url:o+"/companies/:id/product",method:"GET"},"::create::Company::product":{url:o+"/companies/:id/product",method:"POST"},"::createMany::Company::product":{isArray:!0,url:o+"/companies/:id/product",method:"POST"},"::delete::Company::product":{url:o+"/companies/:id/product",method:"DELETE"},"::count::Company::product":{url:o+"/companies/:id/product/count",method:"GET"}});return a.patchOrCreate=a.upsert,a.updateOrCreate=a.upsert,a.patchOrCreateWithWhere=a.upsertWithWhere,a.update=a.updateAll,a.destroyById=a.deleteById,a.removeById=a.deleteById,a.patchAttributes=a.prototype$updateAttributes,a.modelName="Product",a.company=function(){var e=r.get("Company"),t=e["::get::Product::company"];return t.apply(a,arguments)},a}]),s.factory("Incubation",["LoopBackResource","LoopBackAuth","$injector","$q",function(e,t,r,n){var a=e(o+"/incubations/:id",{id:"@id"},{prototype$__get__company:{url:o+"/incubations/:id/company",method:"GET"},prototype$__findById__companies:{params:{fk:"@fk"},url:o+"/incubations/:id/companies/:fk",method:"GET"},prototype$__destroyById__companies:{params:{fk:"@fk"},url:o+"/incubations/:id/companies/:fk",method:"DELETE"},prototype$__updateById__companies:{params:{fk:"@fk"},url:o+"/incubations/:id/companies/:fk",method:"PUT"},prototype$__link__companies:{params:{fk:"@fk"},url:o+"/incubations/:id/companies/rel/:fk",method:"PUT"},prototype$__unlink__companies:{params:{fk:"@fk"},url:o+"/incubations/:id/companies/rel/:fk",method:"DELETE"},prototype$__exists__companies:{params:{fk:"@fk"},url:o+"/incubations/:id/companies/rel/:fk",method:"HEAD"},prototype$__get__companies:{isArray:!0,url:o+"/incubations/:id/companies",method:"GET"},prototype$__create__companies:{url:o+"/incubations/:id/companies",method:"POST"},prototype$__delete__companies:{url:o+"/incubations/:id/companies",method:"DELETE"},prototype$__count__companies:{url:o+"/incubations/:id/companies/count",method:"GET"},create:{url:o+"/incubations",method:"POST"},createMany:{isArray:!0,url:o+"/incubations",method:"POST"},upsert:{url:o+"/incubations",method:"PUT"},replaceOrCreate:{url:o+"/incubations/replaceOrCreate",method:"POST"},upsertWithWhere:{url:o+"/incubations/upsertWithWhere",method:"POST"},exists:{url:o+"/incubations/:id/exists",method:"GET"},findById:{url:o+"/incubations/:id",method:"GET"},replaceById:{url:o+"/incubations/:id/replace",method:"POST"},find:{isArray:!0,url:o+"/incubations",method:"GET"},findOne:{url:o+"/incubations/findOne",method:"GET"},updateAll:{url:o+"/incubations/update",method:"POST"},deleteById:{url:o+"/incubations/:id",method:"DELETE"},count:{url:o+"/incubations/count",method:"GET"},prototype$updateAttributes:{url:o+"/incubations/:id",method:"PUT"},createChangeStream:{url:o+"/incubations/change-stream",method:"POST"},"::findById::Company::incubation":{params:{fk:"@fk"},url:o+"/companies/:id/incubation/:fk",method:"GET"},"::destroyById::Company::incubation":{params:{fk:"@fk"},url:o+"/companies/:id/incubation/:fk",method:"DELETE"},"::updateById::Company::incubation":{params:{fk:"@fk"},url:o+"/companies/:id/incubation/:fk",method:"PUT"},"::get::Company::incubation":{isArray:!0,url:o+"/companies/:id/incubation",method:"GET"},"::create::Company::incubation":{url:o+"/companies/:id/incubation",method:"POST"},"::createMany::Company::incubation":{isArray:!0,url:o+"/companies/:id/incubation",method:"POST"},"::delete::Company::incubation":{url:o+"/companies/:id/incubation",method:"DELETE"},"::count::Company::incubation":{url:o+"/companies/:id/incubation/count",method:"GET"}});return a.patchOrCreate=a.upsert,a.updateOrCreate=a.upsert,a.patchOrCreateWithWhere=a.upsertWithWhere,a.update=a.updateAll,a.destroyById=a.deleteById,a.removeById=a.deleteById,a.patchAttributes=a.prototype$updateAttributes,a.modelName="Incubation",a.company=function(){var e=r.get("Company"),t=e["::get::Incubation::company"];return t.apply(a,arguments)},a.companies=function(){var e=r.get("Company"),t=e["::get::Incubation::companies"];return t.apply(a,arguments)},a.companies.count=function(){var e=r.get("Company"),t=e["::count::Incubation::companies"];return t.apply(a,arguments)},a.companies.create=function(){var e=r.get("Company"),t=e["::create::Incubation::companies"];return t.apply(a,arguments)},a.companies.createMany=function(){var e=r.get("Company"),t=e["::createMany::Incubation::companies"];return t.apply(a,arguments)},a.companies.destroyAll=function(){var e=r.get("Company"),t=e["::delete::Incubation::companies"];return t.apply(a,arguments)},a.companies.destroyById=function(){var e=r.get("Company"),t=e["::destroyById::Incubation::companies"];return t.apply(a,arguments)},a.companies.exists=function(){var e=r.get("Company"),t=e["::exists::Incubation::companies"];return t.apply(a,arguments)},a.companies.findById=function(){var e=r.get("Company"),t=e["::findById::Incubation::companies"];return t.apply(a,arguments)},a.companies.link=function(){var e=r.get("Company"),t=e["::link::Incubation::companies"];return t.apply(a,arguments)},a.companies.unlink=function(){var e=r.get("Company"),t=e["::unlink::Incubation::companies"];return t.apply(a,arguments)},a.companies.updateById=function(){var e=r.get("Company"),t=e["::updateById::Incubation::companies"];return t.apply(a,arguments)},a}]),s.factory("Employee",["LoopBackResource","LoopBackAuth","$injector","$q",function(e,t,r,n){var a=e(o+"/employees/:id",{id:"@id"},{prototype$__get__person:{url:o+"/employees/:id/person",method:"GET"},prototype$__get__company:{url:o+"/employees/:id/company",method:"GET"},create:{url:o+"/employees",method:"POST"},createMany:{isArray:!0,url:o+"/employees",method:"POST"},upsert:{url:o+"/employees",method:"PUT"},replaceOrCreate:{url:o+"/employees/replaceOrCreate",method:"POST"},upsertWithWhere:{url:o+"/employees/upsertWithWhere",method:"POST"},exists:{url:o+"/employees/:id/exists",method:"GET"},findById:{url:o+"/employees/:id",method:"GET"},replaceById:{url:o+"/employees/:id/replace",method:"POST"},find:{isArray:!0,url:o+"/employees",method:"GET"},findOne:{url:o+"/employees/findOne",method:"GET"},updateAll:{url:o+"/employees/update",method:"POST"},deleteById:{url:o+"/employees/:id",method:"DELETE"},count:{url:o+"/employees/count",method:"GET"},prototype$updateAttributes:{url:o+"/employees/:id",method:"PUT"},createChangeStream:{url:o+"/employees/change-stream",method:"POST"},"::findById::Person::employee":{params:{fk:"@fk"},url:o+"/people/:id/employee/:fk",method:"GET"},"::destroyById::Person::employee":{params:{fk:"@fk"},url:o+"/people/:id/employee/:fk",method:"DELETE"},"::updateById::Person::employee":{params:{fk:"@fk"},url:o+"/people/:id/employee/:fk",method:"PUT"},"::get::Person::employee":{isArray:!0,url:o+"/people/:id/employee",method:"GET"},"::create::Person::employee":{url:o+"/people/:id/employee",method:"POST"},"::createMany::Person::employee":{isArray:!0,url:o+"/people/:id/employee",method:"POST"},"::delete::Person::employee":{url:o+"/people/:id/employee",method:"DELETE"},"::count::Person::employee":{url:o+"/people/:id/employee/count",method:"GET"},"::findById::Company::employee":{params:{fk:"@fk"},url:o+"/companies/:id/employee/:fk",method:"GET"},"::destroyById::Company::employee":{params:{fk:"@fk"},url:o+"/companies/:id/employee/:fk",method:"DELETE"},"::updateById::Company::employee":{params:{fk:"@fk"},url:o+"/companies/:id/employee/:fk",method:"PUT"},"::get::Company::employee":{isArray:!0,url:o+"/companies/:id/employee",method:"GET"},"::create::Company::employee":{url:o+"/companies/:id/employee",method:"POST"},"::createMany::Company::employee":{isArray:!0,url:o+"/companies/:id/employee",method:"POST"},"::delete::Company::employee":{url:o+"/companies/:id/employee",method:"DELETE"},"::count::Company::employee":{url:o+"/companies/:id/employee/count",method:"GET"}});return a.patchOrCreate=a.upsert,a.updateOrCreate=a.upsert,a.patchOrCreateWithWhere=a.upsertWithWhere,a.update=a.updateAll,a.destroyById=a.deleteById,a.removeById=a.deleteById,a.patchAttributes=a.prototype$updateAttributes,a.modelName="Employee",a.person=function(){var e=r.get("Person"),t=e["::get::Employee::person"];return t.apply(a,arguments)},a.company=function(){var e=r.get("Company"),t=e["::get::Employee::company"];return t.apply(a,arguments)},a}]),s.factory("Person",["LoopBackResource","LoopBackAuth","$injector","$q",function(e,t,r,n){var a=e(o+"/people/:id",{id:"@id"},{prototype$__findById__employee:{params:{fk:"@fk"},url:o+"/people/:id/employee/:fk",method:"GET"},prototype$__destroyById__employee:{params:{fk:"@fk"},url:o+"/people/:id/employee/:fk",method:"DELETE"},prototype$__updateById__employee:{params:{fk:"@fk"},url:o+"/people/:id/employee/:fk",method:"PUT"},prototype$__findById__investorPerson:{params:{fk:"@fk"},url:o+"/people/:id/investorPerson/:fk",method:"GET"},prototype$__destroyById__investorPerson:{params:{fk:"@fk"},url:o+"/people/:id/investorPerson/:fk",method:"DELETE"},prototype$__updateById__investorPerson:{params:{fk:"@fk"},url:o+"/people/:id/investorPerson/:fk",method:"PUT"},prototype$__findById__file:{params:{fk:"@fk"},url:o+"/people/:id/file/:fk",method:"GET"},prototype$__destroyById__file:{params:{fk:"@fk"},url:o+"/people/:id/file/:fk",method:"DELETE"},prototype$__updateById__file:{params:{fk:"@fk"},url:o+"/people/:id/file/:fk",method:"PUT"},prototype$__findById__newsPerson:{params:{fk:"@fk"},url:o+"/people/:id/newsPerson/:fk",method:"GET"},prototype$__destroyById__newsPerson:{params:{fk:"@fk"},url:o+"/people/:id/newsPerson/:fk",method:"DELETE"},prototype$__updateById__newsPerson:{params:{fk:"@fk"},url:o+"/people/:id/newsPerson/:fk",method:"PUT"},prototype$__get__thumbnail:{url:o+"/people/:id/thumbnail",method:"GET"},prototype$__create__thumbnail:{url:o+"/people/:id/thumbnail",method:"POST"},prototype$__update__thumbnail:{url:o+"/people/:id/thumbnail",method:"PUT"},prototype$__destroy__thumbnail:{url:o+"/people/:id/thumbnail",method:"DELETE"},prototype$__get__employee:{isArray:!0,url:o+"/people/:id/employee",method:"GET"},prototype$__create__employee:{url:o+"/people/:id/employee",method:"POST"},prototype$__delete__employee:{url:o+"/people/:id/employee",method:"DELETE"},prototype$__count__employee:{url:o+"/people/:id/employee/count",method:"GET"},prototype$__get__investorPerson:{isArray:!0,url:o+"/people/:id/investorPerson",method:"GET"},prototype$__create__investorPerson:{url:o+"/people/:id/investorPerson",method:"POST"},prototype$__delete__investorPerson:{url:o+"/people/:id/investorPerson",method:"DELETE"},prototype$__count__investorPerson:{url:o+"/people/:id/investorPerson/count",method:"GET"},prototype$__get__file:{isArray:!0,url:o+"/people/:id/file",method:"GET"},prototype$__create__file:{url:o+"/people/:id/file",method:"POST"},prototype$__delete__file:{url:o+"/people/:id/file",method:"DELETE"},prototype$__count__file:{url:o+"/people/:id/file/count",method:"GET"},prototype$__get__newsPerson:{isArray:!0,url:o+"/people/:id/newsPerson",method:"GET"},prototype$__create__newsPerson:{url:o+"/people/:id/newsPerson",method:"POST"},prototype$__delete__newsPerson:{url:o+"/people/:id/newsPerson",method:"DELETE"},prototype$__count__newsPerson:{url:o+"/people/:id/newsPerson/count",method:"GET"},create:{url:o+"/people",method:"POST"},createMany:{isArray:!0,url:o+"/people",method:"POST"},upsert:{url:o+"/people",method:"PUT"},replaceOrCreate:{url:o+"/people/replaceOrCreate",method:"POST"},upsertWithWhere:{url:o+"/people/upsertWithWhere",method:"POST"},exists:{url:o+"/people/:id/exists",method:"GET"},findById:{url:o+"/people/:id",method:"GET"},replaceById:{url:o+"/people/:id/replace",method:"POST"},find:{isArray:!0,url:o+"/people",method:"GET"},findOne:{url:o+"/people/findOne",method:"GET"},updateAll:{url:o+"/people/update",method:"POST"},deleteById:{url:o+"/people/:id",method:"DELETE"},count:{url:o+"/people/count",method:"GET"},prototype$updateAttributes:{url:o+"/people/:id",method:"PUT"},createChangeStream:{url:o+"/people/change-stream",method:"POST"},search:{isArray:!0,url:o+"/people/search",method:"GET"},"::get::File::person":{url:o+"/files/:id/person",method:"GET"},"::findById::News::person":{params:{fk:"@fk"},url:o+"/news/:id/person/:fk",method:"GET"},"::destroyById::News::person":{params:{fk:"@fk"},url:o+"/news/:id/person/:fk",method:"DELETE"},"::updateById::News::person":{params:{fk:"@fk"},url:o+"/news/:id/person/:fk",method:"PUT"},"::link::News::person":{params:{fk:"@fk"},url:o+"/news/:id/person/rel/:fk",method:"PUT"},"::unlink::News::person":{params:{fk:"@fk"},url:o+"/news/:id/person/rel/:fk",method:"DELETE"},"::exists::News::person":{params:{fk:"@fk"},url:o+"/news/:id/person/rel/:fk",method:"HEAD"},"::get::News::person":{isArray:!0,url:o+"/news/:id/person",method:"GET"},"::create::News::person":{url:o+"/news/:id/person",method:"POST"},"::createMany::News::person":{isArray:!0,url:o+"/news/:id/person",method:"POST"},"::delete::News::person":{url:o+"/news/:id/person",method:"DELETE"},"::count::News::person":{url:o+"/news/:id/person/count",method:"GET"},"::findById::Investment::investorPerson":{params:{fk:"@fk"},url:o+"/investments/:id/investorPerson/:fk",method:"GET"},"::destroyById::Investment::investorPerson":{params:{fk:"@fk"},url:o+"/investments/:id/investorPerson/:fk",method:"DELETE"},"::updateById::Investment::investorPerson":{params:{fk:"@fk"},url:o+"/investments/:id/investorPerson/:fk",method:"PUT"},"::link::Investment::investorPerson":{params:{fk:"@fk"},url:o+"/investments/:id/investorPerson/rel/:fk",method:"PUT"},"::unlink::Investment::investorPerson":{params:{fk:"@fk"},url:o+"/investments/:id/investorPerson/rel/:fk",method:"DELETE"},"::exists::Investment::investorPerson":{params:{fk:"@fk"},url:o+"/investments/:id/investorPerson/rel/:fk",method:"HEAD"},"::get::Investment::investorPerson":{isArray:!0,url:o+"/investments/:id/investorPerson",method:"GET"},"::create::Investment::investorPerson":{url:o+"/investments/:id/investorPerson",method:"POST"},"::createMany::Investment::investorPerson":{isArray:!0,url:o+"/investments/:id/investorPerson",method:"POST"},"::delete::Investment::investorPerson":{url:o+"/investments/:id/investorPerson",method:"DELETE"},"::count::Investment::investorPerson":{url:o+"/investments/:id/investorPerson/count",method:"GET"},"::get::Employee::person":{url:o+"/employees/:id/person",method:"GET"},"::findById::Company::founders":{params:{fk:"@fk"},url:o+"/companies/:id/founders/:fk",method:"GET"},"::destroyById::Company::founders":{params:{fk:"@fk"},url:o+"/companies/:id/founders/:fk",method:"DELETE"},"::updateById::Company::founders":{
params:{fk:"@fk"},url:o+"/companies/:id/founders/:fk",method:"PUT"},"::link::Company::founders":{params:{fk:"@fk"},url:o+"/companies/:id/founders/rel/:fk",method:"PUT"},"::unlink::Company::founders":{params:{fk:"@fk"},url:o+"/companies/:id/founders/rel/:fk",method:"DELETE"},"::exists::Company::founders":{params:{fk:"@fk"},url:o+"/companies/:id/founders/rel/:fk",method:"HEAD"},"::get::Company::founders":{isArray:!0,url:o+"/companies/:id/founders",method:"GET"},"::create::Company::founders":{url:o+"/companies/:id/founders",method:"POST"},"::createMany::Company::founders":{isArray:!0,url:o+"/companies/:id/founders",method:"POST"},"::delete::Company::founders":{url:o+"/companies/:id/founders",method:"DELETE"},"::count::Company::founders":{url:o+"/companies/:id/founders/count",method:"GET"},"::get::NewsPerson::person":{url:o+"/newsPeople/:id/person",method:"GET"}});return a.patchOrCreate=a.upsert,a.updateOrCreate=a.upsert,a.patchOrCreateWithWhere=a.upsertWithWhere,a.update=a.updateAll,a.destroyById=a.deleteById,a.removeById=a.deleteById,a.patchAttributes=a.prototype$updateAttributes,a.modelName="Person",a.employee=function(){var e=r.get("Employee"),t=e["::get::Person::employee"];return t.apply(a,arguments)},a.employee.count=function(){var e=r.get("Employee"),t=e["::count::Person::employee"];return t.apply(a,arguments)},a.employee.create=function(){var e=r.get("Employee"),t=e["::create::Person::employee"];return t.apply(a,arguments)},a.employee.createMany=function(){var e=r.get("Employee"),t=e["::createMany::Person::employee"];return t.apply(a,arguments)},a.employee.destroyAll=function(){var e=r.get("Employee"),t=e["::delete::Person::employee"];return t.apply(a,arguments)},a.employee.destroyById=function(){var e=r.get("Employee"),t=e["::destroyById::Person::employee"];return t.apply(a,arguments)},a.employee.findById=function(){var e=r.get("Employee"),t=e["::findById::Person::employee"];return t.apply(a,arguments)},a.employee.updateById=function(){var e=r.get("Employee"),t=e["::updateById::Person::employee"];return t.apply(a,arguments)},a.investorPerson=function(){var e=r.get("Investment"),t=e["::get::Person::investorPerson"];return t.apply(a,arguments)},a.investorPerson.count=function(){var e=r.get("Investment"),t=e["::count::Person::investorPerson"];return t.apply(a,arguments)},a.investorPerson.create=function(){var e=r.get("Investment"),t=e["::create::Person::investorPerson"];return t.apply(a,arguments)},a.investorPerson.createMany=function(){var e=r.get("Investment"),t=e["::createMany::Person::investorPerson"];return t.apply(a,arguments)},a.investorPerson.destroyAll=function(){var e=r.get("Investment"),t=e["::delete::Person::investorPerson"];return t.apply(a,arguments)},a.investorPerson.destroyById=function(){var e=r.get("Investment"),t=e["::destroyById::Person::investorPerson"];return t.apply(a,arguments)},a.investorPerson.findById=function(){var e=r.get("Investment"),t=e["::findById::Person::investorPerson"];return t.apply(a,arguments)},a.investorPerson.updateById=function(){var e=r.get("Investment"),t=e["::updateById::Person::investorPerson"];return t.apply(a,arguments)},a.file=function(){var e=r.get("File"),t=e["::get::Person::file"];return t.apply(a,arguments)},a.file.count=function(){var e=r.get("File"),t=e["::count::Person::file"];return t.apply(a,arguments)},a.file.create=function(){var e=r.get("File"),t=e["::create::Person::file"];return t.apply(a,arguments)},a.file.createMany=function(){var e=r.get("File"),t=e["::createMany::Person::file"];return t.apply(a,arguments)},a.file.destroyAll=function(){var e=r.get("File"),t=e["::delete::Person::file"];return t.apply(a,arguments)},a.file.destroyById=function(){var e=r.get("File"),t=e["::destroyById::Person::file"];return t.apply(a,arguments)},a.file.findById=function(){var e=r.get("File"),t=e["::findById::Person::file"];return t.apply(a,arguments)},a.file.updateById=function(){var e=r.get("File"),t=e["::updateById::Person::file"];return t.apply(a,arguments)},a.newsPerson=function(){var e=r.get("NewsPerson"),t=e["::get::Person::newsPerson"];return t.apply(a,arguments)},a.newsPerson.count=function(){var e=r.get("NewsPerson"),t=e["::count::Person::newsPerson"];return t.apply(a,arguments)},a.newsPerson.create=function(){var e=r.get("NewsPerson"),t=e["::create::Person::newsPerson"];return t.apply(a,arguments)},a.newsPerson.createMany=function(){var e=r.get("NewsPerson"),t=e["::createMany::Person::newsPerson"];return t.apply(a,arguments)},a.newsPerson.destroyAll=function(){var e=r.get("NewsPerson"),t=e["::delete::Person::newsPerson"];return t.apply(a,arguments)},a.newsPerson.destroyById=function(){var e=r.get("NewsPerson"),t=e["::destroyById::Person::newsPerson"];return t.apply(a,arguments)},a.newsPerson.findById=function(){var e=r.get("NewsPerson"),t=e["::findById::Person::newsPerson"];return t.apply(a,arguments)},a.newsPerson.updateById=function(){var e=r.get("NewsPerson"),t=e["::updateById::Person::newsPerson"];return t.apply(a,arguments)},a.thumbnail=function(){var e=r.get("Thumbnail"),t=e["::get::Person::thumbnail"];return t.apply(a,arguments)},a.thumbnail.create=function(){var e=r.get("Thumbnail"),t=e["::create::Person::thumbnail"];return t.apply(a,arguments)},a.thumbnail.createMany=function(){var e=r.get("Thumbnail"),t=e["::createMany::Person::thumbnail"];return t.apply(a,arguments)},a.thumbnail.destroy=function(){var e=r.get("Thumbnail"),t=e["::destroy::Person::thumbnail"];return t.apply(a,arguments)},a.thumbnail.update=function(){var e=r.get("Thumbnail"),t=e["::update::Person::thumbnail"];return t.apply(a,arguments)},a}]),s.factory("Company",["LoopBackResource","LoopBackAuth","$injector","$q",function(e,t,r,n){var a=e(o+"/companies/:id",{id:"@id"},{prototype$__findById__product:{params:{fk:"@fk"},url:o+"/companies/:id/product/:fk",method:"GET"},prototype$__destroyById__product:{params:{fk:"@fk"},url:o+"/companies/:id/product/:fk",method:"DELETE"},prototype$__updateById__product:{params:{fk:"@fk"},url:o+"/companies/:id/product/:fk",method:"PUT"},prototype$__findById__incubation:{params:{fk:"@fk"},url:o+"/companies/:id/incubation/:fk",method:"GET"},prototype$__destroyById__incubation:{params:{fk:"@fk"},url:o+"/companies/:id/incubation/:fk",method:"DELETE"},prototype$__updateById__incubation:{params:{fk:"@fk"},url:o+"/companies/:id/incubation/:fk",method:"PUT"},prototype$__findById__founders:{params:{fk:"@fk"},url:o+"/companies/:id/founders/:fk",method:"GET"},prototype$__destroyById__founders:{params:{fk:"@fk"},url:o+"/companies/:id/founders/:fk",method:"DELETE"},prototype$__updateById__founders:{params:{fk:"@fk"},url:o+"/companies/:id/founders/:fk",method:"PUT"},prototype$__link__founders:{params:{fk:"@fk"},url:o+"/companies/:id/founders/rel/:fk",method:"PUT"},prototype$__unlink__founders:{params:{fk:"@fk"},url:o+"/companies/:id/founders/rel/:fk",method:"DELETE"},prototype$__exists__founders:{params:{fk:"@fk"},url:o+"/companies/:id/founders/rel/:fk",method:"HEAD"},prototype$__findById__founderPrevs:{params:{fk:"@fk"},url:o+"/companies/:id/founderPrevs/:fk",method:"GET"},prototype$__destroyById__founderPrevs:{params:{fk:"@fk"},url:o+"/companies/:id/founderPrevs/:fk",method:"DELETE"},prototype$__updateById__founderPrevs:{params:{fk:"@fk"},url:o+"/companies/:id/founderPrevs/:fk",method:"PUT"},prototype$__link__founderPrevs:{params:{fk:"@fk"},url:o+"/companies/:id/founderPrevs/rel/:fk",method:"PUT"},prototype$__unlink__founderPrevs:{params:{fk:"@fk"},url:o+"/companies/:id/founderPrevs/rel/:fk",method:"DELETE"},prototype$__exists__founderPrevs:{params:{fk:"@fk"},url:o+"/companies/:id/founderPrevs/rel/:fk",method:"HEAD"},prototype$__findById__employee:{params:{fk:"@fk"},url:o+"/companies/:id/employee/:fk",method:"GET"},prototype$__destroyById__employee:{params:{fk:"@fk"},url:o+"/companies/:id/employee/:fk",method:"DELETE"},prototype$__updateById__employee:{params:{fk:"@fk"},url:o+"/companies/:id/employee/:fk",method:"PUT"},prototype$__findById__ipos:{params:{fk:"@fk"},url:o+"/companies/:id/ipos/:fk",method:"GET"},prototype$__destroyById__ipos:{params:{fk:"@fk"},url:o+"/companies/:id/ipos/:fk",method:"DELETE"},prototype$__updateById__ipos:{params:{fk:"@fk"},url:o+"/companies/:id/ipos/:fk",method:"PUT"},prototype$__findById__handover:{params:{fk:"@fk"},url:o+"/companies/:id/handover/:fk",method:"GET"},prototype$__destroyById__handover:{params:{fk:"@fk"},url:o+"/companies/:id/handover/:fk",method:"DELETE"},prototype$__updateById__handover:{params:{fk:"@fk"},url:o+"/companies/:id/handover/:fk",method:"PUT"},prototype$__findById__takeover:{params:{fk:"@fk"},url:o+"/companies/:id/takeover/:fk",method:"GET"},prototype$__destroyById__takeover:{params:{fk:"@fk"},url:o+"/companies/:id/takeover/:fk",method:"DELETE"},prototype$__updateById__takeover:{params:{fk:"@fk"},url:o+"/companies/:id/takeover/:fk",method:"PUT"},prototype$__findById__investee:{params:{fk:"@fk"},url:o+"/companies/:id/investee/:fk",method:"GET"},prototype$__destroyById__investee:{params:{fk:"@fk"},url:o+"/companies/:id/investee/:fk",method:"DELETE"},prototype$__updateById__investee:{params:{fk:"@fk"},url:o+"/companies/:id/investee/:fk",method:"PUT"},prototype$__findById__file:{params:{fk:"@fk"},url:o+"/companies/:id/file/:fk",method:"GET"},prototype$__destroyById__file:{params:{fk:"@fk"},url:o+"/companies/:id/file/:fk",method:"DELETE"},prototype$__updateById__file:{params:{fk:"@fk"},url:o+"/companies/:id/file/:fk",method:"PUT"},prototype$__findById__newsCompany:{params:{fk:"@fk"},url:o+"/companies/:id/newsCompany/:fk",method:"GET"},prototype$__destroyById__newsCompany:{params:{fk:"@fk"},url:o+"/companies/:id/newsCompany/:fk",method:"DELETE"},prototype$__updateById__newsCompany:{params:{fk:"@fk"},url:o+"/companies/:id/newsCompany/:fk",method:"PUT"},prototype$__get__thumbnail:{url:o+"/companies/:id/thumbnail",method:"GET"},prototype$__create__thumbnail:{url:o+"/companies/:id/thumbnail",method:"POST"},prototype$__update__thumbnail:{url:o+"/companies/:id/thumbnail",method:"PUT"},prototype$__destroy__thumbnail:{url:o+"/companies/:id/thumbnail",method:"DELETE"},prototype$__get__product:{isArray:!0,url:o+"/companies/:id/product",method:"GET"},prototype$__create__product:{url:o+"/companies/:id/product",method:"POST"},prototype$__delete__product:{url:o+"/companies/:id/product",method:"DELETE"},prototype$__count__product:{url:o+"/companies/:id/product/count",method:"GET"},prototype$__get__incubation:{isArray:!0,url:o+"/companies/:id/incubation",method:"GET"},prototype$__create__incubation:{url:o+"/companies/:id/incubation",method:"POST"},prototype$__delete__incubation:{url:o+"/companies/:id/incubation",method:"DELETE"},prototype$__count__incubation:{url:o+"/companies/:id/incubation/count",method:"GET"},prototype$__get__founders:{isArray:!0,url:o+"/companies/:id/founders",method:"GET"},prototype$__create__founders:{url:o+"/companies/:id/founders",method:"POST"},prototype$__delete__founders:{url:o+"/companies/:id/founders",method:"DELETE"},prototype$__count__founders:{url:o+"/companies/:id/founders/count",method:"GET"},prototype$__get__founderPrevs:{isArray:!0,url:o+"/companies/:id/founderPrevs",method:"GET"},prototype$__create__founderPrevs:{url:o+"/companies/:id/founderPrevs",method:"POST"},prototype$__delete__founderPrevs:{url:o+"/companies/:id/founderPrevs",method:"DELETE"},prototype$__count__founderPrevs:{url:o+"/companies/:id/founderPrevs/count",method:"GET"},prototype$__get__employee:{isArray:!0,url:o+"/companies/:id/employee",method:"GET"},prototype$__create__employee:{url:o+"/companies/:id/employee",method:"POST"},prototype$__delete__employee:{url:o+"/companies/:id/employee",method:"DELETE"},prototype$__count__employee:{url:o+"/companies/:id/employee/count",method:"GET"},prototype$__get__ipos:{isArray:!0,url:o+"/companies/:id/ipos",method:"GET"},prototype$__create__ipos:{url:o+"/companies/:id/ipos",method:"POST"},prototype$__delete__ipos:{url:o+"/companies/:id/ipos",method:"DELETE"},prototype$__count__ipos:{url:o+"/companies/:id/ipos/count",method:"GET"},prototype$__get__handover:{isArray:!0,url:o+"/companies/:id/handover",method:"GET"},prototype$__create__handover:{url:o+"/companies/:id/handover",method:"POST"},prototype$__delete__handover:{url:o+"/companies/:id/handover",method:"DELETE"},prototype$__count__handover:{url:o+"/companies/:id/handover/count",method:"GET"},prototype$__get__takeover:{isArray:!0,url:o+"/companies/:id/takeover",method:"GET"},prototype$__create__takeover:{url:o+"/companies/:id/takeover",method:"POST"},prototype$__delete__takeover:{url:o+"/companies/:id/takeover",method:"DELETE"},prototype$__count__takeover:{url:o+"/companies/:id/takeover/count",method:"GET"},prototype$__get__investee:{isArray:!0,url:o+"/companies/:id/investee",method:"GET"},prototype$__create__investee:{url:o+"/companies/:id/investee",method:"POST"},prototype$__delete__investee:{url:o+"/companies/:id/investee",method:"DELETE"},prototype$__count__investee:{url:o+"/companies/:id/investee/count",method:"GET"},prototype$__get__file:{isArray:!0,url:o+"/companies/:id/file",method:"GET"},prototype$__create__file:{url:o+"/companies/:id/file",method:"POST"},prototype$__delete__file:{url:o+"/companies/:id/file",method:"DELETE"},prototype$__count__file:{url:o+"/companies/:id/file/count",method:"GET"},prototype$__get__newsCompany:{isArray:!0,url:o+"/companies/:id/newsCompany",method:"GET"},prototype$__create__newsCompany:{url:o+"/companies/:id/newsCompany",method:"POST"},prototype$__delete__newsCompany:{url:o+"/companies/:id/newsCompany",method:"DELETE"},prototype$__count__newsCompany:{url:o+"/companies/:id/newsCompany/count",method:"GET"},create:{url:o+"/companies",method:"POST"},createMany:{isArray:!0,url:o+"/companies",method:"POST"},upsert:{url:o+"/companies",method:"PUT"},replaceOrCreate:{url:o+"/companies/replaceOrCreate",method:"POST"},upsertWithWhere:{url:o+"/companies/upsertWithWhere",method:"POST"},exists:{url:o+"/companies/:id/exists",method:"GET"},findById:{url:o+"/companies/:id",method:"GET"},replaceById:{url:o+"/companies/:id/replace",method:"POST"},find:{isArray:!0,url:o+"/companies",method:"GET"},findOne:{url:o+"/companies/findOne",method:"GET"},updateAll:{url:o+"/companies/update",method:"POST"},deleteById:{url:o+"/companies/:id",method:"DELETE"},count:{url:o+"/companies/count",method:"GET"},prototype$updateAttributes:{url:o+"/companies/:id",method:"PUT"},createChangeStream:{url:o+"/companies/change-stream",method:"POST"},search:{isArray:!0,url:o+"/companies/search",method:"GET"},"::get::File::company":{url:o+"/files/:id/company",method:"GET"},"::findById::Business::organizations":{params:{fk:"@fk"},url:o+"/businesses/:id/organizations/:fk",method:"GET"},"::destroyById::Business::organizations":{params:{fk:"@fk"},url:o+"/businesses/:id/organizations/:fk",method:"DELETE"},"::updateById::Business::organizations":{params:{fk:"@fk"},url:o+"/businesses/:id/organizations/:fk",method:"PUT"},"::link::Business::organizations":{params:{fk:"@fk"},url:o+"/businesses/:id/organizations/rel/:fk",method:"PUT"},"::unlink::Business::organizations":{params:{fk:"@fk"},url:o+"/businesses/:id/organizations/rel/:fk",method:"DELETE"},"::exists::Business::organizations":{params:{fk:"@fk"},url:o+"/businesses/:id/organizations/rel/:fk",method:"HEAD"},"::get::Business::organizations":{isArray:!0,url:o+"/businesses/:id/organizations",method:"GET"},"::create::Business::organizations":{url:o+"/businesses/:id/organizations",method:"POST"},"::createMany::Business::organizations":{isArray:!0,url:o+"/businesses/:id/organizations",method:"POST"},"::delete::Business::organizations":{url:o+"/businesses/:id/organizations",method:"DELETE"},"::count::Business::organizations":{url:o+"/businesses/:id/organizations/count",method:"GET"},"::findById::News::company":{params:{fk:"@fk"},url:o+"/news/:id/company/:fk",method:"GET"},"::destroyById::News::company":{params:{fk:"@fk"},url:o+"/news/:id/company/:fk",method:"DELETE"},"::updateById::News::company":{params:{fk:"@fk"},url:o+"/news/:id/company/:fk",method:"PUT"},"::link::News::company":{params:{fk:"@fk"},url:o+"/news/:id/company/rel/:fk",method:"PUT"},"::unlink::News::company":{params:{fk:"@fk"},url:o+"/news/:id/company/rel/:fk",method:"DELETE"},"::exists::News::company":{params:{fk:"@fk"},url:o+"/news/:id/company/rel/:fk",method:"HEAD"},"::get::News::company":{isArray:!0,url:o+"/news/:id/company",method:"GET"},"::create::News::company":{url:o+"/news/:id/company",method:"POST"},"::createMany::News::company":{isArray:!0,url:o+"/news/:id/company",method:"POST"},"::delete::News::company":{url:o+"/news/:id/company",method:"DELETE"},"::count::News::company":{url:o+"/news/:id/company/count",method:"GET"},"::get::Ipo::company":{url:o+"/ipos/:id/company",method:"GET"},"::get::Mna::takeover":{url:o+"/mnas/:id/takeover",method:"GET"},"::get::Mna::handover":{url:o+"/mnas/:id/handover",method:"GET"},"::get::Investment::investee":{url:o+"/investments/:id/investee",method:"GET"},"::findById::Investment::investorCompany":{params:{fk:"@fk"},url:o+"/investments/:id/investorCompany/:fk",method:"GET"},"::destroyById::Investment::investorCompany":{params:{fk:"@fk"},url:o+"/investments/:id/investorCompany/:fk",method:"DELETE"},"::updateById::Investment::investorCompany":{params:{fk:"@fk"},url:o+"/investments/:id/investorCompany/:fk",method:"PUT"},"::link::Investment::investorCompany":{params:{fk:"@fk"},url:o+"/investments/:id/investorCompany/rel/:fk",method:"PUT"},"::unlink::Investment::investorCompany":{params:{fk:"@fk"},url:o+"/investments/:id/investorCompany/rel/:fk",method:"DELETE"},"::exists::Investment::investorCompany":{params:{fk:"@fk"},url:o+"/investments/:id/investorCompany/rel/:fk",method:"HEAD"},"::get::Investment::investorCompany":{isArray:!0,url:o+"/investments/:id/investorCompany",method:"GET"},"::create::Investment::investorCompany":{url:o+"/investments/:id/investorCompany",method:"POST"},"::createMany::Investment::investorCompany":{isArray:!0,url:o+"/investments/:id/investorCompany",method:"POST"},"::delete::Investment::investorCompany":{url:o+"/investments/:id/investorCompany",method:"DELETE"},"::count::Investment::investorCompany":{url:o+"/investments/:id/investorCompany/count",method:"GET"},"::get::Product::company":{url:o+"/products/:id/company",method:"GET"},"::get::Incubation::company":{url:o+"/incubations/:id/company",method:"GET"},"::findById::Incubation::companies":{params:{fk:"@fk"},url:o+"/incubations/:id/companies/:fk",method:"GET"},"::destroyById::Incubation::companies":{params:{fk:"@fk"},url:o+"/incubations/:id/companies/:fk",method:"DELETE"},"::updateById::Incubation::companies":{params:{fk:"@fk"},url:o+"/incubations/:id/companies/:fk",method:"PUT"},"::link::Incubation::companies":{params:{fk:"@fk"},url:o+"/incubations/:id/companies/rel/:fk",method:"PUT"},"::unlink::Incubation::companies":{params:{fk:"@fk"},url:o+"/incubations/:id/companies/rel/:fk",method:"DELETE"},"::exists::Incubation::companies":{params:{fk:"@fk"},url:o+"/incubations/:id/companies/rel/:fk",method:"HEAD"},"::get::Incubation::companies":{isArray:!0,url:o+"/incubations/:id/companies",method:"GET"},"::create::Incubation::companies":{url:o+"/incubations/:id/companies",method:"POST"},"::createMany::Incubation::companies":{isArray:!0,url:o+"/incubations/:id/companies",method:"POST"},"::delete::Incubation::companies":{url:o+"/incubations/:id/companies",method:"DELETE"},"::count::Incubation::companies":{url:o+"/incubations/:id/companies/count",method:"GET"},"::get::Employee::company":{url:o+"/employees/:id/company",method:"GET"},"::findById::Company::founderPrevs":{params:{fk:"@fk"},url:o+"/companies/:id/founderPrevs/:fk",method:"GET"},"::destroyById::Company::founderPrevs":{params:{fk:"@fk"},url:o+"/companies/:id/founderPrevs/:fk",method:"DELETE"},"::updateById::Company::founderPrevs":{params:{fk:"@fk"},url:o+"/companies/:id/founderPrevs/:fk",method:"PUT"},"::link::Company::founderPrevs":{params:{fk:"@fk"},url:o+"/companies/:id/founderPrevs/rel/:fk",method:"PUT"},"::unlink::Company::founderPrevs":{params:{fk:"@fk"},url:o+"/companies/:id/founderPrevs/rel/:fk",method:"DELETE"},"::exists::Company::founderPrevs":{params:{fk:"@fk"},url:o+"/companies/:id/founderPrevs/rel/:fk",method:"HEAD"},"::get::Company::founderPrevs":{isArray:!0,url:o+"/companies/:id/founderPrevs",method:"GET"},"::create::Company::founderPrevs":{url:o+"/companies/:id/founderPrevs",method:"POST"},"::createMany::Company::founderPrevs":{isArray:!0,url:o+"/companies/:id/founderPrevs",method:"POST"},"::delete::Company::founderPrevs":{url:o+"/companies/:id/founderPrevs",method:"DELETE"},"::count::Company::founderPrevs":{url:o+"/companies/:id/founderPrevs/count",method:"GET"},"::get::NewsCompany::company":{url:o+"/newsCompanies/:id/company",method:"GET"}});return a.patchOrCreate=a.upsert,a.updateOrCreate=a.upsert,a.patchOrCreateWithWhere=a.upsertWithWhere,a.update=a.updateAll,a.destroyById=a.deleteById,a.removeById=a.deleteById,a.patchAttributes=a.prototype$updateAttributes,a.modelName="Company",a.product=function(){var e=r.get("Product"),t=e["::get::Company::product"];return t.apply(a,arguments)},a.product.count=function(){var e=r.get("Product"),t=e["::count::Company::product"];return t.apply(a,arguments)},a.product.create=function(){var e=r.get("Product"),t=e["::create::Company::product"];return t.apply(a,arguments)},a.product.createMany=function(){var e=r.get("Product"),t=e["::createMany::Company::product"];return t.apply(a,arguments)},a.product.destroyAll=function(){var e=r.get("Product"),t=e["::delete::Company::product"];return t.apply(a,arguments)},a.product.destroyById=function(){var e=r.get("Product"),t=e["::destroyById::Company::product"];return t.apply(a,arguments)},a.product.findById=function(){var e=r.get("Product"),t=e["::findById::Company::product"];return t.apply(a,arguments)},a.product.updateById=function(){var e=r.get("Product"),t=e["::updateById::Company::product"];return t.apply(a,arguments)},a.incubation=function(){var e=r.get("Incubation"),t=e["::get::Company::incubation"];return t.apply(a,arguments)},a.incubation.count=function(){var e=r.get("Incubation"),t=e["::count::Company::incubation"];return t.apply(a,arguments)},a.incubation.create=function(){var e=r.get("Incubation"),t=e["::create::Company::incubation"];return t.apply(a,arguments)},a.incubation.createMany=function(){var e=r.get("Incubation"),t=e["::createMany::Company::incubation"];return t.apply(a,arguments)},a.incubation.destroyAll=function(){var e=r.get("Incubation"),t=e["::delete::Company::incubation"];return t.apply(a,arguments)},a.incubation.destroyById=function(){var e=r.get("Incubation"),t=e["::destroyById::Company::incubation"];return t.apply(a,arguments)},a.incubation.findById=function(){var e=r.get("Incubation"),t=e["::findById::Company::incubation"];return t.apply(a,arguments)},a.incubation.updateById=function(){var e=r.get("Incubation"),t=e["::updateById::Company::incubation"];return t.apply(a,arguments)},a.founders=function(){var e=r.get("Person"),t=e["::get::Company::founders"];return t.apply(a,arguments)},a.founders.count=function(){var e=r.get("Person"),t=e["::count::Company::founders"];return t.apply(a,arguments)},a.founders.create=function(){var e=r.get("Person"),t=e["::create::Company::founders"];return t.apply(a,arguments)},a.founders.createMany=function(){var e=r.get("Person"),t=e["::createMany::Company::founders"];return t.apply(a,arguments)},a.founders.destroyAll=function(){var e=r.get("Person"),t=e["::delete::Company::founders"];return t.apply(a,arguments)},a.founders.destroyById=function(){var e=r.get("Person"),t=e["::destroyById::Company::founders"];return t.apply(a,arguments)},a.founders.exists=function(){var e=r.get("Person"),t=e["::exists::Company::founders"];return t.apply(a,arguments)},a.founders.findById=function(){var e=r.get("Person"),t=e["::findById::Company::founders"];return t.apply(a,arguments)},a.founders.link=function(){var e=r.get("Person"),t=e["::link::Company::founders"];return t.apply(a,arguments)},a.founders.unlink=function(){var e=r.get("Person"),t=e["::unlink::Company::founders"];return t.apply(a,arguments)},a.founders.updateById=function(){var e=r.get("Person"),t=e["::updateById::Company::founders"];return t.apply(a,arguments)},a.founderPrevs=function(){var e=r.get("Company"),t=e["::get::Company::founderPrevs"];return t.apply(a,arguments)},a.founderPrevs.count=function(){var e=r.get("Company"),t=e["::count::Company::founderPrevs"];return t.apply(a,arguments)},a.founderPrevs.create=function(){var e=r.get("Company"),t=e["::create::Company::founderPrevs"];return t.apply(a,arguments)},a.founderPrevs.createMany=function(){var e=r.get("Company"),t=e["::createMany::Company::founderPrevs"];return t.apply(a,arguments)},a.founderPrevs.destroyAll=function(){var e=r.get("Company"),t=e["::delete::Company::founderPrevs"];return t.apply(a,arguments)},a.founderPrevs.destroyById=function(){var e=r.get("Company"),t=e["::destroyById::Company::founderPrevs"];return t.apply(a,arguments)},a.founderPrevs.exists=function(){var e=r.get("Company"),t=e["::exists::Company::founderPrevs"];return t.apply(a,arguments)},a.founderPrevs.findById=function(){var e=r.get("Company"),t=e["::findById::Company::founderPrevs"];return t.apply(a,arguments)},a.founderPrevs.link=function(){var e=r.get("Company"),t=e["::link::Company::founderPrevs"];return t.apply(a,arguments)},a.founderPrevs.unlink=function(){var e=r.get("Company"),t=e["::unlink::Company::founderPrevs"];return t.apply(a,arguments)},a.founderPrevs.updateById=function(){var e=r.get("Company"),t=e["::updateById::Company::founderPrevs"];return t.apply(a,arguments)},a.employee=function(){var e=r.get("Employee"),t=e["::get::Company::employee"];return t.apply(a,arguments)},a.employee.count=function(){var e=r.get("Employee"),t=e["::count::Company::employee"];return t.apply(a,arguments)},a.employee.create=function(){var e=r.get("Employee"),t=e["::create::Company::employee"];return t.apply(a,arguments)},a.employee.createMany=function(){var e=r.get("Employee"),t=e["::createMany::Company::employee"];return t.apply(a,arguments)},a.employee.destroyAll=function(){var e=r.get("Employee"),t=e["::delete::Company::employee"];return t.apply(a,arguments)},a.employee.destroyById=function(){var e=r.get("Employee"),t=e["::destroyById::Company::employee"];return t.apply(a,arguments)},a.employee.findById=function(){var e=r.get("Employee"),t=e["::findById::Company::employee"];return t.apply(a,arguments)},a.employee.updateById=function(){var e=r.get("Employee"),t=e["::updateById::Company::employee"];return t.apply(a,arguments)},a.ipos=function(){var e=r.get("Ipo"),t=e["::get::Company::ipos"];return t.apply(a,arguments)},a.ipos.count=function(){var e=r.get("Ipo"),t=e["::count::Company::ipos"];return t.apply(a,arguments)},a.ipos.create=function(){var e=r.get("Ipo"),t=e["::create::Company::ipos"];return t.apply(a,arguments)},a.ipos.createMany=function(){var e=r.get("Ipo"),t=e["::createMany::Company::ipos"];return t.apply(a,arguments)},a.ipos.destroyAll=function(){var e=r.get("Ipo"),t=e["::delete::Company::ipos"];return t.apply(a,arguments)},a.ipos.destroyById=function(){var e=r.get("Ipo"),t=e["::destroyById::Company::ipos"];return t.apply(a,arguments)},a.ipos.findById=function(){var e=r.get("Ipo"),t=e["::findById::Company::ipos"];return t.apply(a,arguments)},a.ipos.updateById=function(){var e=r.get("Ipo"),t=e["::updateById::Company::ipos"];return t.apply(a,arguments)},a.handover=function(){var e=r.get("Mna"),t=e["::get::Company::handover"];return t.apply(a,arguments)},a.handover.count=function(){var e=r.get("Mna"),t=e["::count::Company::handover"];return t.apply(a,arguments)},a.handover.create=function(){var e=r.get("Mna"),t=e["::create::Company::handover"];return t.apply(a,arguments)},a.handover.createMany=function(){var e=r.get("Mna"),t=e["::createMany::Company::handover"];return t.apply(a,arguments)},a.handover.destroyAll=function(){var e=r.get("Mna"),t=e["::delete::Company::handover"];return t.apply(a,arguments)},a.handover.destroyById=function(){var e=r.get("Mna"),t=e["::destroyById::Company::handover"];return t.apply(a,arguments)},a.handover.findById=function(){var e=r.get("Mna"),t=e["::findById::Company::handover"];return t.apply(a,arguments)},a.handover.updateById=function(){var e=r.get("Mna"),t=e["::updateById::Company::handover"];return t.apply(a,arguments)},a.takeover=function(){var e=r.get("Mna"),t=e["::get::Company::takeover"];return t.apply(a,arguments)},a.takeover.count=function(){var e=r.get("Mna"),t=e["::count::Company::takeover"];return t.apply(a,arguments)},a.takeover.create=function(){var e=r.get("Mna"),t=e["::create::Company::takeover"];return t.apply(a,arguments)},a.takeover.createMany=function(){var e=r.get("Mna"),t=e["::createMany::Company::takeover"];return t.apply(a,arguments)},a.takeover.destroyAll=function(){var e=r.get("Mna"),t=e["::delete::Company::takeover"];return t.apply(a,arguments)},a.takeover.destroyById=function(){var e=r.get("Mna"),t=e["::destroyById::Company::takeover"];return t.apply(a,arguments)},a.takeover.findById=function(){var e=r.get("Mna"),t=e["::findById::Company::takeover"];return t.apply(a,arguments)},a.takeover.updateById=function(){var e=r.get("Mna"),t=e["::updateById::Company::takeover"];return t.apply(a,arguments)},a.investee=function(){var e=r.get("Investment"),t=e["::get::Company::investee"];return t.apply(a,arguments)},a.investee.count=function(){var e=r.get("Investment"),t=e["::count::Company::investee"];return t.apply(a,arguments)},a.investee.create=function(){var e=r.get("Investment"),t=e["::create::Company::investee"];return t.apply(a,arguments)},a.investee.createMany=function(){var e=r.get("Investment"),t=e["::createMany::Company::investee"];return t.apply(a,arguments)},a.investee.destroyAll=function(){var e=r.get("Investment"),t=e["::delete::Company::investee"];return t.apply(a,arguments)},a.investee.destroyById=function(){var e=r.get("Investment"),t=e["::destroyById::Company::investee"];return t.apply(a,arguments)},a.investee.findById=function(){var e=r.get("Investment"),t=e["::findById::Company::investee"];return t.apply(a,arguments)},a.investee.updateById=function(){var e=r.get("Investment"),t=e["::updateById::Company::investee"];return t.apply(a,arguments)},a.file=function(){var e=r.get("File"),t=e["::get::Company::file"];return t.apply(a,arguments)},a.file.count=function(){var e=r.get("File"),t=e["::count::Company::file"];return t.apply(a,arguments)},a.file.create=function(){var e=r.get("File"),t=e["::create::Company::file"];return t.apply(a,arguments)},a.file.createMany=function(){var e=r.get("File"),t=e["::createMany::Company::file"];return t.apply(a,arguments)},a.file.destroyAll=function(){var e=r.get("File"),t=e["::delete::Company::file"];return t.apply(a,arguments)},a.file.destroyById=function(){var e=r.get("File"),t=e["::destroyById::Company::file"];return t.apply(a,arguments)},a.file.findById=function(){var e=r.get("File"),t=e["::findById::Company::file"];return t.apply(a,arguments)},a.file.updateById=function(){var e=r.get("File"),t=e["::updateById::Company::file"];return t.apply(a,arguments)},a.newsCompany=function(){var e=r.get("NewsCompany"),t=e["::get::Company::newsCompany"];return t.apply(a,arguments)},a.newsCompany.count=function(){var e=r.get("NewsCompany"),t=e["::count::Company::newsCompany"];return t.apply(a,arguments)},a.newsCompany.create=function(){var e=r.get("NewsCompany"),t=e["::create::Company::newsCompany"];return t.apply(a,arguments)},a.newsCompany.createMany=function(){var e=r.get("NewsCompany"),t=e["::createMany::Company::newsCompany"];return t.apply(a,arguments)},a.newsCompany.destroyAll=function(){var e=r.get("NewsCompany"),t=e["::delete::Company::newsCompany"];return t.apply(a,arguments)},a.newsCompany.destroyById=function(){var e=r.get("NewsCompany"),t=e["::destroyById::Company::newsCompany"];return t.apply(a,arguments)},a.newsCompany.findById=function(){var e=r.get("NewsCompany"),t=e["::findById::Company::newsCompany"];return t.apply(a,arguments)},a.newsCompany.updateById=function(){var e=r.get("NewsCompany"),t=e["::updateById::Company::newsCompany"];
return t.apply(a,arguments)},a.thumbnail=function(){var e=r.get("Thumbnail"),t=e["::get::Company::thumbnail"];return t.apply(a,arguments)},a.thumbnail.create=function(){var e=r.get("Thumbnail"),t=e["::create::Company::thumbnail"];return t.apply(a,arguments)},a.thumbnail.createMany=function(){var e=r.get("Thumbnail"),t=e["::createMany::Company::thumbnail"];return t.apply(a,arguments)},a.thumbnail.destroy=function(){var e=r.get("Thumbnail"),t=e["::destroy::Company::thumbnail"];return t.apply(a,arguments)},a.thumbnail.update=function(){var e=r.get("Thumbnail"),t=e["::update::Company::thumbnail"];return t.apply(a,arguments)},a}]),s.factory("NewsCompany",["LoopBackResource","LoopBackAuth","$injector","$q",function(e,t,r,n){var a=e(o+"/newsCompanies/:id",{id:"@id"},{prototype$__get__company:{url:o+"/newsCompanies/:id/company",method:"GET"},prototype$__get__news:{url:o+"/newsCompanies/:id/news",method:"GET"},create:{url:o+"/newsCompanies",method:"POST"},createMany:{isArray:!0,url:o+"/newsCompanies",method:"POST"},upsert:{url:o+"/newsCompanies",method:"PUT"},replaceOrCreate:{url:o+"/newsCompanies/replaceOrCreate",method:"POST"},upsertWithWhere:{url:o+"/newsCompanies/upsertWithWhere",method:"POST"},exists:{url:o+"/newsCompanies/:id/exists",method:"GET"},findById:{url:o+"/newsCompanies/:id",method:"GET"},replaceById:{url:o+"/newsCompanies/:id/replace",method:"POST"},find:{isArray:!0,url:o+"/newsCompanies",method:"GET"},findOne:{url:o+"/newsCompanies/findOne",method:"GET"},updateAll:{url:o+"/newsCompanies/update",method:"POST"},deleteById:{url:o+"/newsCompanies/:id",method:"DELETE"},count:{url:o+"/newsCompanies/count",method:"GET"},prototype$updateAttributes:{url:o+"/newsCompanies/:id",method:"PUT"},createChangeStream:{url:o+"/newsCompanies/change-stream",method:"POST"},"::findById::News::newsCompany":{params:{fk:"@fk"},url:o+"/news/:id/newsCompany/:fk",method:"GET"},"::destroyById::News::newsCompany":{params:{fk:"@fk"},url:o+"/news/:id/newsCompany/:fk",method:"DELETE"},"::updateById::News::newsCompany":{params:{fk:"@fk"},url:o+"/news/:id/newsCompany/:fk",method:"PUT"},"::get::News::newsCompany":{isArray:!0,url:o+"/news/:id/newsCompany",method:"GET"},"::create::News::newsCompany":{url:o+"/news/:id/newsCompany",method:"POST"},"::createMany::News::newsCompany":{isArray:!0,url:o+"/news/:id/newsCompany",method:"POST"},"::delete::News::newsCompany":{url:o+"/news/:id/newsCompany",method:"DELETE"},"::count::News::newsCompany":{url:o+"/news/:id/newsCompany/count",method:"GET"},"::findById::Company::newsCompany":{params:{fk:"@fk"},url:o+"/companies/:id/newsCompany/:fk",method:"GET"},"::destroyById::Company::newsCompany":{params:{fk:"@fk"},url:o+"/companies/:id/newsCompany/:fk",method:"DELETE"},"::updateById::Company::newsCompany":{params:{fk:"@fk"},url:o+"/companies/:id/newsCompany/:fk",method:"PUT"},"::get::Company::newsCompany":{isArray:!0,url:o+"/companies/:id/newsCompany",method:"GET"},"::create::Company::newsCompany":{url:o+"/companies/:id/newsCompany",method:"POST"},"::createMany::Company::newsCompany":{isArray:!0,url:o+"/companies/:id/newsCompany",method:"POST"},"::delete::Company::newsCompany":{url:o+"/companies/:id/newsCompany",method:"DELETE"},"::count::Company::newsCompany":{url:o+"/companies/:id/newsCompany/count",method:"GET"}});return a.patchOrCreate=a.upsert,a.updateOrCreate=a.upsert,a.patchOrCreateWithWhere=a.upsertWithWhere,a.update=a.updateAll,a.destroyById=a.deleteById,a.removeById=a.deleteById,a.patchAttributes=a.prototype$updateAttributes,a.modelName="NewsCompany",a.company=function(){var e=r.get("Company"),t=e["::get::NewsCompany::company"];return t.apply(a,arguments)},a.news=function(){var e=r.get("News"),t=e["::get::NewsCompany::news"];return t.apply(a,arguments)},a}]),s.factory("NewsPerson",["LoopBackResource","LoopBackAuth","$injector","$q",function(e,t,r,n){var a=e(o+"/newsPeople/:id",{id:"@id"},{prototype$__get__person:{url:o+"/newsPeople/:id/person",method:"GET"},prototype$__get__news:{url:o+"/newsPeople/:id/news",method:"GET"},create:{url:o+"/newsPeople",method:"POST"},createMany:{isArray:!0,url:o+"/newsPeople",method:"POST"},upsert:{url:o+"/newsPeople",method:"PUT"},replaceOrCreate:{url:o+"/newsPeople/replaceOrCreate",method:"POST"},upsertWithWhere:{url:o+"/newsPeople/upsertWithWhere",method:"POST"},exists:{url:o+"/newsPeople/:id/exists",method:"GET"},findById:{url:o+"/newsPeople/:id",method:"GET"},replaceById:{url:o+"/newsPeople/:id/replace",method:"POST"},find:{isArray:!0,url:o+"/newsPeople",method:"GET"},findOne:{url:o+"/newsPeople/findOne",method:"GET"},updateAll:{url:o+"/newsPeople/update",method:"POST"},deleteById:{url:o+"/newsPeople/:id",method:"DELETE"},count:{url:o+"/newsPeople/count",method:"GET"},prototype$updateAttributes:{url:o+"/newsPeople/:id",method:"PUT"},createChangeStream:{url:o+"/newsPeople/change-stream",method:"POST"},"::findById::News::newsPerson":{params:{fk:"@fk"},url:o+"/news/:id/newsPerson/:fk",method:"GET"},"::destroyById::News::newsPerson":{params:{fk:"@fk"},url:o+"/news/:id/newsPerson/:fk",method:"DELETE"},"::updateById::News::newsPerson":{params:{fk:"@fk"},url:o+"/news/:id/newsPerson/:fk",method:"PUT"},"::get::News::newsPerson":{isArray:!0,url:o+"/news/:id/newsPerson",method:"GET"},"::create::News::newsPerson":{url:o+"/news/:id/newsPerson",method:"POST"},"::createMany::News::newsPerson":{isArray:!0,url:o+"/news/:id/newsPerson",method:"POST"},"::delete::News::newsPerson":{url:o+"/news/:id/newsPerson",method:"DELETE"},"::count::News::newsPerson":{url:o+"/news/:id/newsPerson/count",method:"GET"},"::findById::Person::newsPerson":{params:{fk:"@fk"},url:o+"/people/:id/newsPerson/:fk",method:"GET"},"::destroyById::Person::newsPerson":{params:{fk:"@fk"},url:o+"/people/:id/newsPerson/:fk",method:"DELETE"},"::updateById::Person::newsPerson":{params:{fk:"@fk"},url:o+"/people/:id/newsPerson/:fk",method:"PUT"},"::get::Person::newsPerson":{isArray:!0,url:o+"/people/:id/newsPerson",method:"GET"},"::create::Person::newsPerson":{url:o+"/people/:id/newsPerson",method:"POST"},"::createMany::Person::newsPerson":{isArray:!0,url:o+"/people/:id/newsPerson",method:"POST"},"::delete::Person::newsPerson":{url:o+"/people/:id/newsPerson",method:"DELETE"},"::count::Person::newsPerson":{url:o+"/people/:id/newsPerson/count",method:"GET"}});return a.patchOrCreate=a.upsert,a.updateOrCreate=a.upsert,a.patchOrCreateWithWhere=a.upsertWithWhere,a.update=a.updateAll,a.destroyById=a.deleteById,a.removeById=a.deleteById,a.patchAttributes=a.prototype$updateAttributes,a.modelName="NewsPerson",a.person=function(){var e=r.get("Person"),t=e["::get::NewsPerson::person"];return t.apply(a,arguments)},a.news=function(){var e=r.get("News"),t=e["::get::NewsPerson::news"];return t.apply(a,arguments)},a}]),s.factory("Thumbnail",["LoopBackResource","LoopBackAuth","$injector","$q",function(e,t,r,n){var a=e(o+"/thumbnails/:id",{id:"@id"},{create:{url:o+"/thumbnails",method:"POST"},createMany:{isArray:!0,url:o+"/thumbnails",method:"POST"},upsert:{url:o+"/thumbnails",method:"PUT"},replaceOrCreate:{url:o+"/thumbnails/replaceOrCreate",method:"POST"},upsertWithWhere:{url:o+"/thumbnails/upsertWithWhere",method:"POST"},exists:{url:o+"/thumbnails/:id/exists",method:"GET"},findById:{url:o+"/thumbnails/:id",method:"GET"},replaceById:{url:o+"/thumbnails/:id/replace",method:"POST"},find:{isArray:!0,url:o+"/thumbnails",method:"GET"},findOne:{url:o+"/thumbnails/findOne",method:"GET"},updateAll:{url:o+"/thumbnails/update",method:"POST"},deleteById:{url:o+"/thumbnails/:id",method:"DELETE"},count:{url:o+"/thumbnails/count",method:"GET"},prototype$updateAttributes:{url:o+"/thumbnails/:id",method:"PUT"},createChangeStream:{url:o+"/thumbnails/change-stream",method:"POST"},upload:{url:o+"/thumbnails/upload",method:"POST"},"::get::Person::thumbnail":{url:o+"/people/:id/thumbnail",method:"GET"},"::create::Person::thumbnail":{url:o+"/people/:id/thumbnail",method:"POST"},"::createMany::Person::thumbnail":{isArray:!0,url:o+"/people/:id/thumbnail",method:"POST"},"::update::Person::thumbnail":{url:o+"/people/:id/thumbnail",method:"PUT"},"::destroy::Person::thumbnail":{url:o+"/people/:id/thumbnail",method:"DELETE"},"::get::Company::thumbnail":{url:o+"/companies/:id/thumbnail",method:"GET"},"::create::Company::thumbnail":{url:o+"/companies/:id/thumbnail",method:"POST"},"::createMany::Company::thumbnail":{isArray:!0,url:o+"/companies/:id/thumbnail",method:"POST"},"::update::Company::thumbnail":{url:o+"/companies/:id/thumbnail",method:"PUT"},"::destroy::Company::thumbnail":{url:o+"/companies/:id/thumbnail",method:"DELETE"}});return a.patchOrCreate=a.upsert,a.updateOrCreate=a.upsert,a.patchOrCreateWithWhere=a.upsertWithWhere,a.update=a.updateAll,a.destroyById=a.deleteById,a.removeById=a.deleteById,a.patchAttributes=a.prototype$updateAttributes,a.modelName="Thumbnail",a}]),s.factory("Group",["LoopBackResource","LoopBackAuth","$injector","$q",function(e,t,r,n){var a=e(o+"/groups/:id",{id:"@id"},{prototype$__get__user:{url:o+"/groups/:id/user",method:"GET"},prototype$__findById__members:{params:{fk:"@fk"},url:o+"/groups/:id/members/:fk",method:"GET"},prototype$__destroyById__members:{params:{fk:"@fk"},url:o+"/groups/:id/members/:fk",method:"DELETE"},prototype$__updateById__members:{params:{fk:"@fk"},url:o+"/groups/:id/members/:fk",method:"PUT"},prototype$__get__members:{isArray:!0,url:o+"/groups/:id/members",method:"GET"},prototype$__create__members:{url:o+"/groups/:id/members",method:"POST"},prototype$__delete__members:{url:o+"/groups/:id/members",method:"DELETE"},prototype$__count__members:{url:o+"/groups/:id/members/count",method:"GET"},create:{url:o+"/groups",method:"POST"},createMany:{isArray:!0,url:o+"/groups",method:"POST"},upsert:{url:o+"/groups",method:"PUT"},replaceOrCreate:{url:o+"/groups/replaceOrCreate",method:"POST"},upsertWithWhere:{url:o+"/groups/upsertWithWhere",method:"POST"},exists:{url:o+"/groups/:id/exists",method:"GET"},findById:{url:o+"/groups/:id",method:"GET"},replaceById:{url:o+"/groups/:id/replace",method:"POST"},find:{isArray:!0,url:o+"/groups",method:"GET"},findOne:{url:o+"/groups/findOne",method:"GET"},updateAll:{url:o+"/groups/update",method:"POST"},deleteById:{url:o+"/groups/:id",method:"DELETE"},count:{url:o+"/groups/count",method:"GET"},prototype$updateAttributes:{url:o+"/groups/:id",method:"PUT"},createChangeStream:{url:o+"/groups/change-stream",method:"POST"},permit:{url:o+"/groups/permit",method:"PUT"},"::get::User::group":{url:o+"/users/:id/group",method:"GET"},"::create::User::group":{url:o+"/users/:id/group",method:"POST"},"::createMany::User::group":{isArray:!0,url:o+"/users/:id/group",method:"POST"},"::update::User::group":{url:o+"/users/:id/group",method:"PUT"},"::destroy::User::group":{url:o+"/users/:id/group",method:"DELETE"},"::get::GroupMapping::group":{url:o+"/groupMappings/:id/group",method:"GET"}});return a.patchOrCreate=a.upsert,a.updateOrCreate=a.upsert,a.patchOrCreateWithWhere=a.upsertWithWhere,a.update=a.updateAll,a.destroyById=a.deleteById,a.removeById=a.deleteById,a.patchAttributes=a.prototype$updateAttributes,a.modelName="Group",a.user=function(){var e=r.get("User"),t=e["::get::Group::user"];return t.apply(a,arguments)},a.members=function(){var e=r.get("GroupMapping"),t=e["::get::Group::members"];return t.apply(a,arguments)},a.members.count=function(){var e=r.get("GroupMapping"),t=e["::count::Group::members"];return t.apply(a,arguments)},a.members.create=function(){var e=r.get("GroupMapping"),t=e["::create::Group::members"];return t.apply(a,arguments)},a.members.createMany=function(){var e=r.get("GroupMapping"),t=e["::createMany::Group::members"];return t.apply(a,arguments)},a.members.destroyAll=function(){var e=r.get("GroupMapping"),t=e["::delete::Group::members"];return t.apply(a,arguments)},a.members.destroyById=function(){var e=r.get("GroupMapping"),t=e["::destroyById::Group::members"];return t.apply(a,arguments)},a.members.findById=function(){var e=r.get("GroupMapping"),t=e["::findById::Group::members"];return t.apply(a,arguments)},a.members.updateById=function(){var e=r.get("GroupMapping"),t=e["::updateById::Group::members"];return t.apply(a,arguments)},a}]),s.factory("GroupMapping",["LoopBackResource","LoopBackAuth","$injector","$q",function(e,t,r,n){var a=e(o+"/groupMappings/:id",{id:"@id"},{prototype$__get__group:{url:o+"/groupMappings/:id/group",method:"GET"},prototype$__get__user:{url:o+"/groupMappings/:id/user",method:"GET"},create:{url:o+"/groupMappings",method:"POST"},createMany:{isArray:!0,url:o+"/groupMappings",method:"POST"},upsert:{url:o+"/groupMappings",method:"PUT"},replaceOrCreate:{url:o+"/groupMappings/replaceOrCreate",method:"POST"},upsertWithWhere:{url:o+"/groupMappings/upsertWithWhere",method:"POST"},exists:{url:o+"/groupMappings/:id/exists",method:"GET"},findById:{url:o+"/groupMappings/:id",method:"GET"},replaceById:{url:o+"/groupMappings/:id/replace",method:"POST"},find:{isArray:!0,url:o+"/groupMappings",method:"GET"},findOne:{url:o+"/groupMappings/findOne",method:"GET"},updateAll:{url:o+"/groupMappings/update",method:"POST"},deleteById:{url:o+"/groupMappings/:id",method:"DELETE"},count:{url:o+"/groupMappings/count",method:"GET"},prototype$updateAttributes:{url:o+"/groupMappings/:id",method:"PUT"},createChangeStream:{url:o+"/groupMappings/change-stream",method:"POST"},"::get::User::groupMapping":{url:o+"/users/:id/groupMapping",method:"GET"},"::create::User::groupMapping":{url:o+"/users/:id/groupMapping",method:"POST"},"::createMany::User::groupMapping":{isArray:!0,url:o+"/users/:id/groupMapping",method:"POST"},"::update::User::groupMapping":{url:o+"/users/:id/groupMapping",method:"PUT"},"::destroy::User::groupMapping":{url:o+"/users/:id/groupMapping",method:"DELETE"},"::findById::Group::members":{params:{fk:"@fk"},url:o+"/groups/:id/members/:fk",method:"GET"},"::destroyById::Group::members":{params:{fk:"@fk"},url:o+"/groups/:id/members/:fk",method:"DELETE"},"::updateById::Group::members":{params:{fk:"@fk"},url:o+"/groups/:id/members/:fk",method:"PUT"},"::get::Group::members":{isArray:!0,url:o+"/groups/:id/members",method:"GET"},"::create::Group::members":{url:o+"/groups/:id/members",method:"POST"},"::createMany::Group::members":{isArray:!0,url:o+"/groups/:id/members",method:"POST"},"::delete::Group::members":{url:o+"/groups/:id/members",method:"DELETE"},"::count::Group::members":{url:o+"/groups/:id/members/count",method:"GET"}});return a.patchOrCreate=a.upsert,a.updateOrCreate=a.upsert,a.patchOrCreateWithWhere=a.upsertWithWhere,a.update=a.updateAll,a.destroyById=a.deleteById,a.removeById=a.deleteById,a.patchAttributes=a.prototype$updateAttributes,a.modelName="GroupMapping",a.group=function(){var e=r.get("Group"),t=e["::get::GroupMapping::group"];return t.apply(a,arguments)},a.user=function(){var e=r.get("User"),t=e["::get::GroupMapping::user"];return t.apply(a,arguments)},a}]),s.factory("LoopBackAuth",function(){function e(){var e=this;n.forEach(function(t){e[t]=r(t)}),this.currentUserData=null}function t(e,t,r){try{var n=o+t;null==r&&(r=""),e[n]=r}catch(e){}}function r(e){var t=o+e;return localStorage[t]||sessionStorage[t]||null}var n=["accessTokenId","currentUserId","rememberMe"],o="$LoopBack$";return e.prototype.save=function(){var e=this,r=this.rememberMe?localStorage:sessionStorage;n.forEach(function(n){t(r,n,e[n])})},e.prototype.setUser=function(e,t,r){this.accessTokenId=e,this.currentUserId=t,this.currentUserData=r},e.prototype.clearUser=function(){this.accessTokenId=null,this.currentUserId=null,this.currentUserData=null},e.prototype.clearStorage=function(){n.forEach(function(e){t(sessionStorage,e,null),t(localStorage,e,null)})},new e}).config(["$httpProvider",function(e){e.interceptors.push("LoopBackAuthRequestInterceptor")}]).factory("LoopBackAuthRequestInterceptor",["$q","LoopBackAuth",function(e,t){return{request:function(o){var s=n(o.url);if(s&&s!==i)return o;if(t.accessTokenId)o.headers[a]=t.accessTokenId;else if(o.__isGetCurrentUser__){var p={body:{error:{status:401}},status:401,config:o,headers:function(){return r}};return e.reject(p)}return o||e.when(o)}}}]).provider("LoopBackResource",function(){this.setAuthHeader=function(e){a=e},this.getAuthHeader=function(){return a},this.setUrlBase=function(e){o=e,i=n(o)||location.host},this.getUrlBase=function(){return o},this.$get=["$resource",function(e){var t=function(t,r,n){var o=e(t,r,n);return o.prototype.$save=function(e,t){var r=o.upsert.call(this,{},this,e,t);return r.$promise||r},o};return t.getUrlBase=function(){return o},t.getAuthHeader=function(){return a},t}]})}(window,window.angular),angular.module("testApp").factory("Modal",["$rootScope","$uibModal",function(e,t){function r(r,n){var o=e.$new();return r=r||{},n=n||"modal-default",angular.extend(o,r),t.open({templateUrl:"components/modal/modal.html",windowClass:n,scope:o})}return{confirm:{delete:function(e){return e=e||angular.noop,function(){var t,n=Array.prototype.slice.call(arguments),o=n.shift();t=r({modal:{dismissable:!0,title:"Confirm Delete",html:"<p>Are you sure you want to delete <strong>"+o+"</strong> ?</p>",buttons:[{classes:"btn-danger",text:"Delete",click:function(e){t.close(e)}},{classes:"btn-default",text:"Cancel",click:function(e){t.dismiss(e)}}]}},"modal-danger"),t.result.then(function(t){e.apply(t,n)})}}}}}]),angular.module("testApp").directive("mongooseError",function(){return{restrict:"A",require:"ngModel",link:function(e,t,r,n){t.on("keydown",function(){return n.$setValidity("mongoose",!0)})}}}),angular.module("testApp").controller("NavbarCtrl",["$scope","$window","$location","Auth","User","LoopBackAuth",function(e,t,r,n,o,a){e.menu=[{title:"뉴스",link:"news",links:"news,invest,ipo,mna"},{title:"행사",link:"event",links:"event"},{title:"지원사업",link:"business",links:"business"}],e.LoopBackAuth=a,e.isCollapsed=!0,e.isLoggedIn=n.isLoggedIn,e.isAdmin=n.isAdmin,e.isGroupMember=n.isGroupMember,e.getCurrentUser=n.getCurrentUser,e.getCurrentUser().username,e.isLoggedIn=function(){return null!==a.accessTokenId},e.logout=function(){n.logout(),r.path("/login")},e.isActive=function(e){var t=r.path().replace("/","");return e.includes(t)},e.goAdminPage=function(e){t.location="/admin"},e.refresh=function(){t.location.reload()}}]),angular.module("testApp").factory("NewsFactory",["$rootScope","$uibModal",function(e,t){function r(r,n){var o=e.$new();return r=r||{},n=n||"modal-default",angular.extend(o,r),t.open({templateUrl:"components/modal/modal.html",windowClass:n,scope:o})}function n(e,t){e.ok=function(){t.close()},e.cancel=function(){t.dismiss("cancel")}}return n.$inject=["$scope","$uibModalInstance"],{confirm:{delete:function(e){return e=e||angular.noop,function(){var t,n=Array.prototype.slice.call(arguments),o=n.shift();t=r({modal:{dismissable:!0,title:"Confirm Delete",html:"<p>Are you sure you want to delete <strong>"+o+"</strong> ?</p>",buttons:[{classes:"btn-danger",text:"Delete",click:function(e){t.close(e)}},{classes:"btn-default",text:"Cancel",click:function(e){t.dismiss(e)}}]}},"modal-danger"),t.result.then(function(t){e.apply(t,n)})}},sample:function(){return function(){t.open({templateUrl:"components/news-letter/news-letter.html",controller:n,windowClass:"hmodal-danger"})}},subscribe:function(e){return e=accout||angular.noop,function(){}}}}}]),angular.module("socketMock",[]).factory("socket",function(){return{socket:{connect:function(){},on:function(){},emit:function(){},receive:function(){}},syncUpdates:function(){},unsyncUpdates:function(){}}}),angular.module("testApp").factory("socket",["socketFactory",function(e){var t=io("",{path:"/socket.io-client"}),r=e({ioSocket:t});return{socket:r,syncUpdates:function(e,t,n){n=n||angular.noop,r.on(e+":save",function(e){var r=_.find(t,{_id:e._id}),o=t.indexOf(r),a="created";r?(t.splice(o,1,e),a="updated"):t.push(e),n(a,e,t)}),r.on(e+":remove",function(e){var r="deleted";_.remove(t,{_id:e._id}),n(r,e,t)})},unsyncUpdates:function(e){r.removeAllListeners(e+":save"),r.removeAllListeners(e+":remove")}}}]);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
